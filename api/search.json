[{"id":"8fdcceab4ae9f436243f43e17a927635","title":"软件工程-问题定义和可行性研究+结构化分析","content":"\n\n软件声明周期软件定义阶段：问题定义、可行性分析、需求分析\n\n软件开发阶段：设计、编码、测试\n\n运行维护：维护\n\n各个阶段的基本任务问题定义：要解决的问题是什么\n可行性研究：对于上一阶段定义的问题有行得通的解决办法嘛？--可行性研究报告\n需求分析:目标需求必须做什么？--需求规格说明书\n总体设计（概要设计）：概括的说，应该怎么实现目标系统\n详细设计（模块设计）：应该怎么具体地实现这个系统？\n编码和单元测试\n综合测试（集成测试，验收测试）\n软件维护（改正性维护，适应性维护，完善性维护，防御性维护）\n\n问题定义：目的：弄清“要解决的问题是什么”\n\n任务：开发者和用户一起，讨论\n  待开发软件项目的类型\n  性质\n  目标\n  大致规模以及开发软件的项目负责人\n\n可行性研究的目的：用最小的代价在尽可能短的时间内...\n\n了解客户的要求及显示环境，从技术、经济、操作和社会因素等方面研究并论证本软件项目的可行性，编写可行性研究报告，指定初步项目开发计划。\n\n技术可行性：做得了吗？做的好吗？做的快吗？\n\n经济可行性：经济效益超过开发成本吗？\n\n操作可行性：系统的操作方式在这个用户\n组织内行得通吗？\n\n社会可行性：市场和法律\n\n可行性研究的过程确定系统的规模和目标\n研究目前正在使用的系统\n导出新系统的高层逻辑模型\n重新定义问题\n导出和评价选择的解决方案\n推荐行动方针\n草拟开发计划\n\n成本-效益分析技术目的：从经济角度分析开发一个特定的新系统是否划算，从而帮助客户组织的负责人正确的判断是否投资于这个项目\n\n成本估算技术任务分解（自上向下）\n  单个任务的成本等于人力（人月数）乘每人每月平均工资\n代码行技术（自底向上）\n  软件功能成本等于源代码行数乘每行代码的平均成绩\n差别估算\n\n货币的时间价值同样数量的货币随时间的不同具有不同的价值\n货币在不同时间...\n\n纯收入整个、生命周期之内系统的累计经济效益与投资之差\n\n投资回收率结构化分析方法是结构化方法在需求分析阶段的活动\n是面向数据流（或者过程）的传统方法，它以数据流为中心构建系统的逻辑模型（自顶向下逐层分解）\n\n逻辑模型  数据建模：数据对象描述–实体-关系图（E-R图）\n  行为建模：控制规约–状态转换图\n  功能建模 加工规约–数据流图\n  数据字典\n源或宿软件系统之外的人员或组织，表示软件系统输入数据的来源和输出数据的去向，因此也成为源点和终点\n\n加工和文件加工：描述输入数据流到输出数据流的变换\n每个加工用一个定义明确的名字标识\n至少有一个输入数据流和一个输出流\n可以有多个输入数据流和多个输出数据流\n文件：保存数据信息的外部单元\n  每个文件用一个明确的名字标识\n  由加工进行读写\n  DFD中称为文件，但在具体实现时可以用文件系统实现也可以用数据库系统实现\n\n","slug":"软件工程-问题定义和可行性研究-结构化分析","date":"2022-01-17T10:56:41.968Z","categories_index":"","tags_index":"软件工程","author_index":"天琦"},{"id":"31ae776344009421a184ebef437e95af","title":"软件工程-软件需求","content":"需求的分类\n功能需求  功能需求规约了系统或序同构见必须执行的功能。\n除了对要执行的功能给出一个陈述外，还应规约如下内容： \n\n1、关于该功能输入的所有假定，或为了验证该功能输入，有关检测的假定。\n\n2、功能内的任一次序，这一次序是与外部有关的。\n\n3、对异常条件的响应，包括所有内外部所产生的错误。\n\n4、需求的时序或优先程度。\n\n5、功能之间的互斥规则。\n\n6、系统内部状态的假定。\n\n7、为了该功能的执行，所需要的输入和输出次序。\n\n8、用于转换或内部计算所需要的公式。\n\n性能需求性能需求规约了一个系统或系统构件必须具有的性能特性。\n性能需求隐含了一些满足功能需求的设计方案，经常对设计产生一些关键的影响。\n\n外部接口需求外部接口需求规约了系统或系统构件必须为之交互的硬件、软件或数据库元素。他也可能规约其格式、时间或其他因素。\n系统接口：描述一个应用如何与系统的其他应用进行交互。\n\n用户接口：规约了软件产品和用户之间接口的逻辑特性。即规约对用户所显示的数据，对用户所要求的数据以及用户如何控制该用户接口。\n\n硬件接口：如果软件系统必须与硬件设备进行交互，那么就应说明所要求的支持和协议类型。\n\n软件接口：允许与其他软件进行交互\n\n通讯接口：规约待开发系统与通讯设施(如：局域网)之间的交互。如果通讯需求包含了系统必须使用的网络类型(TCP/IP，WindowsNT)，那么有关类型的信息就应包含在SRS中。\n\n内存约束\n\n操作\n\n地点需求\n\n设计约束需求  设计约束限制了系统过系统构件的设计方案。就约束的本身而言，对其进行权衡或调整是相当困难的，甚至是不可能的。它们必须予以满足。这一性值，是与其他需求的最主要差别。为了满足功能、性能和其它需求，许多设计约束将对软件项目规划、所需要的附加成本和工作产生直接影响。\n例如：\n    系统必须用C++或其他面向对象语言编写。系统用户接口需要菜单。\n    必须在对话窗口的中间显示错误警告，其中使用红色的、14点加粗Arial字体。\n\n质量属性需求  质量属性规约了软件产品必须具有的一个性值是否达到质量方面一个所期望的水平。\n可靠性：软件系统在指定环境中没有失败而正常运行的概率。\n\n存活性：当系统的某一部分系统不能运行时，该软件继续运行或支持关键功能的可能性。\n\n可维护性：发现和改正一个软件故障或对特定的范围进行修改所要求的平均工作。\n\n用户友好性：学习和使用一个软件系统的容易程度。\n\n安全性：在一个预定的时间内，使软件系统安全的可能性。\n\n可移植性：软件系统运行的平台类型。\n\n需求规约的作用1、最重要的，作为软件开发组织和用户之间一份事实上的技术合同书；是产品功能及其环境的体现。\n2、对于项目的其余大多数工作，它是一个管理控制点。\n3、对于产品的设计，它是一个正式的、受控的起始点。\n4、是创建产品验收测试计划和用户指南的基础，即基于需求规约一般还会产生另外两个文档——畜视测试计划和用户系统操作描述。\n","slug":"软件工程-软件需求","date":"2022-01-17T10:56:41.962Z","categories_index":"","tags_index":"软件工程","author_index":"天琦"},{"id":"2d20fc1600b46cbd605d436841a23019","title":"软件工程-概念","content":"软件的定义\n\n计算机系统中的程序及其文档\n  程序是计算任务的处理对象和处理规则的描述。\n  文档是为了便于了解程序所需的阐明性资料。\n软件的特点软件是无形的、不可见的逻辑实体。\n\n软件是设计开发的，而不是生产制造的。\n\n软件是定制开发的。\n\n软件是复杂的，涉及人类社会的各行各业\n\n软件的开发成本高。\n\n软件易于复制。\n\n软件的种类系统软件\n居于计算机系统中最靠近硬件的一层，它与具体的应用领域无关，如编译程序和操作系统等。\n\n编译程序把程序人员用高级语言书写的程序翻译成与之等价的、可执行的低级语言程序。\n\n操作系统则负责管理系统的各种资源、控制程序的运行。\n\n支撑软件\n支撑软件的开发、维护与运行的软件。\n软件开发环境主要包括环境数据库、各种接口软件和工具组，三者形成整体，协同支撑软件的开发与维护。\n应用软件\n特定应用领域专用的软件。\n\n软件工程的起源现在人们认为，在信息产业产业中，微电子是基础，计算机和网络是载体，软件是核心。\n软件开发的三个阶段(1)个人程序时期(1947-1950年代末)\n(2)软件作坊时期(1960年代初-1960年代末)\n(3)软件工程时期(1970年代初至今)\n软件工程的定义应用计算机科学、数学及管理科学等原理，以工程化方法制作软件的工程，它借鉴传统工程的原则、方法，创建软件以达到提高质量，降低成本的目的。\n软件工程是一门指导计算机软件开发和维护的工程学科，软件工程是一门交叉性的学科。\n软件开发的含义软件开发的本质实现映射的基本手段: 建模  概念模型、设计模型、实现模型、部署模型\n\n软件工程的框架软件工程的目标生产具有正确性、可用性以及开销合宜的产品\n\n软件工程的活动生产一个最终满足需求且达到工程目标的软件产品所需要的步骤\n\n主要包括需求、设计、实现、确认和支持等活动。\n\n需求-定义问题，即建立系统模型\n设计-在需求分析的基础上，给出系统的软件设计方案，包括总体设计和详细设计。\n实现-把设计结果转换为可执行的程序代码。\n确认-确认活动贯穿于整个开发过程。\n支持活动-包括修改和完善。\n\n软件工程的原则选取适宜的开发模型\n\n提供高质量的工程支持\n\n重视开发过程的管理\n\n软件工程框架的作用(1)给出了软件所涉及的软件工程的工程要素\n(2)给出了各要素之间的关系。\n(3)给出了软件工程学科所研究的主要内容。\n    · 软件开发模型\n    · 软件开发方法\n    · 软件过程\n    · 软件工具\n    · 软件开发环境\n    · 计算机辅助软件工程(CASE)\n    · 软件经济学\n\n软件过程软件生存周期过程的概念软件生存周期过程在软件工程知识框架中的位置软件生存周期的概念  软件生存周期\n  软件产品或系统的一系列活动的全周期。从形成概念开始，历经开发、交付使用、在使用中不断修订和演化，直到最后被淘汰。\n\n  软件生存周期过程(软件过程)\n  软件生存周期中的一系列相关过程。\n  为了表述软件开发需要做“什么活(映射)”，引入了以下三个概念：过程是活动的集合，活动是任务的集合，任务是把输入转换成输出的操作。\n\n软件生存周期过程的概念软件过程(process): 活动的一个集合；\n活动(active): 任务的一个集合；注：“软件过程”和“活动”相当于复合映射。\n任务(task): 将输入转换为输出的操作。注：“任务”相当于原子映射。\n\n软件生存周期过程的分类  过程分类\n  按承担如啊你就按开发工作的主体，将软件分为三类\n  1、基本过程(primary processes): 是指那些与软件生产直接相关的活动集。\n  2、支持过程(supporting processes): 是有关各方按其目标所从事的一些列支持活动集。\n  3、组织过程(institutional processes)：是指那些与软件生产组织有关的活动集。\n\n基本过程获取过程\n供应过程\n开发过程\n运行过程\n维护过程\n\n支持过程  文档过程\n  配置管理过程\n  质量保证过程\n  验证过程\n  确认过程\n  联合评审过程\n  审计过程\n  问题解决过程\n\n组织过程管理过程\n基础设施过程\n改进过程\n人力资源过程\n资产管理过程\n复用程序管理过程\n领域软件工程过程\n\n软件生存周期模型 基本概念\n  一个包括软件产品开发、运行和维护中有关过程、活动和任务的框架，覆盖了从该系统的需求定义到系统的使用终止。 \n\n  中国计算机科学与技术百科全书称软件生存周期位“软件开发模型”，并把它定义为：软件过程、活动、任务的结构框架。\n\n常见的软件生存周期模型瀑布模型  系统需求\n  软件需求\n  需求分析\n  设计\n  编码\n  测试\n  运行\n\n优点：\n  1、在决定系统怎么做之前，存在一个需求阶段，鼓励对系统“做什么”进行规约(即设计之前的规约)。\n  2、在建造构件之前，存在一个设计阶段，鼓励规划系统结构(即编码之前的设计)。\n  3、在每一阶段结束时进行复审。允许获取方和用户的参与。\n  4、前一步工作产品可作为下一步被认可的、文档化的基线。允许基线和配置早期接收控制。\n\n缺点\n  1、客户必须能够完整、正确和清晰地表达他们的需求；开发人员一开始就必须理解需求。\n  2、缺乏灵活性。一旦软件需求存在偏差，就会导致开发出的软件产品不能满足用户的实际要求。\n  3、在一个项目的早期阶段，过分地强调了基线和里程碑处的文档，可能要花费更多的时间，用于建立一些用处不大的文档。\n  4、直到项目结束之前，都不能演示系统的能力，增加了项目的风险。\n\n增量模型  该模型有一个假设，即需求可以分段，称为一些列增量产品，每一增量可以分别地开发。\n  优点：\n  具有瀑布模型的所有优点\n  还有\n  1、第一个可交付版本所需要的成本和时间是很少的。\n  2、开发由增量表示的小系统所承担的风险是不大的。\n  3、由于很快发布了第一个版本，因此可以减少用户需求的变更。\n  4、允许增量投资，即在项目开始时，可以仅对一个或两个增量投资。\n\n  缺点：\n  不适于某些项目，或使用有误，有以下缺点：\n  1、如果没有对用户的变更要求进行规划，那么产生的初始增量可能会造成后来增量的不稳定。\n  2、如果需求不向早期思考的那样稳定和完整，那么一些增量就可能需要重新开发，重新发布。\n  3、管理发生的成本、进度和配置的复杂性，可能会超出一些组织的能力。\n\n演化模型  是一种有弹性的过程模式，由一些效地开发步组成，每一步历经需求分析、设计、实现和验证，产生软件产品的一个增量。通过这些迭代，完成最终软件产品的开发。\n  · 针对事先不能完整地定义需求的软件开发\n  · 针对用户的核心需求，开法核心系统\n  · 根据用户的反馈，实施活动的迭代\n\n喷泉模型· 特征：迭代，无缝\n\n· 与面向对象技术的关系\n\n​      \n​      \n","slug":"软件工程-概念","date":"2022-01-17T10:56:41.957Z","categories_index":"","tags_index":"软件工程","author_index":"天琦"},{"id":"20390029732decdfee16d2eaed2c63c5","title":"计算机网络-运输层","content":"第 5 章  运输层运输层协议概述进程之间的通信\n运输层向它上面的应用层提供通信服务，它属于面向通信部分的最高层，同时也是用户功能中的最低层。\n两个主机进行通信实际上就是两个主机中的应用进程互相通信。\n应用进程之间的通信又称为端到端的通信。\n运输层协议和网络层协议的主要区别\n\n运输层的两个主要协议\n(1) 用户数据报协议 UDP(User Datagram Protocol)\nUDP 传送的数据单位协议是 UDP 报文或用户数据报。\n\n\n(2) 传输控制协议 TCP(Transmission Control Protocol)\nTCP 传送的数据单位协议是 TCP 报文段(segment)\n\n\n\n运输层的端口\n软件端口与硬件端口\n在协议栈层间的抽象的协议端口是软件端口。\n路由器或交换机上的端口是硬件端口。\n\n\n三类端口\n熟知端口，数值一般为 0~1023。\n登记端口号，数值为1024~49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。\n客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。\n\n\n\n用户数据报协议 UDPUDP 概述\n用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。\n\nUDP 的首部格式传输控制协议 TCP 概述TCP 最主要的特点\n传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。\n\nTCP 的连接\nTCP 连接的端点叫做套接字(socket)或插口。\n套接字 socket = (IP地址: 端口号)\n\n\n\n可靠传输的工作原理停止等待协议连续 ARQ 协议TCP 报文段的首部格式序号 ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401确认号 ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701数据偏移 ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度确认 ACK ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1同步 SYN ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1终止 FIN ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接窗口 ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的概要: 示意图TCP 可靠传输的实现以字节为单位的滑动窗口\n窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。\n\n发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。\n接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。    *1    *2    *3    *4\n超时重传时间的选择\n超时重传\nTCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。\n\n\n\n一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：    * 其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。\n超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：（其中 RTTd 为偏差的加权平均值）\n选择确认 SACKTCP的流量控制利用滑动窗口实现流量控制\nTCP 流量控制\n流量控制是为了控制发送方发送速率，保证接收方来得及接收。\n\n\n\n接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。\n\n流量控制举例\n\n必须考虑传输效率TCP 的拥塞控制拥塞控制的一般原理\n如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。\n\n拥塞控制所起的作用\n\n\n几种拥塞控制方法\nTCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。\n发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。\n\n\n\n为了便于讨论，做如下假设接收方有足够大的接收缓存，因此不会发生流量控制；虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。\n\n\n慢开始与拥塞避免\n\n\n发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …\n\n\n\n注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。\n如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。\n\n\n快重传与快恢复\n\n\n在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。\n\n\n\n在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。\n在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。\n慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。\n随机早期检测 REDTCP 的运输连接管理TCP 的连接建立\n假设 A 为客户端，B 为服务器端。\n\n首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。\nA 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。\nB 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。\nA 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。\nB 收到 A 的确认后，连接建立。\n\n三次握手的原因\n第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。\n\n\n\n客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。\nTCP 的连接释放\n以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。\n\nA 发送连接释放报文，FIN=1。\nB 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。\n当 B 不再需要连接时，发送连接释放报文，FIN=1。\nA 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。\nB 收到 A 的确认后释放连接。\n\n四次挥手的原因\n客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。\n\n\nTIME_WAIT\n客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：\n确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。\n等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。\n\n\n\n\n\nTCP 的有限状态机\n粗实线箭头表示对客户进程的正常变迁。粗虚线箭头表示对服务器进程的正常变迁。另一种细线箭头表示异常变迁。\n\n\n","slug":"计算机网络-运输层","date":"2022-01-17T10:56:41.950Z","categories_index":"计算机网络","tags_index":"计算机网络","author_index":"天琦"},{"id":"ff9ad817d503d5db7c3050b2da7f6143","title":"计算机网络-网络层","content":"第 4 章  网络层网络层提供的两种服务虚电路服务数据报服务概要: 虚电路服务与数据报服务的对比网际协议 IP网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有四个协议：\n地址解析协议 ARP (Address Resolution Protocol)\n逆地址解析协议 RARP   (Reverse Address Resolution Protocol)\n网际控制报文协议 ICMP   (Internet Control Message Protocol)\n网际组管理协议 IGMP   (Internet Group Management Protocol)\n概要: 示意图\n\n虚拟互连网络\n网络互相连接起来要使用一些中间设备\n物理层中继系统：转发器(repeater)。\n数据链路层中继系统：网桥或桥接器(bridge)。\n网络层中继系统：路由器(router)。\n网桥和路由器的混合物：桥路器(brouter)。\n网络层以上的中继系统：网关(gateway)。  \n\n\n\nIP 数据报的格式\n版本 : 有 4（IPv4）和 6（IPv6）两个值；\n首部长度 : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。\n区分服务 : 用来获得更好的服务，一般情况下不使用。\n总长度 : 包括首部长度和数据部分长度。\n生存时间 ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。\n协议 ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。\n首部检验和 ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。\n标识 : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。\n片偏移 : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。\nIP数据报分片\n\n\n概要: 示意图\n\n分类的 IP 地址\nIP 地址的编址方式经历了三个历史阶段：\n分类\n由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。IP 地址 ::= {&lt; 网络号 &gt;, &lt; 主机号 &gt;}\n示意图\n\n\n\n\n子网划分\n通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。\n\n\n\n\n\nIP 地址 ::= {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}\n要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。\n注意，外部网络看不到子网的存在。    * 无分类        * 无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。\nIP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}\nCIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。\nCIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。\n一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。\n在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。\nIP 地址与硬件地址\nIP层抽象的互联网屏蔽了下层很复杂的细节在抽象的网络层上讨论问题，就能够使用统一的、抽象的 IP 地址研究主机和主机或主机和路由器之间的通信 \n示意图\n\n\n\n地址解析协议 ARP 与逆地址解析协议RARP\n缘由\n网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。\n\n\n地址解析协议 ARP\nARP 实现由 IP 地址得到 MAC 地址\n每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。\n\n\n\n\n\n如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。            * 示意图\n\n逆地址解析协议 RARP\n逆地址解析协议 RARP 使只知道自己硬件地址的主机能够知道其 IP 地址。\n这种主机往往是无盘工作站。 因此 RARP协议目前已很少使用。\n\n\n\n\n\nIP 层转发分组的流程\n分组转发算法 \n(1)  从数据报的首部提取目的主机的 IP 地址 D, 得出目的网络地址为 N。\n(2)  若网络 N 与此路由器直接相连，则把数据报直接交付目的主机 D；否则是间接交付，执行(3)。\n(3)  若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行(4)。\n(4)  若路由表中有到达网络 N 的路由，则把数据报传送给路由表指明的下一跳路由器；否则，执行(5)。\n(5) 若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行(6)。\n(6)  报告转发分组出错。 \n概要: 示意图\n\n\n\n划分子网和构造超网划分子网使用子网时分组转发无分类编址 CIDR（构造超网）网际控制报文协议 ICMP简介\nICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。\n\nICMP 报文的种类\nICMP 差错报告报文\n终点不可达 \n源点抑制(Source quench)  \n时间超过 \n参数问题 \n改变路由（重定向）(Redirect)  \n\n\nICMP 询问报文\n回送请求和回答报文\n时间戳请求和回答报文\n\n\nICMP 报文的前 4 个字节是统一的格式，共有三个字段：即类型、代码和检验和。接着的 4 个字节的内容与 ICMP 的类型有关。 \n\nICMP 的应用举例\n\nPing\n\n\nPing 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。\n\n\n\nPing 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。\n\n\nTraceroute\n\n\nTraceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。\n\n\n\nTraceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。        * 源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；        * 源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。        * 不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。        * 之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。\n因特网的路由选择协议有关路由选择协议的几个基本概念\n静态路由选择策略——即非自适应路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化。 \n动态路由选择策略——即自适应路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。\n\n自治系统 AS(Autonomous System)\n自治系统 AS 的定义：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。\n\n内部网关协议 IGP (Interior Gateway Protocol)\n即在一个自治系统内部使用的路由选择协议。\n内部网关协议 RIP\nRIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。\n\n\n\n\n\nRIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。        * 距离向量算法：            * 对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；            * 对修改后的 RIP 报文中的每一个项目，进行以下步骤：            * 若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；            * 否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。            * 若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。        * RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。    * 内部网关协议 OSPF        * 开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。\n开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。        * OSPF 具有以下特点：            * 向本自治系统中的所有路由器发送信息，这种方法是洪泛法。            * 发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。            * 只有当链路状态发生变化时，路由器才会发送信息。        * 所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。\n外部网关协议 BGP (External Gateway Protocol)\n若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中。\nAS 之间的路由选择很困难，主要是由于：\n互联网规模很大；\n各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；\nAS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。\n\n\nBGP 只能寻找一条比较好的路由，而不是最佳路由。\n\n每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。    * 示意图\n路由器的构成\n路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。也就是说，将路由器某个输入端口收到的分组，按照分组要去的目的地（即目的网络），把该分组从路由器的某个合适的输出端口转发给下一跳路由器。\n路由器从功能上可以划分为\n路由选择\n分组转发\n\n\n分组转发结构由三个部分组成\n交换结构\n一组输入端口\n一组输出端口\n概要: 示意图\n\n\n\nIP 多播IP多播的基本概念\n多播可明显地减少网络中资源的消耗\n\n在局域网上进行硬件多播因特网组管理协议 IGMP 和多播路由选择协议\nIGMP 使多播路由器\u000b知道多播组成员信息 \n多播转发必须动态地适应多播组成员的变化（这时网络拓扑并未发生变化）。请注意，单播路由选择通常是在网络拓扑发生变化时才需要更新路由。\n\n虚拟专用网 VPN 和网络地址转换 NAT虚拟专用网 VPN\n由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。\n有三个专用地址块：\n10.0.0.0 ~ 10.255.255.255\n172.16.0.0 ~ 172.31.255.255\n192.168.0.0 ~ 192.168.255.255\n\n\n\n\nVPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。\n下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。\n\n网络地址转换 NAT\n专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。\n在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。\n\n因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务\n","slug":"计算机网络-网络层","date":"2022-01-17T10:56:41.944Z","categories_index":"计算机网络","tags_index":"计算机网络","author_index":"天琦"},{"id":"1352f01675418c83e717992207641c09","title":"计算机网络-物理层","content":"第 2 章  物理层物理层的基本概念物理层的主要任务描述为确定与传输媒体的接口的一些特性\n机械特性    指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。\n电气特性    指明在接口电缆的各条线上出现的电压的范围。\n功能特性    指明某条线上出现的某一电平的电压表示何种意义。\n过程特性    指明对于不同功能的各种可能事件的出现顺序。\n\n数据通信的基础知识数据通信系统的模型有关信道的几个基本概念\n单向通信（单工通信）——只能有一个方向的通信而没有反方向的交互。\n双向交替通信（半双工通信）——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。\n双向同时通信（全双工通信）——通信的双方可以同时发送和接收信息。\n几种最基本的调制方法\n调幅(AM)：载波的振幅随基带数字信号而变化。\n调频(FM)：载波的频率随基带数字信号而变化。\n调相(PM) ：载波的初始相位随基带数字信号而变化。\n概要: 图片\n\n\n\n信道的极限容量\n信道能够通过的频率范围\n\n1924 年，奈奎斯特(Nyquist)就推导出了著名的奈氏准则。他给出了在假定的理想条件下，为了避免码间串扰，码元的传输速率的上限值\n\n\n信噪比\n\n香农(Shannon)用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率。\n\n\n信道的极限信息传输速率 C 可表达为C = W log2(1+S/N)  b/s\n\n\n\n\n\n\n\n\n\n\nW 为信道的带宽（以 Hz 为单位）；\n\n\n\n\n\n\n\n\n\n\nS 为信道内所传信号的平均功率；\n\n\n\n\n\n\n\n\n\n\nN 为信道内部的高斯噪声功率。\n\n香农公式表明\n信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。\n只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。\n若信道带宽 W 或信噪比 S/N 没有上限（当然实际信道不可能是这样的），则信道的极限信息传输速率 C 也就没有上限。\n实际信道上能够达到的信息传输速率要比香农的极限传输速率低不少。\n\n\n\n\n\n信道的极限信息传输速率物理层下面的传输媒体导向传输媒体\n双绞线\n屏蔽双绞线 STP (Shielded Twisted Pair)\n无屏蔽双绞线 UTP (Unshielded Twisted Pair)\n\n\n同轴电缆\n50 Ω同轴电缆\n75 Ω 同轴电缆\n\n\n光缆\n光纤的工作原理\n光线在纤芯中传输的方式是不断地全反射\n\n\n\n\n\n非导向传输媒体\n无线传输所使用的频段很广。\n短波通信主要是靠电离层的反射，但短波信道的通信质量较差。\n微波在空间主要是直线传播。\n卫星通信  \n地面微波接力通信\n\n\n\n信道复用技术频分复用、时分复用和统计时分复用\n频分复用 FDM(Frequency Division Multiplexing)\n用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。\n示意图\n\n\n\n\n时分复用TDM(Time Division Multiplexing)\n时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。\n示意图\n\n\n\n\n统计时分复用 STDM\u000b(Statistic TDM)  \n是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。\n示意图\n\n\n\n\n\n波分复用\n波分复用 WDM(Wavelength Division Multiplexing)  \n光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。\n\n\n\n码分复用\n码分复用 CDM(Code Division Multiplexing)  \n常用的名词是码分多址 CDMA     (Code Division Multiple Access)。\n各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。\n这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。\n每一个比特时间划分为 m 个短的间隔，称为码片(chip)。\n具体内容\n1.为每个用户分配 m bit 的码片，并且所有的码片正交，对于任意两个码片 S 和 T 有\n2.为了讨论方便，取 m=8，设码片 s 为 00011011。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。\n\n\n\n\n\n在计算时将 00011011 记作 (-1 -1 -1 +1 +1 -1 +1 +1)，可以得到(其中 S’ 为 S 的反码。)\n* 3.利用上面的式子我们知道，当接收端使用码片  对接收到的数据进行内积运算时，结果为 0 的是其它用户发送的数据，结果为 1 的是用户发送的比特 1，结果为 -1 的是用户发送的比特 0。\n* 码分复用需要发送的数据量为原先的 m 倍。\n\n数字传输系统脉码调制 PCM 体制同步光纤网 SONET 和同步数字系列 SDH宽带接入技术xDSL技术\nxDSL 技术就是用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务。把 0~4 kHz 低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。\n\n光纤同轴混合网（HFC 网）\nHFC 网是在目前覆盖面很广的有线电视网 CATV 的基础上开发的一种居民宽带接入网。HFC 网除可传送 CATV 外，还提供电话、数据和其他宽带交互型业务。\n\nFTTx 技术\nFTTx（光纤到……）也是一种实现宽带居民接入网的方案。这里字母 x 可代表不同意思。\n光纤到家 FTTH (Fiber To The Home)：光纤一直铺设到用户家庭可能是居民接入网最后的解决方法。\n光纤到大楼 FTTB (Fiber To The Building)：光纤进入大楼后就转换为电信号，然后用电缆或双绞线分配到各用户。\n光纤到路边 FTTC (Fiber To The Curb)：从路边到各用户可使用星形结构双绞线作为传输媒体。\n\n\n\n\n","slug":"计算机网络-物理层","date":"2022-01-17T10:56:41.937Z","categories_index":"计算机网络","tags_index":"计算机网络","author_index":"天琦"},{"id":"947233d5b581247e4bb49e52594f7269","title":"计算机网络-概述","content":"第 1 章   概述计算机网络在信息时代中的作用21 世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代网络现已成为信息社会的命脉和发展知识经济的重要基础网络是指“三网”，即电信网络、有线电视网络和计算机网络发展最快的并起到核心作用的是计算机网络因特网(Internet)的发展\n进入 20 世纪 90 年代以后，以因特网为代表的计算机网络得到了飞速的发展。\n已从最初的教育科研网络逐步发展成为商业网络。\n已成为仅次于全球电话网的世界第二大网络。\n\n因特网的意义\n因特网是自印刷术以来人类通信方面最大的变革。\n现在人们的生活、工作、学习和交往都已离不开因特网。\n\n因特网概述网络的网络\n起源于美国的因特网现已发展成为世界上最大的国际性计算机互联网\n\n网络(network)由若干结点(node)和连接这些结点的链路(link)组成。\n\n互联网是“网络的网络”(network of networks)。\n\n连接在因特网上的计算机都称为主机(host)。\n\n网络与因特网\n\n网络把许多计算机连接在一起。\n因特网则把许多网络连接在一起。\n\n\n\n因特网发展的三个阶段\n第一阶段是从单个网络 ARPANET 向互联网发展的过程。\n1983 年 TCP/IP 协议成为 ARPANET 上的标准协议。\n人们把 1983 年作为因特网的诞生时间。\n\n\n第二阶段的特点是建成了三级结构的因特网。\n三级计算机网络，分为主干网、地区网和校园网（或企业网）。\n\n\n第三阶段的特点是逐渐形成了多层次 ISP 结构的因特网。\n出现了因特网服务提供者 ISP (Internet Service Provider)。  \n根据提供服务的覆盖面积大小以及所拥有的IP 地址数目的不同，ISP 也分成为不同的层次。\n\n\n\n因特网的标准化工作\n制订因特网的正式标准要经过以下的四个阶段\n因特网草案(Internet Draft) ——在这个阶段还不是 RFC 文档。\n建议标准(Proposed Standard) ——从这个阶段开始就成为 RFC 文档。\n草案标准(Draft Standard)\n因特网标准(Internet Standard)\n\n\n各种RFC之间的关系\n\n计算机网络在我国的发展因特网的组成因特网的边缘部分\n由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。\n处在因特网边缘的部分就是连接在因特网上的所有的主机。这些主机又称为端系统(end system)。\n“主机 A 和主机 B 进行通信”，实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。\n即“主机 A 的某个进程和主机 B 上的另一个进程进行通信”。或简称为“计算机之间通信”\n\n\n\n因特网的核心部分\n由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）\n网络核心部分是因特网中最复杂的部分。\n网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。\n在网络核心部分起特殊作用的是路由器(router)。\n路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。\n在路由器中的输入和输出端口之间没有直接连线。\n路由器处理分组的过程是：\n把收到的分组先放入缓存（暂时存储）；\n查找转发表，找出到某个目的地址应从哪个端口转发；\n把分组送到适当的端口转发出去。\n\n\n\n\n\n\n路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。\n\n\n\n计算机网络在我国的发展(1) 中国公用计算机互联网 CHINANET(2) 中国教育和科研计算机网 CERNET(3) 中国科学技术网 CSTNET(4) 中国联通互联网 UNINET(5) 中国网通公用互联网 CNCNET(6) 中国国际经济贸易互联网 CIETNET(7) 中国移动互联网 CMNET(8) 中国长城互联网 CGWNET（建设中）(9) 中国卫星集团互联网 CSNET（建设中）计算机网络的类别计算机网络的定义\n最简单的定义：计算机网络是一些互相连接的、自治的计算机的集合。\n因特网(Internet)是“网络的网络”。\n\n几种不同类别的网络\n不同作用范围的网络\n广域网 WAN (Wide Area Network)\n局域网 LAN (Local Area Network)\n城域网 MAN (Metropolitan Area Network)\n个人区域网 PAN (Personal Area Network)\n\n\n从网络的使用者进行分类\n公用网 (public network)\n专用网 (private network)\n\n\n\n计算机网络的性能计算机网络的性能指标\n速率\n\n比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。\nBit 来源于 binary digit，意思是一个“二进制数字”，因此一个比特就是二进制数字中的一个 1 或 0。\n速率即数据率(data rate)或比特率(bit rate)是计算机网络中最重要的一个性能指标。速率的单位是 b/s，或kb/s, Mb/s, Gb/s 等\n速率往往是指额定速率或标称速率。  \n\n\n带宽\n\n“带宽”(bandwidth)本来是指信号具有的频带宽度，单位是赫（或千赫、兆赫、吉赫等）。\n现在“带宽”是数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b/s (bit/s)。\n常用的带宽单位\n更常用的带宽单位是\n千比每秒，即 kb/s （103 b/s）\n兆比每秒，即 Mb/s（106 b/s）\n吉比每秒，即 Gb/s（109 b/s）\n太比每秒，即 Tb/s（1012 b/s）\n请注意：在计算机界，K = 210 = 1024\nM = 220, G = 230, T = 240。\n\n\n数字信号流随时间的变化\n在时间轴上信号的宽度随带宽的增大而变窄。\n\n\n\n\n吞吐量\n\n吞吐量(throughput)表示在单位时间内通过某个网络（或信道、接口）的数据量。\n吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。\n吞吐量受网络的带宽或网络的额定速率的限制。  \n\n\n时延(delay 或 latency)\n\n传输时延（发送时延 ）    发送数据时，数据块从结点进入到传输媒体所需要的时间。\n也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。\n传播时延    电磁波在信道中需要传播一定的距离而花费的时间。\n信号传输速率（即发送速率）和信号在信道上的传播速率是完全不同的概念。\n处理时延    交换结点为存储转发而进行一些必要的处理所花费的时间。\n排队时延    结点缓存队列中分组排队所经历的时延。\n排队时延的长短往往取决于网络中当时的通信量。\n数据经历的总时延就是发送时延、传播时延、处理时延和排队时延之和：\n\n\n时延带宽积\n\n链路的时延带宽积又称为以比特为单位的链路长度。\n\n\n利用率\n\n信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。\n网络利用率则是全网络的信道利用率的加权平均值。\n信道利用率并非越高越好。\n\n\n时延与网络利用率的关系\n\n根据排队论的理论，当某信道的利用率增大时，该信道引起的时延也就迅速增加。\n若令 D0 表示网络空闲时的时延，D 表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示 D 和 D0之间的关系：\nU 是网络的利用率，数值在 0 到 1 之间。\n\n\n\n\n\n计算机网络的非性能特征\n费用\n质量\n标准化\n可靠性\n可扩展性和可升级性\n易于管理和维护\n\n计算机网络的体系结构计算机网络体系结构的形成\n相互通信的两个计算机系统必须高度协调工作才行，而这种“协调”是相当复杂的。\n“分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。\n\n协议与划分层次\n划分层次的必要性\n计算机网络中的数据交换必须遵守事先约定好的规则。\n这些规则明确规定了所交换的数据的格式以及有关的同步问题（同步含有时序的意思）。\n网络协议(network protocol)，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。\n\n\n网络协议的组成要素\n语法     数据与控制信息的结构或格式 。\n语义     需要发出何种控制信息，完成何种动作以及做出何种响应。\n同步    事件实现顺序的详细说明。\n\n\n分层的好处\n各层之间是独立的。\n灵活性好。\n结构上可分割开。\n易于实现和维护。\n能促进标准化工作。  \n\n\n\n具有五层协议的体系结构\nTCP/IP 是四层的体系结构：应用层、运输层、网际层和网络接口层。\n但最下面的网络接口层并没有具体内容。\n因此往往采取折中的办法，即综合 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构 。\n\n实体、协议、服务和服务访问点\n实体(entity) 表示任何可发送或接收信息的硬件或软件进程。\n协议是控制两个对等实体进行通信的规则的集合。\n在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。\n要实现本层协议，还需要使用下层所提供的服务。\n本层的服务用户只能看见服务而无法看见下面的协议。\n下面的协议对上面的服务用户是透明的。\n协议是“水平的”，即协议是控制对等实体之间通信的规则。\n服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。\n同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP (Service Access Point)。\n协议必须把所有不利的条件事先都估计到，而不能假定一切都是正常的和非常理想的。\n看一个计算机网络协议是否正确，不能光看在正常情况下是否正确，而且还必须非常仔细地检查这个协议能否应付各种异常情况。\n\ninternet 和 Internet 的区别以小写字母 i 开始的 internet（互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络以大写字母I开始的的 Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET万维网 WWW 的问世因特网已经成为世界上规模最大和增长速率最快的计算机网络，没有人能够准确说出因特网究竟有多大因特网的迅猛发展始于 20 世纪 90 年代。由欧洲原子核研究组织 CERN 开发的万维网 WWW (World Wide Web)被广泛使用在因特网上，大大方便了广大非网络专业人员对网络的使用，成为因特网的这种指数级增长的主要驱动力客户软件的特点被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，客户程序必须知道服务器程序的地址不需要特殊的硬件和很复杂的操作系统服务器软件的特点一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址一般需要强大的硬件和高级的操作系统支持因特网的边缘部分与核心部分两种国际标准法律上的(de jure)国际标准 OSI 并没有得到市场的认可是非国际标准 TCP/IP 现在获得了最广泛的应用TCP/IP 常被称为事实上的(de facto) 国际标准分组交换在发送端，先把较长的报文划分成较短的、固定长度的数据段添加首部构成分组\n每一个数据段前面添加上首部构成分组\n\n分组交换的传输单元\n分组交换网以“分组”作为数据传输单元。\n依次把各分组发送到接收端（假定接收端在左边）\n\n分组首部的重要性\n每一个分组的首部都含有地址等控制信息。\n分组交换网中的结点交换机根据收到的分组的首部中的地址信息，把分组转发到下一个结点交换机。\n用这样的存储转发方式，最后分组就能到达最终目的地。\n\n收到分组后剥去首部\n接收端收到分组后剥去首部还原成报文\n\n最后还原成原来的报文分组交换的优点\n高效    动态分配传输带宽，对通信链路是逐段占用。\n灵活    以分组为传送单位和查找路由。\n迅速    不必先建立连接就能向其他主机发送分组。\n可靠    保证可靠性的网络协议；分布式的路由选择协议使网络有很好的生存性。\n\n分组交换带来的问题\n分组在各结点存储转发时需要排队，这就会造成一定的时延。\n分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。\n\n电路交换两部电话机只需要用一对电线就能够互相连接起来更多的电话机互相连通\n5 部电话机两两相连，需 10 对电线。\nN 部电话机两两相连，需 N(N – 1)/2 对电线。\n当电话机的数量很大时，这种连接方法需要的电线对的数量与电话机数的平方成正比。\n\n使用交换机\n当电话机的数量增多时，就要使用交换机来完成全网的交换任务。\n\n电路交换的特点\n电路交换必定是面向连接的。\n电路交换的三个阶段：\n建立连接\n通信\n释放连接\n\n\n电路交换传送计算机数据效率低\n计算机数据具有突发性。\n这导致通信线路的利用率很低。\n\n\n\n三种交换的比较两种通信方式客户服务器方式（C/S 方式）   即Client/Server方式\n客户(client)和服务器(server)都是指通信中所涉及的两个应用进程。\n客户服务器方式所描述的是进程之间服务和被服务的关系。\n客户是服务的请求方，服务器是服务的提供方。\n\n对等方式（P2P 方式）   即 Peer-to-Peer方式\n对等连接(peer-to-peer，简写为 P2P)是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。\n只要两个主机都运行了对等连接软件（P2P 软件），它们就可以进行平等的、对等连接通信。\n双方都可以下载对方已经存储在硬盘中的共享文档。\n对等连接方式的特点\n对等连接方式从本质上看仍然是使用客户服务器方式，只是对等连接中的每一个主机既是客户又同时是服务器。\n例如主机 C 请求 D 的服务时，C 是客户，D 是服务器。但如果 C 又同时向 F提供服务，那么 C 又同时起着服务器的作用。\n\n\n\nTCP/IP 的体系结构关于开放系统互连参考模型OSI/RM只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信在市场化方面 OSI 却失败了\nOSI 的专家们在完成 OSI 标准时没有商业驱动力；\nOSI 的协议实现起来过分复杂，且运行效率很低；\nOSI 标准的制定周期太长，因而使得按 OSI 标准生产的设备无法及时进入市场；\nOSI 的层次划分并也不太合理，有些功能在多个层次中重复出现。  \n\n\n","slug":"计算机网络-概述","date":"2022-01-17T10:56:41.929Z","categories_index":"计算机网络","tags_index":"计算机网络","author_index":"天琦"},{"id":"30a6a316779251366682317826d96e01","title":"计算机网络-数据链路层","content":"第 3 章  数据链路层使用点对点信道的数据链路层数据链路和帧\n数据链路层使用的信道主要有以下两种类型：\n点对点信道。这种信道使用一对一的点对点通信方式。\n广播信道。这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。\n\n\n数据链路层模型\n链路(link)是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。\n数据链路(data link) 除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。\n数据链路层传送的是帧\n\n三个基本问题\n(1) 封装成帧\n将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。  \n\n\n(2) 透明传输\n透明表示一个实际存在的事物看起来好像不存在一样。\n帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。  \n\n\n(3) 差错控制\n循环冗余检验 CRC目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错。\n帧检验序列 FCS在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。\n冗余码的计算\n例子：\n现在 k = 6, M = 101001。设 n = 3, 除数 P = 1101，被除数是 2^nM = 101001000。模 2 运算的结果是：商 Q = 110101，余数 R = 001。把余数 R 作为冗余码添加在数据 M 的后面发送出去。发送的数据是：2^nM + R即：101001001，共 (k + n) 位。\n\n\n概要: CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。\nFCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。\n\n\n\n\n\n\n\n点对点协议 PPPPPP 协议的特点\n互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。\n\nPPP 协议的帧格式\n示意图：F 字段为帧的定界符A 和 C 字段暂时没有意义FCS 字段是使用 CRC 的检验序列信息部分的长度不超过 1500\n\nPPP 协议的工作状态\n过程：当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。这些分组及其响应选择一些 PPP 参数，和进行网络层配置，NCP 给新接入的 PC机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。\n\n使用广播信道的数据链路层局域网的数据链路层\n局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。\n主要有以太网、令牌环网、FDDI 和 ATM 等局域网技术，目前以太网占领着有线局域网市场。\n可以按照网络拓扑结构对局域网进行分类：\n星形网\n环形网\n总线网\n树形网\n\n\n数据链路层的两个子层\n逻辑链路控制 LLC (Logical Link Control)子层\n媒体接入控制 MAC (Medium Access Control)子层。\n概要: 与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关，不管采用何种协议的局域网对 LLC 子层来说都是透明的，所以以后一般不考虑 LLC 子层。\n\n\n适配器\n网络接口板又称为通信适配器(adapter)或网络接口卡 NIC (Network Interface Card)，或“网卡”。\n适配器的重要功能：\n进行串行/并行转换。\n对数据进行缓存。\n在计算机的操作系统安装设备驱动程序。\n实现以太网协议。\n\n\n\n\n\n\n\nCSMA/CD 协议\nCSMA/CD 表示载波监听多点接入 / 碰撞检测。\n多点接入 ：说明这是总线型网络，许多主机以多点的方式连接到总线上。\n载波监听 ：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。\n碰撞检测 ：在发送中，如果监听到信道已有其它主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。\n\n\n\n\n具体内容\n记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 争用期 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。\n当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 截断二进制指数退避算法 来确定。从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。\n概要: 示意图\n\n\n\n使用广播信道的以太网使用集线器的星形拓扑\n传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。这种以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做集线器(hub)  \n\n以太网的信道利用率\n一个帧从开始发送，经可能发生的碰撞后，将再重传数次，到发送成功且信道转为空闲(即再经过时间 τ  使得信道上无信号在传播)时为止，是发送一帧所需的平均时间。\n发送一帧占用线路的时间是 T0 +  τ ，而帧本身的发送时间是 T0。于是我们可计算出理想情况下的极限信道利用率 Smax为：\n\n以太网的 MAC 层\nMAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。\n一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。\n\n以太网帧格式\n类型 ：标记上层使用的协议；数据 ：长度在 46-1500 之间，如果太小则需要填充；FCS ：帧检验序列，使用的是 CRC 检验方法；\n\n扩展的以太网在物理层扩展以太网\n用多个集线器可连成更大的局域网\n用集线器组成更大的局域网都在一个碰撞域中\n优点\n使原来属于不同碰撞域的局域网上的计算机能够进行跨碰撞域的通信。\n扩大了局域网覆盖的地理范围。\n\n\n缺点\n碰撞域增大了，但总的吞吐量并未提高。\n如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。\n\n\n\n\n\n\n\n在数据链路层扩展以太网\n在数据链路层扩展局域网是使用网桥。\n网桥工作在数据链路层，它根据 MAC 帧的目的地址对收到的帧进行转发。网桥具有过滤帧的功能。当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的 MAC 地址，然后再确定将该帧转发到哪一个接口。\n优点\n过滤通信量。\n扩大了物理范围。\n提高了可靠性。\n可互连不同物理层、不同 MAC 子层和不同速率（如10 Mb/s 和 100 Mb/s 以太网）的局域网。\n\n\n缺点\n存储转发增加了时延。\n在MAC 子层并没有流量控制功能。\n具有不同 MAC 子层的网段桥接在一起时时延更大。\n网桥只适合于用户数不太多(不超过几百个)和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴。  \n\n\n\n\n交换机\n交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。\n下图中，交换机有 4 个接口，主机 A 向主机 B 发送数据帧时，交换机把主机 A 到接口 1 的映射写入交换表中。为了发送数据帧到 B，先查交换表，此时没有主机 B 的表项，那么主机 A 就发送广播帧，主机 C 和主机 D 会丢弃该帧，主机 B 回应该帧向主机 A 发送数据包时，交换机查找交换表得到主机 A 映射的接口为 1，就发送数据帧到接口 1，同时交换机添加主机 B 到接口 2 的映射。\n\n\n\n\n\n\n\n虚拟局域网\n虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。\n例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。\n使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。\n\n高速以太网100BASE-T 以太网\n速率达到或超过 100 Mb/s 的以太网称为高速以太网\n可在全双工方式下工作而无冲突发生。因此，不使用 CSMA/CD 协议。\n\n吉比特以太网\n允许在 1 Gb/s 下全双工和半双工两种方式工作。\n在半双工方式下使用 CSMA/CD 协议（全双工方式不需要使用 CSMA/CD 协议）。\n\n10 吉比特以太网\n10 吉比特以太网只工作在全双工方式\n也不使用 CSMA/CD 协议。\n\n使用高速以太网进行宽带接入\n以太网接入的重要特点是它可提供双向的宽带通信，并且可根据用户对带宽的需求灵活地进行带宽升级。\n采用以太网接入可实现端到端的以太网传输，中间不需要再进行帧格式的转换。这就提高了数据的传输效率和降低了传输的成本。  \n\n其他类型的高速局域网接口集线器在转发帧时，不对传输媒体进行检测网桥在转发帧之前必须执行 CSMA/CD 算法。\n\n","slug":"计算机网络-数据链路层","date":"2022-01-17T10:56:41.923Z","categories_index":"计算机网络","tags_index":"计算机网络","author_index":"天琦"},{"id":"c8548f750699af670c4582ee449af8ba","title":"计算机网络-应用层","content":"第 6 章  应用层域名系统 DNS域名系统概述\nDNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。\n\n因特网的域名结构\n域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名。\n\n域名服务器\n一个服务器所负责管辖的（或有权限的）范围叫做区(zone)。\n每一个区设置相应的权限域名服务器，用来保存该区中的所有主机的域名到IP地址的映射。\n\nDNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：\n如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。\n区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。\n\n\n\n文件传送协议FTP 概述\n文件传送协议 FTP (File Transfer Protocol) 是因特网上使用得最广泛的文件传送协议。\nFTP 提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限。\nFTP 屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。\n\nFTP 的基本工作原理\nFTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：\n控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。\n数据连接：用来传送一个文件数据。\n\n\n根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：\n主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。\n被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。\n主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。\n\n\n\n简单文件传送协议 TFTP\nTFTP 是一个很小且易于实现的文件传送协议。\nTFTP 使用客户服务器方式和使用 UDP 数据报，因此 TFTP 需要有自己的差错改正措施。\nTFTP 只支持文件传输而不支持交互。\nTFTP 没有一个庞大的命令集，没有列目录的功能，也不能对用户进行身份鉴别。\nTFTP 的主要特点是\n(1) 每次传送的数据 PDU 中有 512 字节的数据，但最后一次可不足 512 字节。\n(2) 数据 PDU 也称为文件块(block)，每个块按序编号，从 1 开始。\n(3) 支持 ASCII 码或二进制传送。\n(4) 可对文件进行读或写。\n(5) 使用很简单的首部。\n\n\n\n远程终端协议 TELNET简述\nTELNET 是一个简单的远程终端协议，也是因特网的正式标准。\n用户用 TELNET 就可在其所在地通过 TCP 连接注册（即登录）到远地的另一个主机上（使用主机名或 IP 地址）。\nTELNET 能将用户的击键传到远地主机，同时也能将远地主机的输出通过 TCP 连接返回到用户屏幕。这种服务是透明的，因为用户感觉到好像键盘和显示器是直接连在远地主机上。\n\n万维网 WWW概述\n万维网 WWW (World Wide Web)并非某种特殊的计算机网络。\n万维网是一个大规模的、联机式的信息储藏所。\n万维网用链接的方法能非常方便地从因特网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。\n这种访问方式称为“链接”。\n万维网是分布式超媒体(hypermedia)系统，它是超文本(hypertext)系统的扩充。\n\n万维网的工作方式\n万维网以客户服务器方式工作。\n浏览器就是在用户计算机上的万维网客户程序。万维网文档所驻留的计算机则运行服务器程序，因此这个计算机也称为万维网服务器。\n\n万维网必须解决的问题\n(1) 怎样标志分布在整个因特网上的万维网文档？使用统一资源定位符 URL (Uniform Resource Locator)来标志万维网上的各种文档。使每一个文档在整个因特网的范围内具有唯一的标识符 URL。\n(2) 用何协议实现万维网上各种超链的链接？在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是超文本传送协议 HTTP (HyperText Transfer Protocol)。HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。\n(3) 怎样使各种万维网文档都能在因特网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链？超文本标记语言 HTML (HyperText Markup Language)使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到因特网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。\n(4) 怎样使用户能够很方便地找到所需的信息？为了在万维网上方便地查找信息，用户可使用各种的搜索工具（即搜索引擎）。\n\n统一资源定位符 URL\n统一资源定位符 URL 是对可以从因特网上得到的资源的位置和访问方法的一种简洁的表示。\nURL 的一般形式是：&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;\n\n超文本传送协议 HTTP\nHTTP 是面向事务的客户服务器协议。\nHTTP 1.0 协议是无状态的(stateless)。\nHTTP 协议本身也是无连接的，虽然它使用了面向连接的 TCP 向上提供的服务。\n\n万维网的文档\n超文本标记语言 HTML\n超文本标记语言 HTML 中的 Markup 的意思就是“设置标记”。\nHTML 定义了许多用于排版的命令（即标签）。\nHTML 把各种标签嵌入到万维网的页面中。这样就构成了所谓的 HTML 文档。HTML 文档是一种可以用任何文本编辑器创建的 ASCII 码文件。\n\n\n动态万维网文档\n静态文档是指该文档创作完毕后就存放在万维网服务器中，在被用户浏览的过程中，内容不会改变。\n动态文档是指文档的内容是在浏览器访问万维网服务器时才由应用程序动态创建。\n动态文档和静态文档之间的主要差别体现在服务器一端。这主要是文档内容的生成方法不同。而从浏览器的角度看，这两种文档并没有区别。  \n\n\n\n万维网的信息检索系统\n全文检索搜索\n全文检索搜索引擎是一种纯技术型的检索工具。它的工作原理是通过搜索软件到因特网上的各网站收集信息，找到一个网站后可以从这个网站再链接到另一个网站。然后按照一定的规则建立一个很大的在线数据库供用户查询。\n\n\n分类目录搜索\n分类目录搜索引擎并不采集网站的任何信息，而是利用各网站向搜索引擎提交的网站信息时填写的关键词和网站描述等信息，经过人工审核编辑后，如果认为符合网站登录的条件，则输入到分类目录的数据库中，供网上用户查询。\n\n\n\n电子邮件电子邮件概述\n电子邮件(e-mail)是因特网上使用得最多的和最受用户欢迎的一种应用。\n电子邮件把邮件发送到收件人使用的邮件服务器，并放在其中的收件人邮箱中，收件人可随时上网到自己使用的邮件服务器进行读取。\n电子邮件不仅使用方便，而且还具有传递迅速和费用低廉的优点。\n一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。\n\n电子邮件的最主要的组成构件简单邮件传送协议 SMTP\nSMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。\n\n电子邮件的信息格式\n一个电子邮件分为信封和内容两大部分。\nRFC 822 只规定了邮件内容中的首部(header)格式，而对邮件的主体(body)部分则让用户自由撰写。\n邮件内容的首部\n“To:”后面填入一个或多个收件人的电子邮件地址。用户只需打开地址簿，点击收件人名字，收件人的电子邮件地址就会自动地填入到合适的位置上。\n“Subject:”是邮件的主题。它反映了邮件的主要内容，便于用户查找邮件。\n抄送 “Cc:” 表示应给某某人发送一个邮件副本。\n“From” 和 “Date” 表示发信人的电子邮件地址和发信日期。“Reply-To” 是对方回信所用的地址。  \n\n\n\n\n\n邮件读取协议 POP3 和 IMAP\nPOP3\nPOP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。但最新版本的 POP3 可以不删除邮件。\n\n\nIMAP\nIMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。\n\n\n\n基于万维网的电子邮件\n例子\n电子邮件从 A 发送到网易邮件服务器是使用 HTTP 协议。\n两个邮件服务器之间的传送使用 SMTP。\n邮件从新浪邮件服务器传送到 B 是使用 HTTP 协议。\n概要: 示意图\n\n\n\n通用因特网邮件扩充 MIME\nMIME 概述\nMIME 并没有改动 SMTP 或取代它。\nMIME 的意图是继续使用目前的[RFC 822]格式，但增加了邮件主体的结构，并定义了传送非 ASCII 码的编码规则。\n\n\n\n动态主机配置协议 DHCPDHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址DHCP 工作过程如下\n1.客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。\n2.DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。\n3.如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。\n4.DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。\n\n简单网络管理协议 SNMP网络管理的基本概念\n网络管理包括对硬件、软件和人力的使用、综合与协调，以便对网络资源进行监视、测试、配置、分析、评价和控制，这样就能以合理的价格满足网络的一些需求，如实时运行性能，服务质量等。网络管理常简称为网管。\nSNMP 的网络管理由三个部分组成\nSNMP 本身\nSNMP 定义了管理站和代理之间所交换的分组格式。所交换的分组包含各代理中的对象（变量）名及其状态（值）。\n\n\n管理信息结构 SMI (Structure of Management Information)\nSMI 定义了命名对象和定义对象类型（包括范围和长度）的通用规则，以及把对象和对象的值进行编码的规则。\n\n\n管理信息库 MIB(Management Information Base)。\nMIB 在被管理的实体中创建了命名对象，并规定了其类型。\n\n\n\n\n\n管理信息结构 SMI\nSMI 的功能：\n(1) 被管对象应怎样命名；\n(2) 用来存储被管对象的数据类型有哪些种；\n(3) 在网络上传送的管理数据应如何编码。\n\n\n\n管理信息库 MIB\n被管对象必须维持可供管理程序读写的若干控制和状态信息。这些信息总称为管理信息库 MIB 。\n\nSNMP 的协议数据单元和报文\nSNMP的操作只有两种基本的管理功能，即：\n“读”操作，用 get 报文来检测各被管对象的状况；\n“写”操作，用 set 报文来改变各被管对象的状况。\n\n\nSNMP 的报文格式\n\n应用进程跨越网络的通信系统调用和应用编程接口几种常用的系统调用\n","slug":"计算机网络-应用层","date":"2022-01-17T10:56:41.917Z","categories_index":"计算机网络","tags_index":"计算机网络","author_index":"天琦"},{"id":"bc66a27acf81635197c599bbc78e3243","title":"计算机组成原理-第二章","content":"数据的类型\n\n按数制分：十进制：在微机中直接运算困难；\n\n二进制：占存储空间少，硬件上易于实现，易于运算；\n\n十六进制：方便观察和使用；\n\n按数据格式分：真值：没有经过编码的直观数据表示方式；带正负号的数据，任何数制均可；\n机器数：符号化后的数值表示；\n· 符号也被编码，不能随便忽略任何位置上的0或1 ；\n\n· 位数固定，一般为字节整倍数，如8位、16位、32位……；\n\n· 可用原码、反码、补码、移码等形式编码\n\n按数据的表示范围分：· 定点数\n\n小数点位置固定，数据表示范围小；\n\n· 浮点数\n\n小数点位置不固定，数据表示范围较大。\n\n按能否表示负数分：· 无符号数\n\n数据所有位均为表示数值，只能表示正数；\n\n· 有符号数\n\n有正负之分，最高位为符号位，其余位表示数值。\n\n\n数据格式-定点数小数点固定在某一位置的数据；\n\n纯小数\n\n纯整数\n\n注意: 小数点的位置是机器约定好的，没有实际保存。\n\n定点机的特点\n    所能表示额度数据范围小\n    数据精度较低\n    存储单元较小\n\n进制转换十进制--&gt;二进制\n    除二取余\n\n二进制--&gt;十进制\n    乘二取整\n\n机器数的表示真值：正、负号加某进制数绝对值的形式称为真值，即数的实际值。\n机器数：真值按某种编码方式进行编码后的数值。即真值在机器中的表示，称为机器数，一般分为无符号数和有符号数两种。\n原码表示法\n  定义：\n  定点小数：\n  定点整数：\n  \n  数值位不变，最高位为符号位，0为正；1为负。\n\n  零的表示方法不唯一，有正零和负零之分。\n\n  数据表示范围\n\n      定点小数:-1&lt;X&lt;1;\n      定点整数：-2^n&lt;X&lt;2^n;\n  \n  优点：\n\n      与真值对应关系简单；\n  \n  缺点：\n\n      参与运算复杂，需将数值位与符号位分开考虑。\n\n补码表示法\n5-2 = 5+10 （mod 12）\n-2=10（mod 12）\n\n模的概念运算结果超出实际的最大表示范围，就会发生溢出，此时所产生的溢出量就是模(module)\n\n可以把模定义为一个计量器的容量。如:一个4位的计数器，它的计数值为0~15.当计数器计满15之后再加1，这个计数器就发生溢出，其溢出量为16，也就是模等于16。\n  \n定点小数的溢出量为2，即模为2\n\n  在计算机中，机器所能表示的数据位数是固定的，其运算都是有模运算。\n  · 若n+1\n  补码的定义：\n  [x]补=X+M (mod M)\n  X&gt;0时 [x]补=X (mod M)\n  X&lt;0时，[x]补=X+M (mod M)\n\n  定点小数：(mod 2)\n  定点整数：(mod 2n+1 )\n  补码表示法的特点\n特殊数据的表示\n\n  0的编码是唯一的；\n  原码中用于表示-0的编码100...00,\n  补码中表示负的最小值。\n\n数据表示范围\n\n  定点小数：-1&lt;=X&lt;1;\n\n  由原码求补码\n由原码求补码的渐变原则(负数)\n  \n  · 除符号位以外，其余各位按位取反，末位加1；\n  · 除符号位以外，从最低位开始，遇到的第一个1以前的各位保持不变，之后各位取反。\n\n求相反数的补码\n\n  由[x]补求[-x]补\n\n  · 连同符号位的所有位一起取反，末位加1.\n\n  移码表示法\n移码通常用于表示浮点数的阶码。\n  · 用定点整数形式的移码。\n\n定义：\n      [x]移=2&lt;sup&gt;n&lt;/sup&gt;+x \n\n  [x]移 与[x]补的区别：符号位相反\n\n  移码的特点\n· 在移码中，最高位为0表示负数，最高位为1表示整数，这与原码、补码、反码的符号位取值正好是相反的\n· 移码为全0时所对应的真值最小，为全1时所对应的真值最小。因此，姨妈的大小直观的反应了真挚的大小，这将有助于两个浮点数进行阶码大小比较。\n· 真值0在移码中的表示形式是唯一的\n· 移码把真值映射到一个正数域。\n\n","slug":"计算机组成原理-第二章","date":"2022-01-17T10:56:41.910Z","categories_index":"计算机组成原理","tags_index":"计算机组成原理","author_index":"天琦"},{"id":"8e1f7beebe75d1d20edcf7f0a6ab26b1","title":"计算机组成原理-第一讲","content":"\n\n考核要求期末考试成绩60%\n卷面为100分，折合50%\n期中考试成绩20%\n卷面为100分，折合20%\n平时成绩20%\n5份实验报告不齐者，平时成绩一律为0！！\n评定参考依据\n  实验出勤和完成情况，实验报告书写情况；\n  作业完成情况，上课的出勤情况；\n  随堂的题目测试情况\n\n参考教材 唐朔飞《计算机组成原理》\n第1章-计算机系统概论计算机的分类1、数字计算机(处理数字量信息、按位运算，不连续地跳动计算)\n\n2、专用计算机(针对某一任务设计的最有效、最经济和在最快速的计算机，但适应性很差)\n\n3、通用计算机(适应性强，但是牺牲了效率、速度和经济性)\n    单片机\n    微型机\n    小型机\n    中型机\n    大型机\n\n4、超级计算机\n    (体积、功能、数据存储量、指令系统、价格由低到高)\n    (简易性由高到低)\n\n5、模拟计算机(处理模拟量信息，数值连续、运算过程连续)\n\n第一代计算机(1945年-1958年)\n图灵。\n采用电子管\n    ENIAC的特点:十进制表示、程序用插线开关实现\n    冯·诺伊曼，提出用二进制表达方式和存储程序控制计算机构想。\n    描述计算机模型EDVAC(Electronic Discrete VAriable Automatic Computer)\n\n第二代计算机(1958-1964)\n晶体管\n\n第三代计算机\n集成电路--&gt;微处理器\n\n第四代计算机\n摩尔定律: 每18个月，集成电路的性能将提高一倍，而其价格将降低一半(另一种表述方法:每过10年计算机系统性能将会增加100倍，通讯带宽也会提高100倍，而其花费的资金不会增加)\nIntel cpu的发展史是从Intel 4004起步的(DIP封装)Intel 80286是Intel最后一块16位CPU(PGA封装)Intel 80386是Intel第一代32位CPU(PGA封装)\n计算机的性能指标  1、吞吐量\n表征一台计算机在某一时间间隔内能够处理的信息量\n\n  2、响应时间\n从输入有效到系统产生响应之间的时间度量，用时间单位来表示\n\n  3、利用率\n在给定的时间间隔内，系统被实际使用的时间所占的比率，用百分比表示\n\n  4、处理字节长(机器字长)\n处理及运算器中一次能够完成二进制运算的位数，如32位、64位\n    机器字长与系统数据总线宽度具有一定的相关性。\n\n  5、总线宽度\n一般指运算器与存储器之间的数据总线宽度。\n\n  6、主存储器容量\n主存储器所能存储二进制数据的位数(主存储器中所有存储元的总数目，而非存储单元)\n    \n通常用KB、MB、GB、TB来表示。K=2的10次方，M=2的20次方，G=2的30次方，T=2的40次方，B=8位(一个字节)\n存储器容量越大，记忆的二进制数越多。\n存储容量越大，能存储的信息就越多。\n    1K=1024B,1MB=1024KB，1GB=1024MB，1TB=1024GB\n\n  7、主存储器带宽\n单位时间内从主存储器读出的二进制信息量，一般用字节数/秒表示\n\n  8、主频/时钟周期\nCPU的工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率(f)叫CPU的主频。度量单位是MHz、GHz(和时间相关时1M=10^3K、1G=10^3K)\n    主频的倒数称为cpu的时钟周期(T)，即T=1/f，度量单位是微秒、纳秒。\n\n  9、CPU执行时间(CPU执行一般程序所占用的cpu时间)\ncpu执行时间=程序的总时钟周期数*cpu时钟周期\n\n  10、CPI(Cycle Per Indtruvtion)\n   执行一条指令所需的平均时钟周期数\n平均cpi=某程序总的cpu时钟周期数/该程序包含的指令条数\n\n  11、MPIS(Million Instruction executrd Per Second)\n  每秒百万指令数，即单位时间内执行的指令数；\nMIPS=指令数/程序执行时间\n\n  12、FLOPS(Floating-point Operatuins Per Second)\n  每秒百万次(10^6)浮点操作数，衡量机器浮点操作的性能。\n  13、其他的性能指标\n主存储器的读写速度\n    IO的数据传送率\n    带宽的均衡性\n    ...\n\n计算机系统计算机硬件(Hardware)    是指构成计算机的所有实体部件的集合，通常这些部件由电路(电子元件)、机械等物理部件组成。\n    指可触摸得到的物理设备实体。\n\n主机  主存，I/O接口\n        CPU，系统总线\n            运算器\n            控制器\n            内部寄存器组\n\n外设  辅存\n        I/O设备\n\n计算机软件系统软件\n        操作系统\n        语言处理程序\n        诊断程序\n        各种标准程序库\n应用软件\n\n现代计算机的特点  将运算器、控制器和片内高速缓存，统称为cpu；而将cpu、主存储器、输入/输出接口和系统总线统称为主机；    其余的设备均为外设。\n  主机内包含主存储器，即内存。硬盘、光盘等辅助存储器属于I/O设备    以存储器为中心，减轻cpu的数据传送负担，提高系统的整体性能。\n运算器功能    处理所有的算数及逻辑运算。通常称为ALU(算数逻辑单元)\n\n特点    采用二进制数据进行运算；\n    运算器一次可以处理的数据位数称为机器字长；\n    机器字长一般为8、16、32、64位，机器字长直接决定着运算的精度和能力；\n\n存储器功能    保存所有的程序和数据\n\n特点    以二进制形式保存程序和数据\n    存储器是按存储单元组织的，读写存储单元必须给出单元地址；\n\n  存储元：用于保存一位0/1二进制数据的物理器件；\n  存储单元：能够保存一个字数据的器件，由若干个存储元构成；\n  单元地址：能区分每一个存储单元的编号，一般从0开始编号；\n  存储容量：一个存储器所能保存的二进制。\n信息的总量。分类  外存(辅助存储器)\n        磁盘存储器、光盘存储器\n        cpu不可直接访问\n\n   内存(主存储器)\n        半导体存储器\n        cpu直接访问，存放当前系统运行所需的所有的程序和数据\n\n两个与贮存相关的寄存器\n    MAR(存储器地址寄存器)：接收由cpu送来的地址信息\n    MDR(存储器数据寄存器)：作为外界与存储器之间的数据通路\n\n控制器功能根据索要执行指令的功能，按顺序发出各种控制命令，协调计算机各个部件的工作。\n\n主要任务解释并执行指令\n    控制指令的执行顺序；\n    负责指令执行过程中。操作数的寻址；\n    根据指令的执行，协调相关部件的工作\n        如：运算类指令执行时对标志寄存器的影响设置\n\n指令的形式    操作码：指出指令所进行的操作，如加、减、数据传送等；\n    地址码：支出进行以上操作的数据存放位置。\n\n控制器工作的周期    取指周期：取指令的一段时间\n    执行周期：执行指令的一段时间\n\n指令按顺序执行的控制部件：指令计数器    每取出一条指令，指令计数器就加1\n    遇到转移类指令，控制器根据所执行指令设置指令计数器的值\n\n数据字：该字代表要处理的数据\n指令字：该字为一条指令；\n指令流：取指周期中，从内存读出的信息流\n数据流：执行周期中，从内存读出的信息流\n适配器与输入输出设备输入设备    将人们熟悉的某种信息形式变换为机器内部所能接收和识别的二进制信息形式的而设备\n\n输出设备    把计算机的处理结果变成人或其他机器设备所能接收和识别的信息形式的设备\n\n适配器    保证外围设备用计算机系统特性要求的形式发送或接收信息\n\n系统总线    构成计算机系统的骨架，是多个系统部件之间进行数据传送的公共通路。\n\n第2章-运算器第3章-存储系统    高速缓存\n    主存储器\n\n第4、5章-控制器第6章-总线第7章-外设    外存设备\n    输入设备\n    输出设备\n\n第8章-输入输出接口​    \n​    \n","slug":"计算机组成原理-第一讲","date":"2022-01-17T10:56:41.905Z","categories_index":"计算机组成原理","tags_index":"计算机组成原理","author_index":"天琦"},{"id":"9ac10ec9c70f0945e2923867a095c3ac","title":"计算机组成原理-浮点数","content":"\n\n浮点数：小数点位置可变，形如科学计数法中的数据表示浮点数格式定义N=Re*MM:尾数，是一个纯小数，表示数据的全部有效数位，其位数决定着数值的精度R:基数，可以取2、8、10、16，表示当前的数制；        微机中，一般默认为2，隐含表示e:阶码，是一个整数，用于支出小数点在该数中的位置，其位数决定着数据的取值范围\n机器数的一般表示形式\n阶符--阶码--数符--尾数\n四个元素的顺序可以变化。\n\n浮点数规格化\n  规格化的目的\n  保证浮点数表示的唯一性\n  保留更多地有效数字，提高运算地精度\n\n  规格化要求：\n  |尾数|&gt;=0.5\n    尾数原码表示：最高数值位为1，整数0.1...,负数1.1....;\n    尾数补码表示：最高数值位和符号位相反，正数0.1..，负数1.0...\n\n  规格化处理\n  尾数向左移n位(小数点右移)，同时阶码减n；--左规\n\n  尾数向右移n位(小数点左移)，同时阶码加n；--右规\n\n","slug":"计算机组成原理-浮点数","date":"2022-01-17T10:56:41.899Z","categories_index":"计算机组成原理","tags_index":"计算机组成原理","author_index":"天琦"},{"id":"1b5a1b151f5f6c9cafa34c99fdd17e6f","title":"蓝桥杯-95.费解的开关2021/03/10","content":"题目：95.费解的开关题目介绍你玩过“拉灯”游戏吗？\n25 盏灯排成一个 5×5 的方形。\n每一个灯都有一个开关，游戏者可以改变它的状态。\n每一步，游戏者可以改变某一个灯的状态。\n游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。\n我们用数字 1 表示一盏开着的灯，用数字 0 表示关着的灯。\n下面这种状态：\n10111\n01101\n10111\n10000\n11011\n\n在改变了最左上角的灯的状态后将变成：\n01111\n11101\n10111\n10000\n11011\n\n再改变它正中间的灯后状态将变成：\n01111\n11001\n11001\n10100\n11011\n\n给定一些游戏的初始状态，编写程序判断游戏者是否可能在 6 步以内使所有的灯都变亮。\n输入格式第一行输入正整数 n，代表数据中共有 n 个待解决的游戏初始状态。\n以下若干行数据分为 n 组，每组数据有 5 行，每行 5 个字符。\n每组数据描述了一个游戏的初始状态。\n各组数据间用一个空行分隔。\n输出格式一共输出 n 行数据，每行有一个小于等于 6 的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。\n对于某一个游戏初始状态，若 6 步以内无法使所有灯变亮，则输出 −1。\n数据范围\n0&lt;n≤500\n输入样例\n3\n00111\n01011\n10001\n11010\n11100\n\n11101\n11101\n11110\n11111\n11111\n\n01111\n11111\n11111\n11111\n11111\n\n输出样例\n3\n2\n-1\n\n解题思路一旦第一行开关确定，，那么第一行为0的开关只能由第二行的开关调整为1。第一行由第二行确定，第二行由第三行确定…\n第i行由第i-1行确定。\n题解（代码）import java.util.*;\n\npublic class Main&#123;\n    \n    static final int INF &#x3D; 1000000;\n    static char[][] g &#x3D; new char[10][10];\n    static int[] dx &#x3D; &#123; 0, -1, 0, 1, 0 &#125;;\n    static int[] dy &#x3D; &#123; 0, 0, 1, 0, -1 &#125;;\n    \n    &#x2F;&#x2F;枚举，以(x,y)为中心的五个数\n    private static void turn(int x, int y)&#123;\n        for(int i &#x3D; 0; i&lt;5 ; i++)&#123;\n            int a &#x3D; x + dx[i], b &#x3D; y+dy[i];\n            if(a &gt;&#x3D; 0 &amp;&amp; a &lt; 5 &amp;&amp; b &gt;&#x3D; 0 &amp;&amp; b &lt; 5)\n            &#123;\n                g[a][b]^&#x3D;1;&#x2F;&#x2F;异或\n            &#125;\n        &#125;\n    &#125;\n    \n    private static int work()&#123;\n        int ans &#x3D; INF;\n\n        &#x2F;&#x2F;1&lt;&lt;5;二进制1左移五位；00000001&lt;&lt;5&#x3D;&#x3D;&#x3D;》00100000 &#x3D;&#x3D;&#x3D;》十进制32 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 每行5位 每位有0&#x2F;1两种状态 对应10进制的0~31\n        &#x2F;&#x2F; 这里我们枚举了第一行的32种按法，不用管是亮是灭，把第一行所有情况都按一遍\n        &#x2F;&#x2F; 按每种情况的第一行，去遍历接下来的行\n        &#x2F;&#x2F; 枚举32种第一行的按法只是可能会减少步数，如果直接从第二行开始答案一定是固定的了，找不到最优解或者可能没有解\n        &#x2F;&#x2F; 因为第一行是可以按的，我们的目的是先确定第一行，所以先枚举第一行的32种情况，\n        for(int k &#x3D; 0; k &lt; 1 &lt;&lt; 5; k++) &#x2F;&#x2F;枚举第一行的所有情况，_ _ _ _ _ 第一行五个位置，用五个二进制表示，如果有位置有1，说明该位置需要按开关，遍历第一行所有情况即可得到最优解\n        &#123;\n            int res &#x3D; 0;\n            &#x2F;&#x2F; 保护源数组\n            char backup[][] &#x3D; new char[10][10];\n            for(int i &#x3D; 0; i &lt; g.length; i++)&#123;\n                for(int j &#x3D; 0; j &lt; g[i].length; j++)&#123;\n                    backup[i][j] &#x3D; g[i][j];\n                &#125;\n            &#125;\n            &#x2F;&#x2F; memcpy(backup,g,sizeof g);\n            \n            \n            for(int j &#x3D; 0; j &lt; 5; j ++)\n            &#123;\n                &#x2F;&#x2F;第一行枚举的k的第j位如果是1，是指第一行的这一位应该被切换状态(开灯或关灯)，而和其初始状态无关\n                if( (k&gt;&gt;j&amp;1) &#x3D;&#x3D; 1 )&#x2F;&#x2F; 如果k的第j位为1（从低位开始的位数）表示需要按开关\n                &#123;\n                    res ++;\n                    turn(0,j);&#x2F;&#x2F;调整第0行的第j个开关\n                &#125;\n            &#125;\n\n            &#x2F;&#x2F;递推\n            for(int i &#x3D; 0; i&lt;4; i++)\n            &#x2F;&#x2F;i&lt;4 是因为枚举第i行时要把第i+1行的灯都按掉，所以只能枚举到倒数第二行，不能枚举最后一行\n                for(int j &#x3D; 0; j &lt; 5; j++)\n                    if(g[i][j] &#x3D;&#x3D; &#39;0&#39;)\n                    &#123;\n                        res++;\n                        turn(i+1,j);\n                    &#125;\n            \n            boolean is_successful &#x3D; true;\n            for(int j &#x3D; 0; j &lt; 5; j ++)\n                if(g[4][j] &#x3D;&#x3D; &#39;0&#39;)\n                &#123;\n                    is_successful &#x3D; false;\n                    break;\n                &#125;\n            \n            if(is_successful) ans &#x3D; Math.min(ans , res);\n            &#x2F;&#x2F;g数组恢复原状\n            &#x2F;&#x2F;memcpy(g,backup,sizeof g);\n            for(int i &#x3D; 0; i &lt; g.length; i++)&#123;\n                for(int j &#x3D; 0; j &lt; g[i].length; j++)&#123;\n                     g[i][j] &#x3D; backup[i][j];\n                &#125;\n            &#125;\n        &#125;\n        if(ans &gt; 6) ans &#x3D;  -1;\n        return ans;\n    &#125;\n    \n    public static void main(String args[])&#123;\n        Scanner in &#x3D; new Scanner(System.in);\n        int T; \n        T &#x3D; in.nextInt();\n        while(T-- !&#x3D; 0)\n        &#123;\n            for(int i &#x3D; 0; i &lt; 5; i++) \n                    g[i] &#x3D; in.next().toCharArray();\n            System.out.println(work());\n        &#125;\n    &#125;\n&#125;\n\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nconst int INF &#x3D; 1000000;\n\nchar g[10][10];\nint dx[5] &#x3D; &#123;0, -1, 0, 1, 0&#125;, dy[5] &#x3D; &#123;0, 0, 1, 0, -1&#125;;\n&#x2F;&#x2F;向量：dx[5] &#x3D;&#123; 中间，上，右，下，左&#125;； dy[5] &#x3D; &#123;中间，上，右，下，左 &#125;\nvoid turn(int x, int y)\n&#123;\n    &#x2F;&#x2F;枚举，以(x,y)为中心的五个数\n    for(int i &#x3D; 0; i&lt;5 ; i++)\n    &#123;\n        &#x2F;&#x2F;求以(x,y)为中心的五个数的坐标\n        int a &#x3D; x + dx[i], b &#x3D; y+dy[i];\n        \n        if(a &gt;&#x3D; 0 &amp;&amp; a &lt; 5 &amp;&amp; b &gt;&#x3D; 0 &amp;&amp; b &lt; 5)&#x2F;&#x2F;如果在范围内\n        &#123;\n            &#x2F;&#x2F;把g[a][b]上的数改变，0--&gt;1 或者 1--&gt;0\n            &#x2F;&#x2F; g[a][b] &#x3D; &#39;0&#39; +(&#39;1&#39; - g[a][b]);\n            g[a][b]^&#x3D;1;&#x2F;&#x2F;异或\n            \n        &#125;\n    &#125;\n&#125;\n\nint work()\n&#123;\n    int ans &#x3D; INF;\n    for(int k &#x3D; 0; k &lt; 1 &lt;&lt; 5; k++) &#x2F;&#x2F;用二进制数的每一位数表示每一个开关的状态\n    &#123;\n        int res &#x3D; 0;\n        char backup[10][10];\n        memcpy(backup,g,sizeof g);\n\n        &#x2F;&#x2F;确定第一行开关的状态，结束之后就不再看第一行了\n        for(int j &#x3D; 0; j &lt; 5; j ++)\n        &#123;\n            if( k&gt;&gt;j&amp;1)&#x2F;&#x2F; 如果k的第j位为1（从低位开始的位数）\n            &#123;\n                res ++;&#x2F;&#x2F;每调整一次开关，当前方案的操作数加一\n                turn(0,j);&#x2F;&#x2F;调整开关\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F;递推前n-1行\n        for(int i &#x3D; 0; i&lt;4; i++)\n        &#x2F;&#x2F;i&lt;4 是因为枚举第i行时要把第i+1行的灯都按掉，所以只能枚举到倒数第二行，不能枚举最后一行\n        &#x2F;&#x2F;从第一行开始，如果第一行有‘0’，则把这个‘0’下面的开关按一下。\n            for(int j &#x3D; 0; j &lt; 5; j++)\n                if(g[i][j] &#x3D;&#x3D; &#39;0&#39;)\n                &#123;\n                    res++;&#x2F;&#x2F;操作数加一\n                    turn(i+1,j);&#x2F;&#x2F;操作之后，当前位置从‘0’变为‘1’；\n                &#125;\n        \n        &#x2F;&#x2F;枚举完前四行之后，判断最后一行是否全为‘1’\n        bool is_successful &#x3D; true;\n        for(int j &#x3D; 0; j &lt; 5; j ++)\n            if(g[4][j] &#x3D;&#x3D; &#39;0&#39;)&#x2F;&#x2F;如果最后一行某一位是‘0’，则无法完成。\n            &#123;\n                is_successful &#x3D; false;\n                break;\n            &#125;\n        \n        if(is_successful) ans &#x3D; min(ans , res); \n        &#x2F;&#x2F;g数组恢复原状\n        memcpy(g,backup,sizeof g); &#x2F;&#x2F;把g数组恢复原状，重新枚举下一个状况\n    &#125;\n    if(ans &gt; 6) ans &#x3D;  -1;\n    return ans;\n&#125;\n\nint main()\n&#123;\n    int T; \n    cin&gt;&gt;T;\n    while(T--)\n    &#123;\n        for(int i &#x3D; 0; i &lt; 5; i++) cin&gt;&gt;g[i];\n        cout&lt;&lt;work()&lt;&lt;endl;\n    &#125;\n&#125;\n","slug":"蓝桥杯-95-费解的开关详解","date":"2022-01-17T10:56:41.894Z","categories_index":"数据结构与算法","tags_index":"蓝桥杯,递归与递推","author_index":"天琦"},{"id":"82472039c82658fae3f1ced7e41fd7b3","title":"算法-递归详解","content":"\n\n\n递归从入门到精通递归入门编写一个递归函数\n这个递归函数的功能是什么，怎样调用这个函数，即设计好递归函数的返回值和参数列表\n什么时候应该结束这个递归，它的边界条件（出口）是什么  （边界条件）\n在非边界情况时，怎样从第n层转变成第n+1层  (递推公式)\n\n计算阶乘(factorial)$$n!=\\begin{cases}1 &amp; n=0 \\n*(n-1)! &amp; n&gt;0\\end{cases}$$\n#include &lt;stdio.h>\n\nint fact(int n)&#123;\n    if (n == 0) return 1;\n    return n * fact(n - 1);\n&#125;\n\nint main()&#123;\n    int ans = fact(10); //调用（递归）函数\n    printf(\"%d\\n\", ans);\n    return 0;\n&#125;\n\n\n计算斐波那契数列Fibonacci sequence：0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ……$$f(n)=\\begin{cases}0 &amp; n=0 \\1 &amp; n=1 \\f(n-2)+f(n-1) &amp; n&gt;1\\end{cases}$$\n#include &lt;stdio.h>\n\nint fib(int n) &#123;\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return fib(n - 2) + fib(n - 1);\n&#125;\n\nint main() &#123;\n    for (int i = 0; i &lt; 10; i++) &#123;\n        printf(\"%d \", fib(i));\n    &#125;\n    printf(\"\\n\");\n    return 0;\n&#125;\n\n\n计算最大公约数(辗转相除法)gcd(12, 32) &#x3D; 4\n\ngcd(a,   b)\ngcd(32,  12)\ngcd(12,  8)\ngcd(8,   4)\ngcd(4,   0)\n\n$$gcd(a,b)=\\begin{cases}a &amp; b=0 \\gcd(b,a % b) &amp; b\\neq 0\\end{cases}$$\nint gcd(int a, int b)&#123;\n    if (b == 0) return a;\n    return gcd(b, a % b);\n&#125;\n\nint ans = gcd(12, 32);\n\n分治算法分治法的设计思想：\n\n分–将问题分解为规模更小的子问题；\n治–将这些规模更小的子问题逐个击破；\n合–将已解决的子问题合并，最终得出“母”问题的解；\n\n\n减而治之（每次让问题的规模减1）\n分而治之（每次让问题的规模减半）（归并排序的思想）\n\n例题：走楼梯题目描述：\n一个台阶总共有n级，如果一次可以跳1级，也可以跳2级。求总共有多少总跳法。\n第一行输入T，表示有多少个测试数据。接下来T行，每行输入一个数n，表示台阶的阶数。\n输出时每一行对应一个输出。\n\n样例输入：\n3\n5\n8\n10\n\n样例输出：\n8\n34\n89\n\n解析：\n$$f(n)=\\begin{cases}1 &amp; n=1 \\2 &amp; n=2 \\f(n-1)+f(n-2) &amp; n&gt;2\\end{cases}$$\n参考代码：\n#include &lt;stdio.h>\n\nint solve(int n) &#123;\n\tif (n == 1) return 1;\n\tif (n == 2) return 2;\n\treturn solve(n - 1) + solve(n - 2);\n&#125;\n\nint main() &#123;\n\tint T;\n\tscanf(\"%d\", &amp;T);\n\twhile (T--) &#123;\n\t\tint n;\n\t\tscanf(\"%d\", &amp;n);\n\t\tint ans = solve(n);\n\t\tprintf(\"%d\\n\", ans);\n\t&#125;\n\treturn 0;\n&#125;\n\n\n\n归并排序\nvoid mergeSort(int A[], int lo, int hi) &#123;\n\tif (lo >= hi) return;\n\tint mid = lo + (hi - lo) / 2;\n\tmergeSort(A, lo, mid);\t//左半区间[lo, mid] 排好序\n\tmergeSort(A, mid + 1, hi);\t//右半区间[mid + 1, hi] 排好序\n\tmergeArray(A, lo, mid, hi);\t//进行合并\n&#125;\n\n\n#include &lt;iostream>\nusing namespace std;\n\nvoid mergeArray(int A[], int lo, int mid, int hi) &#123;\n\tint* temp = new int[hi - lo + 1];\n\tint i = lo, j = mid + 1;\n\tint k = 0;\n\n\twhile (i &lt;= mid &amp;&amp; j &lt;= hi) &#123;\n\t\tif (A[i] &lt;= A[j]) temp[k++] = A[i++];\n\t\telse temp[k++] = A[j++];\n\t&#125;\n\twhile (i &lt;= mid) temp[k++] = A[i++];\n\twhile (j &lt;= hi) temp[k++] = A[j++];\n\n\tfor (int i = lo, k = 0; i &lt;= hi; i++, k++) &#123;\n\t\tA[i] = temp[k];\n\t&#125;\n\tdelete[] temp;\n&#125;\n\nvoid mergeSort(int A[], int lo, int hi) &#123;\n\tif (lo >= hi) return;\n\tint mid = lo + (hi - lo) / 2;\n\tmergeSort(A, lo, mid);\t//左半区间[lo, mid] 排好序\n\tmergeSort(A, mid + 1, hi);\t//右半区间[mid + 1, hi] 排好序\n\tmergeArray(A, lo, mid, hi);\t//进行合并\n&#125;\n\nint main() &#123;\n\tint A[] = &#123; 6, 1, 2, 9, 7, 3 &#125;;\n\tint N = sizeof(A) / sizeof(int);\n\n\tmergeSort(A, 0, N - 1);\n\tfor (int x : A) &#123;\n\t\tcout &lt;&lt; x &lt;&lt; \" \";\n\t&#125;\n\tcout &lt;&lt; endl;\n\treturn 0;\n&#125;   \n\n\n\n","slug":"算法-递归详解","date":"2022-01-17T10:56:41.888Z","categories_index":"算法","tags_index":"算法","author_index":"天琦"},{"id":"57e1324765d5f8241090ef5d7b0d2caa","title":"空中交通管理","content":"进度计划\n第一周 第一章-绪论\n第二周 第二章-管理机构及职能\n第三周 第三章-航空器和飞行高度层\n第四周 第四章-机场、机场的组织与管理\n第五周 第五章-空域、空域的概述和分类、管理、使用\n第六周 第六章空中交通服务通信、航空固定通信设施\n第七周 春季校运会放假\n第八周 第六章-空中交通服务通信、航空固定通信设施、民航电报管理规定\n第九周 第七章-目视飞行规则和仪表飞行规则\n第十周 第八章-空中交通流量管理、对流量管理的机构和职能、流量管理的方法及规定\n第十一周 第九章-情报和告警服务、情报服务、告警服务的范围和准备工作程序\n第十二周 五一假期\n第十三周 第十章-飞行的组织和实施、航空器放行、专机的组织与保障\n第十四周 第十一章-飞行和管制安全标准\n第十五周 第十二章-机场管制\n第十六周 第十三章-程序管制、第十四章-雷达管制\n第十七周 第十五章-军航飞行管制、第十六章-事故调查\n第十八周 复习考试\n第十九周 复习考试\n成绩构成(100分)平时成绩30%\n期末成绩70%\n\n第一章-绪论概念  空中交通管制\n对航空器的空中活动进行管理和控制的业务。任务是防止航空器彼此相撞，防止航空器与机场及其附近地区的障碍物相撞，促使空中交通畅通而有秩序，从而保证飞行安全和提高飞行效率。\n\n空中交通管理(Air Traffic Management,简称ATM)\n任务是：有效地维护和促进空中安全，维护空中交通秩序，保障空中交通流畅。\n包括空中交通服务、空中交通流量管理和空域管理三大部分。\n\n空中交通服务(Air Traffic service，简称ATS)\n是指对航空器的空中活动进行管理和控制的业务，是空中交通管制服务、飞行情报服务和告警服务的总称。空中交通管制员向航空器提供空中交通服务。\n\n空中交通管制服务(Air Traffic Control service,ATC)\n任务是防止航空器与航空器相撞，防止航空器与障碍物相撞；维护和加速空中交通有秩序地流动。\n\n空中交通管制服务是ATS的主要工作，包含区域管制、进近管制、塔台管制和空中交通报告服务四部分。\n\n飞行情报服务(Flight Information service,FIS)\n任务是像飞行中的航空器提供有益于安全、能有效地实施飞行的建议和情报服务。\n\n告警服务(Alert Service,AS)\n向有关组织付出需要搜寻、援救航空器的通知，并根据需要协助该组织或协调该项工作的进行。\n\n空域管理(Airspace Management)\n任务是依据国家有关政策，逐步改善空域环境，优化空域结构，尽可能满足空域用户使用空域的要求。\n\n中国第一座塔台: 巴里江机场塔台\n第二章民航管理机构和管制单位管理机构    中国民航管理采用三级机构管理模式：\n\n            中国民用航空局、地区管理局、省市安全监督管理局。\n\n    总局下设七个地区管理局：\n            华北管理局、东北管理局、西北管理局、华东管理局、中南管理局、西南管理局、新疆管理局。\n    \n    每个地区管理局下面按照省、市和自治区范围又分别设有若干个省(区、市)安全监督管理办公室(简称位安监办)。\n\n民航局的职能    航空运输和通用航空市场监督。\n    拟定民航业价格、收费政策并监督。\n    组织科技项目开发与应用，推进信息化建设。\n    负责民航国际合作与外事工作。\n    管理民航地区行政机构、公安与空警队伍\n    承办其他国务院与交通运输部交办的其他事项。    \n\n空管局的职责    执行空管方针与制度。\n    拟定空管运行的管理制度、标准、程序。\n    实施民航的空域使用与空管发展使用规划。\n    组织协调全国航班时刻和空域容量等资源分配执行工作。\n    组织协调全国民航空管系统建设。\n    提供交通管制与保障。\n    研究开发新技术，推广使用。\n    领导地区空管局工作。\n\n管制员    空中交通管制员的执照分为机场管制、进近管制、区域管制、进近雷达管制、精密进近雷达管制、区域雷达管制、飞行服务和运行监控等8类别。\n\n","slug":"空中交通管理","date":"2022-01-17T10:56:41.882Z","categories_index":"","tags_index":"航空管理","author_index":"天琦"},{"id":"7bf39dc8b36d692ca5cc6dcb2f7992e5","title":"汇编语言_程序","content":"程序一个源程序从写出到执行的过程\n编写\n编译连接\n使用汇编语言编译程序（MASM.EXE）对源程序文件中的源程序进行编译，产生目标文件(.obj)\n再用连接程序（LINK.EXE）对目标文件进行连接，生成可在操作系统中直接运行的可执行文件(.exe)。\n\n\n执行（可执行文件）\n程序（从原程序中的汇编指令翻译过来的机器码）和数据（源程序中定义的数据）。\n相关的描述信息（如：程序有多大、要占多少内存空间等）\n\n\n\n源程序\n汇编指令\n伪指令\n没有对应的机器码的指令，最终不被CPU所执行\n伪指令由编译器来执行的指令，编译器根据伪指令来进行相关的编译工作。\nsegment和ends是一对成对使用的伪指令，这是在写可被编译器编译的汇编程序时，必须要用到的一对伪指令。\nsegment和ends的功能是定义一个段，segment说明一个段的开始，ends说明一个段的结束。\n一个段必须有一个名称来标识，使用格式为：\n段名 segment\n段名 ends\n\n\n一个汇编程序由多个段组成，这些段被用来存放代码、数据或当作栈空间来使用。\n一个有意义的汇编程序中至少要有一个段，这个段用来存放代码。\n\n\nend是一个汇编程序的结束标记，编译器在编译汇编程序的过程中，如果碰倒了伪指令end，就结束对源程序的编译。\n程序写完必须要写end\n\n\nend是结束，ends是段的结束（end_segment）\nassume：含义为“假设”\n假设某一段寄存器和程序中的某一个用segment…ends定义的段相关联。\n通过assume说明这种关联，在需要的情况下，编译程序可以将段寄存器和某一个具体的段相联系。\n语句：assume CS:codesg –&gt; 假设CS（代码段）名称为codesg（code_segment）\n\n\n源程序中的程序\n汇编源程序：\n伪指令（编译器处理）\n汇编指令（编译为机器码）\n\n\n注意：\n我们可以将源程序文件中的所有内容称为源程序，将源程序中最终由计算机执行处理的指令或数据，称为程序。\n程序最先以汇编指令的形式存在源程序中，经编译、连接后转变为机器码。存储在可执行文件中。\n\n\n\n\n标号\n一个标号只带了一个地址。\ncodesg：放在segment的前面，作为一个段的名称，这个段的名称最终将被编译、连接程序处理为一个段的段地址。\n\n\n\n编译和连接\n连接的作用：\n当源程序很大时，可以将它分为多个源程序文件来编译，每个源程序编译成为目标文件后，再用连接程序将它们连接到一起，生成一个可执行文件。\n程序中调用了某个库文件中的子程序，需要将这个库文件和该程序生成的目标文件连接到一起，生成一个可执行文件；\n一个源程序编译后，得到了存有机器码的目标文件，目标文件中的有些内容还不能直接用来生成可执行文件，连接程序将这些内容处理为最终的可执行信息。所以，在只有一个源程序文件，而又不需要调用某个库中的子程序的情况下，也必须用连接程序对目标文件进行处理，生成可执行文件。\n对于连接的过程，可执行文件是我们要得到的最终结果。\n\n\n学习汇编的目的是通过汇编语言进行编程而深入地理解计算机底层的基本工作机理，达到可以随心所欲地控制计算机的目的。\n编辑器（edit）、编译器（masm）、连接器（link）、调试工具（debug）等所有工具，而这些工具都是在操作系统之上运行的程序，所以我们的学习过程必须建立在操作系统的环境中进行。\n\n可执行文件中的程序装入内存并运行的原理\n汇编程序从写出到执行的过程：\n编程(edit)–&gt;1.asm–&gt;编译(masm)–&gt;1.obj–&gt;连接(link)–&gt;1.exe–&gt;加载(command)–&gt;内存中的程序–&gt;运行(CPU)\n\n\n\n程序执行过程的跟踪\nDebug\nDebug可以将程序加载入内存，设置CS:IP指向程序的入口，但Debug并不放弃对CPU的控制，这样，我们就可以使用Debug的相关命令来单步执行程序，查看每条指令的执行结果。\n-r 可以查看各个寄存器的设置情况.\n-u 可以查看其他指令。\n-t 单步执行程序中的每一条指令，并观察每条指令的执行结果。\n到了int 21，我们要用-p命令执行：\nint 21执行后，显示“Program terminated normally”，返回到debug中。表示程序正常结束。\n\n\nDebug将程序从可执行文件加载入内存后，CX中存放的是和程序的长度。\nEXE文件中的程序的加载过程\n总结\n程序加载后，DS中存放着程序所在内存区的段地址，这个内存区的偏移地址为0，则程序所在的内存区的地址为：DS:0;\n这个内存区的前256个字节中存放的是PSP，DOS用来和程序进行通信。\n从256个字节处向后的空间存放的是程序。\n所以，我们从DS中可以得到PSP的段地址SA，PSP的偏移地址为0，则物理地址为SA×16+0\n因为PSP占256（100H）个字节，所以程序的物理地址是：\nSA×16+0+256=SA×16+16×16=（SA+16）×16+0\n可用段地址和偏移地址表示为:SA+10:0\n\n\n\n\n\n\n\n","slug":"汇编语言-程序","date":"2022-01-17T10:56:41.876Z","categories_index":"汇编语言","tags_index":"汇编语言","author_index":"天琦"},{"id":"c343f83bed72a2ec56171e72980851e4","title":"汇编语言_寄存器（内存访问）","content":"第3章 寄存器（内存访问）3.1 内存中字的存储\n任何两个地址连续的内存单元，N号单元和N+1号单元，可以将他们堪称两个内存单元，也可以看成一个地址为N的字单元中的高位字节单元和地位字节单元。\n高高低低原则：高位存放在高地址，低位存放在低地址。\n\n3.2 DS和[address]\nCPU要读取一个内存单元的时候，必须先给出这个内存单元的地址；\n在8086PC中，内存地址由段地址和偏移地址组成。\n8086CPU中有一个DS寄存器，通常用来存放要访问的数据的段地址。\n8086CPU不支持将数据直接送入段寄存器的操作，DS是一个段寄存器。\n数据–&gt;通用寄存器–&gt;段寄存器\n怎样将数据从寄存器送入内存单元?\nmov bx,1000H\nmov ds,bx\nmov [0],al\n\n\n\n3.3 字的传送\n因为8086CPU是16位结构，有16根数据线，所以可以一次性传送16位的数据，也就是一次性传送一个字。\n比如：\nmov bx,1000H\nmov ds,bx\nmov ax,[0] ;1000:0处的字型数据送入AX\nmov [0],cx ;CX中的16位数据送到1000:0处\n\n\n\n3.4 mov、add、sub指令\n已学过mov指令的几种形式\nmov 寄存器，数据\nmov ax,6\n\n\nmov 寄存器，寄存器\nmov bx,ax\n\n\nmov 寄存器，内存单元\nmov ax,[0]\n\n\nmov 内存单元，寄存器\nmov [0],ax\n\n\nmov 段寄存器，寄存器\nmov ds,ax\n\n\nmov 寄存器，段寄存器\nmov ax,ds\n\n\n\n\nadd指令  \nadd 寄存器，数据\nadd ax,6\n\n\nadd 寄存器，寄存器\nadd bx,ax\n\n\nadd 寄存器，内存单元\nadd ax,[0]\n\n\nadd 内存单元，寄存器\nadd [0],ax\n\n\n\n\nsub指令\nsub 寄存器，数据\nsub ax,6\n\n\nsub 寄存器，寄存器\nsub bx,ax\n\n\nsub 寄存器，内存单元\nsub ax,[0]\n\n\nsub 内存单元，寄存器\nsub [0],ax\n\n\n\n\n\n3.5 数据段\n对于8086PC机，可以根据需要将一组内存单元定义为一个段（可以是代码段、数据段等）\n可以将一组长度为N（N&lt;=64K）、地址连续、起始地址为16的倍数的内存单元当作专门存储数据的内存空间，从而定义了一个数据段。\n\n3.1~3.5 小结\n(1) 字在内存中存储时，要用两个地址连续的内存单元来存放，字的低位字节放在低地址单元中，高位字节存放在高地址单元中。\n(2) 用mov指令要访问内存单元，可以在mov指令中只给出单元的偏移地址，此时，段地址默认在DS寄存器中。\n(3) [address]表示一个偏移地址为address的内存单元。\n(4) 在内存和寄存器之间传送字型数据时，高地址单元和高8位寄存器、低地址单元和低8位寄存器相对应。\n(5) mov、add、sub是具有两个操作对象的指令。jmp是具有一个操作对象的指令\n(6) 可以根据自己的推测，在debug中实验指令的新格式。\n\n3.6 栈\n栈是一种具有特殊的访问方式的存储空间。它的特殊性就在于“后进先出”。\n栈有两个基本操作：入栈和出栈\n入栈：将一个新的元素放到栈顶。\n出栈：从栈顶取出一个元素。\n\n\n栈顶的元素总是最后入栈，需要出栈时，又最先被从栈中取出。\n栈的操作规则：LIFO（Last In First Out，后进先出）\n\n3.7 CPU提供的栈机制\n8086CPU中提供相关的指令来以栈的方式访问内存空间。这意味着，我们在基于8086CPU编程的时候可以将一段内存当作栈来使用。\n8086CPU提供入栈和出栈指令：（最基本的）\nPUSH（入栈）\nPOP（出栈）\npush ax: 将寄存器ax中的数据送入栈中；\npop ax：从栈顶取出数据送入ax。\n\n\n8086CPU的入栈和出栈操作都是以字为单位进行的。\n字型数据用两个单元存放，高地址单元放高8位，低地址单元放低8位。\n\n\nCPU如何知道一段内存空间被当作栈使用？\n寄存器CS和IP中存放着当前指令的段地址和偏移地址。\n8086CPU中有两个寄存器：\n段寄存器SS：存放栈顶的段地址\n寄存器SP：存放栈顶的偏移地址\n\n\n任意时刻，SS：SP指向栈顶元素\n\n\n执行push和pop的时候，如何知道哪个单元是栈顶单元？\npush ax\n（1）SP=SP-2;\n（2）将ax中的内容送入SS：SP指向的内存单元处，SS：SP此时指向新栈顶。\n\n\npop ax\n（1）将SS：SP指向的内存单元处的数据送入ax中;\n（2）SP=SP+2，SS：SP指向当前栈顶下面的单元，以当前栈顶下面的单元为新的栈顶。\n\n\n\n\n如果我们将10000H~1000FH这段空间当作栈，初始状态栈是空的，此时，SS=1000H，SP=？\n栈空，SS：SP指向栈空间最高地址单元的下一个单元（10010H），此时，SS=1000H，SP=10H\n\n\n\n3.8 栈顶超界问题\nSS和SP只记录了栈顶的地址，依靠SS和SP可以保证在入栈和出栈时找到栈顶。\n如何能够保证在入栈、出栈时，栈顶不会超出栈空间？\n当栈满的时候再使用push指令入栈，栈空的时候再使用pop指令出栈都将发生栈顶越界问题。\n栈顶越界是危险的。\n因为我们既然将一段空间安排为栈，那么在栈空间之外的空间里很可能存放了具有其他用途的数据、代码等，这些数据、代码可能是我们自己的程序中的，也可能是别的程序中的。\n\n\n\n\n8086CPU不保证对栈的操作不会越界。这就是说8086CPU只知道栈顶在何处（由SS：SP指示），而不知道读者安排的栈空间有多大。这点就好像，CPU只知道当前要执行的指令在何处（由CS：SP指示）而不知道读者要执行的指令有多少。\n8086CPU的工作机理，只考虑当前的情况：\n当前栈顶在何处；\n当前要执行的指令是哪一条。\n\n\n\n\n结论：\n我们在编程的时候要自己操心栈顶越界的问题，要根据可能用到的最大栈空间来安排栈的大小，防止入栈的数据太多而导致的越界；\n执行出栈操作的时候也要注意，以防栈空的时候继续出栈而导致的越界。\n\n\n栈空间当然也是内存空间的一部分，它只是一段可以以一种特殊的方式（后进先出）进行访问的内存空间。\n\n3.9 push、pop指令\npush和pop指令是可以在寄存器和内存之间传送数据的。\npush 寄存器；pop寄存器\npush ax\n（1）SP=SP-2;\n（2）将ax中的内容送入SS：SP指向的内存单元处，SS：SP此时指向新栈顶。\n\n\npop ax\n（1）将SS：SP指向的内存单元处的数据送入ax中;\n（2）SP=SP+2，SS：SP指向当前栈顶下面的单元，以当前栈顶下面的单元为新的栈顶。\n\n\n\n\npush、pop可以对段寄存器进行操作\npush ds\npush es\n\n\npush、pop 内存单元\npush 内存单元：将一个内存单元处的字入栈（栈操作都是以字为单位的）\npush [0]\n\n\npop 内存单元： 出栈，用一个内存字单元接收出栈的数据\npop [2]\n\n\n指令执行时,CPU要知道内存单元的地址，可以push、pop指令中给出内存单元的偏移地址，段地址可以在指令执行时，CPU从ds中取得。\n\n\n\n注意\npush、pop等栈操作指令，修改的只是SP。也就是说，栈顶的变化范围最大为：0~FFFFH。\n提供：SS、SP指示栈顶；改变SP后写内存的入栈指令；读内存后改变SP的出栈指令。\n这就是8086CPU提供的栈操作机制。\n\n3.10 栈段\n对于8086PC机，在编程时，可以根据需要，将一组内存单元定义为一个段。\n可以将长度为N（N&lt;=64K）的一组地址连续、起始地址为16的倍数的内存单元当作栈来使用，从而定义了一个栈段。\n比如：将10010H~1001FH这段长度为16字节的内存当作栈来使用，以栈的方式进行访问。这段空间就可以成为栈段，段地址为1000H，大小为16字节。\n将一段内存当作栈段，仅仅是我们在编程时的一种安排，CPU并不会由于这种安排就执行push、pop等栈操作指令时就自动地将我们定义的栈段当作栈空间来访问。\n如何使用push、pop等栈操作指令访问我们定义的栈段呢？\n将SS：SP指向我们定义的栈段。\n\n\n\n","slug":"汇编语言-寄存器（内存访问）","date":"2022-01-17T10:56:41.871Z","categories_index":"汇编语言","tags_index":"汇编语言","author_index":"天琦"},{"id":"f400084cdc57c1ce1c5f51d765d1c6cd","title":"汇编语言_寄存器（CPU工作原理）","content":"第2章 寄存器（CPU工作原理）\nCPU概述\n一个典型的CPU由运算器、控制器、寄存器等器件组成，这些器件靠内部总线相连。\n区别：\n内部总线实现CPU内部各个器件之间的联系。\n外部总线实现CPU和主板上其他器件的联系。\n\n\n\n\n寄存器概述\n8086CPU有14个寄存器\nAX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW\n\n\n\n\n\n2.1 通用寄存器\n8086CPU所有的寄存器都是16位的，可以存放两个字节。\nAX、BX、CX、DX通常用来存放一般性数据被称为通用寄存器。\n一个16位寄存器可以存储一个16位的数据\n一个16位寄存器所能存储的数据的最大值为2^16-1.\n\n\n8086上一代CPU中的寄存器都是8位的。\n为了保证兼容性，这四个寄存器都可以分为两个独立的8位寄存器使用。\nAX可以分为AH和AL(AH高8位815位、AL低8位07位)\nBX可以分为BH和BL\nCX可以分为CH和CL\nDX可以分为DH和DL\n\n\n一个8位寄存器所能存储的数据的最大值为2^8-1.\n\n2.2 字在寄存器中的存储✳\n一个字（word）可以存在一个16位寄存器中，这个字的高位字节和低位字节自然就存在这个寄存器的高8位寄存器和低8位寄存器中。\n\n2.3 几条汇编指令\n汇编指令不区分大小写。\nmov ax,18 将18送入AX\nmov ah,78 将78送入AH\nadd ax,8 将寄存器AX中的数值加上8\nmov ax,bx 将寄存器BX中的数据送入寄存器AX\nadd ax,bx 将AX,BX 中的内容相加，结果存在AX中\n\n\n\n2.4 物理地址\nCPU访问内存单元时要给出内存单元的地址。所有的内存单元构成的存储空间是一个一维的线性空间。\n我们称这个唯一的地址成为物理地址。\n\n2.5 16位结构的CPU\n16位结构描述了一个CPU具有以下几个方面的特征\n1、运算器一次最多可以处理16位的数据。\n2、寄存器的最大宽度位16位。\n3、寄存器和运算器之间的通路是16位的。\n\n\n\n2.6 8086CPU给出物理地址的方法\n8086有20位地址总线，可传送20位地址，寻址能力为1MB（2^20B）。\n8086内部为16为结构，它只能传送16位的地址，表现出的寻址能力却只有64kB(2^16B)\n8086CPU读写内存时，发生了这么些事：\n1、CPU中相关部件提供两个16位的地址，一个称为段地址，另一个称为偏移地址；\n2、段地址和偏移地址通过内部总线进入一个称为地址加法器的部件；\n3、地址加法器将两个16位地址合并成一个20位的地址；\n4、……\n\n\n地址加法器合成物理地址的方法：段地址×16+偏移地址=物理地址\n“段地址×16”–&gt;数据左移一位（十六进制位）–&gt;数据左移4位（二进制位）\n一个数据的二进制形式左移1位，相当于该数据乘以2；\n一个数据的二进制形式左移N位，相当于该数据乘以2的N次方；\n一个数据的十六进制形式左移1位，相当于该数据乘以16；\n一个数据的十进制形式左移1位，相当于该数据乘以10；\n一个数据的X进制形式左移1位，相当于该数据乘以X；\n\n\n\n\n\n2.7 “段地址×16+偏移地址=物理地址”的本质含义✳2.8 段的概念\n内存并没有分段，段的划分来自于CPU，由于8086CPU用“段地址×16+偏移地址=物理地址”的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存。\n在编程时可以根据需要，将若干地址连续的内存单元看作一个段，用段地址×16定位段的起始地址（基础地址），用偏移地址定位段中的内存单元。\n偏移地址为16位，16位地址的寻址能力位64K，所以一个段的长度最大为64K。\n\n内存单元地址小结\nCPU访问内存单元时，必须向内存单元提供内存单元的物理地址。\n8086CPU在内部用段地址和偏移地址移位相加的方法形成最终的物理地址。\nCPU可以用不同的段地址和偏移地址形成同一个物理地址。\n给定一个段地址，偏移地址16位，变化范围为0~FFFFH，仅用偏移地址来寻址最多可寻64K个内存单元。\n在8086PC机中，存储单元的地址用两个元素来描述。即段地址和偏移地址。\n“数据在21F60H内存单元中。”对于8086PC机有两种描述：\n(a)数据存在内存2000:1F60单元中；\n(b)数据存在内存的2000段中的1F60H单元                                         中。\n\n\n\n2.9 段寄存器\n段寄存器就是提供段地址的。\n8086CPU有4个段寄存器：CS、DS、SS、ES\n\n\n当8086CPU要访问内存时，由这四个段寄存器提供内存单元的段地址。\n\n2.10 CS和IP\nCS和IP是8086CPU中最关键的寄存器，它们指示了CPU当前要读取指令的地址。\nCS为代码段寄存器\nIP为指令指针寄存器\n\n\n8086PC工作过程的简要概述\n(1)从CS：IP指向内存单元读取指令，读取的指令进入指令缓冲器；\n(2)IP=IP+所读取指令的长度，从而指向下一条指令；\n(3 )执行指令。转到步骤(1)，重复这个过程。\n在8086CPU加电启动或复位后（即CPU刚开始工作时）CS和IP被设置为CS=FFFFH，IP=0000H\n即在8086PC机刚启动时，CPU从内存FFFF0H单元中读取指令执行。\nFFFF0H单元中的指令时8086PC机开机后执行的第一条指令。\n\n\n\n\n在任何时候，CPU将CS、IP中的内容当作指令的段地址和偏移地址，用它们合成指令的物理地址，到内存中读取指令码，执行。\n如果说，内存中的一段信息曾被CPU执行过的话，那么，它所在的内存单元必然被CS:IP指向过。\n\n2.11 修改CS、IP的指令\n在CPU中，程序员能够用指令读写的部件只有寄存器，程序员可以通过改变寄存器中的内容实现对CPU的控制。\nCPU从何处执行指令是由CS、IP中的内容决定的，程序员可以通过改变CS、IP中的内容来控制CPU执行目标指令。\n同时修改CS、IP的内容：\njmp 段地址:偏移地址\njmp 2AE3:3\njmp 3:0B46\n\n\n功能：用指令给出的段地址修改CS，偏移地址修改IP。\n\n\n仅修改IP的内容:\njmp 某一合法寄存器\njmp ax\njmp bx\n功能：用寄存器中的值修改IP。\n\n\n\n\n\n2.12 代码段\n对于8086PC机，在编程时可以根据需要将一组内存单元定义为一个段。\n可以将长度为N（N&lt;=64KB）的一组代码，存在一组地址连续、起始地址为16的倍数的内存单元中，这段代码是用来存放代码的，就定义了一个代码段。\nCPU只认被CS:IP指向的内存单元中的内容为指令。\n\n小结\n1、段地址在8086CPU的寄存器中存放。当8086CPU要访问内存时，由段寄存器提供内存单元的段地址。8086CPU有四个段寄存器，其中CS用来存放指令的段地址。\n2、CS存放指令的段地址，IP存放指令的偏移地址。\n8086机中，任意时刻，CPU将CS:IP指向的内容当作指令执行。\n\n\n3、8086CPU的工作过程\n(1)从CS:IP指向内存单元读取指令，读取的指令进入指令缓冲器。\n(2)IP指向下一条指令；\n(3)执行指令。（转到步骤(1)，重复这个过程）\n\n\n4、8086CPU提供转移指令修改CS、IP的内容。\n\n","slug":"汇编语言-寄存器（CPU工作原理）","date":"2022-01-17T10:56:41.865Z","categories_index":"汇编语言","tags_index":"汇编语言","author_index":"天琦"},{"id":"34e6d10f1f52aab5198806db1d7c9e9a","title":"汇编语言_基础知识","content":"第1章 基础知识1.1 机器语言\n机器语言是机器指令的集合。\n机器指令展开来讲就是一台机器可以正确执行的命令。\n\n1.2 汇编语言的产生\n汇编语言的主体是汇编指令。\n汇编指令和机器指令的差别在于指令的表示方法上。\n汇编指令是机器指令便于记忆的书写格式。\n汇编指令是机器指令的助记符。\n\n\n寄存器：简单的讲是CPU中可以存储数据的器件，一个CPU中有多个寄存器。\n程序–&gt;汇编指令–&gt;编译器–&gt;机器码–&gt;计算机\n\n1.3 汇编语言的组成\n汇编语言由以下三类组成：1、汇编指令（机器码的助记符）2、伪指令（由编译器执行）3、其他符号（由编译器识别）\n汇编语言的核心是汇编指令，它决定了汇编语言的特性。\n\n1.4 存储器\nCPU是计算机的核心部件，控制整个计算机的运作并进行运算，要想让CPU工作，就必须向它提供指令和数据。\n指令和数据在存储器中存放，也就是平时所说的内存。\n一台PC机中内存的作用仅次于CPU。离开了内存，性能再好的CPU也无法工作。\n磁盘不同于内存，磁盘上的数据或程序如果不读到内存中，就无法被CPU使用。\n\n1.5 指令和数据\n指令和数据是应用的概念。、\n在内存或磁盘上，指令和数据没有任何区别，都是二进制信息。\n二进制信息：1000 1001 1101 1000\n89D8H（数据）\nMOV AX,BX（程序）\n\n\n\n1.6 存储单元\n存储器被划分为若干个存储单元，每个存储单元从0开始编号；\n例如：\n一个存储器有128个存储单元：编号0~127。\n\n\n\n\n对于大容量的存储器一般用以下单位来计量容量（用B来代表Byte）\n1KB=1024B\n1MB=1024KB\n1GB=1024MB\n1TB=1024GB\n\n\n磁盘的容量单位同内存的一样，实际上以上单位是微机中常用的计量单位。\n\n1.7 CPU对存储器的读写\nCPU想要进行数据的读写，必须和外部器件（标准的说法是芯片）进行三类信息的交互：\n存储单元的地址（地址信息）；\n器件的选择，读或写命令（控制信息）；\n读或写的数据（数据信息）；\n\n\n电子计算机能处理、传输的信息都是电信号，电信号用导线传送。\n在计算机中专门有连接CPU和其他芯片的导线，通常称为总线（Bus）。\n物理上：一根根导线的集合；\n逻辑上划分为：\n地址总线\n数据总线\n控制总线\n\n\n\n\n\n1.8 地址总线\nCPU是通过地址总线来指定存储单元的。\n地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址。\n一个CPU有N根地址总线，则可以说这个CPU的地址总线宽度为N。\n这样的CPU最多可以寻找2的N次方个内存单元。（1个内存单元 == 1字节Byte == 8bit）\n\n1.9 数据总线\nCPU与内存或其他器件之间的数据传送是通过数据总线来进行的。\n数据总线的宽度决定了CPU和外界的数据传送速度。\n\n1.10 控制总线\nCPU对外部器件的控制是通过控制总线来进行的。这里控制总线是一个总称。控制总线是一些控制线的集合。\n有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。\n控制总线的宽度决定了CPU对外部器件的控制能力。\n控制总线发送控制信息。\n\n小结\n汇编指令是机器指令的助记符，同机器指令一一对应。\n每一种CPU都有自己的汇编指令集。\nCPU可以直接使用的信息在存储器中存放。\n在存储器中指令和数据没有任何区别，都是二进制信息。\n存储单元从零开始顺序编号。\n一个存储单元可以存储8个bit（用作单位写成“b”），即8位二进制数。\n1B(Byte)=8bit、1KB=1024B、1MB=1024KB、1GB=1024MB\n每一个CPU芯片都有许多管脚，这些管脚和总线相连。也可以说，这些管脚引出总线。一个CPU可以引出三种总线的宽度标志了这个CPU的不同方面的性能：\n地址总线的宽度决定了CPU的寻址能力\n数据总线的宽度决定了CPU与其它器件进行数据传送时的一次数据传送量；\n控制总线宽度决定了CPU对系统中其它器件的控制能力。\n\n\n\n1.11 内存地址空间（概述）\n最终运行程序的是CPU，我们用汇编编程的时候，必须要从CPU角度考虑问题。\n对CPU来讲，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制。这个逻辑存储器即是内存地址空间。\n\n1.12 主板\n在每一台PC机中，都有一个主板，主板上有核心器件和一些主要器件。\n这些器件通过总线（地址总线、数据总线、控制总线）相连。\n\n1.13 接口卡\n计算机系统中，所有可用程序控制其工作的设备，必须收到CPU的控制。\nCPU对外部设备不能直接控制。\n\n1.14 各类存储器芯片\n随机存储器（RAM）和只读存储器（ROM）\n\n","slug":"汇编语言-基础知识","date":"2022-01-17T10:56:41.860Z","categories_index":"汇编语言","tags_index":"汇编语言","author_index":"天琦"},{"id":"6cc08f7c302affc9e1e3fbaf89278f8f","title":"机场运营管理_民用航空系统","content":"第1章 民用航空系统==1944年 《芝加哥公约》====1947年 成立国际民航组织(ICAO)==\n民用航空的概念==民用航空==是指使用各类航空器从事除了军事性质（包括国防警察和海关）以外的所有的航空活动。1919年==《巴黎公约》==是世界上第一部国家间的航空法。\n商业航空==商业航空==也称为航空运输，是指以航空器进行经营性的客货运输的航空活动。它的经营性表明这是一种商业活动，以营利为目的。它又是运­输活动，这种航空活动是交通运输的一个组成部分，与铁路、公路、水路和管道运输共同组成了国家的交通运输系统。\n民用航空系统的构成政府部门、民航企业、民航机场.\n机场的主要功能1.保证飞机安全及时起飞和降落。2.安排旅客和货物准时、舒适地上下飞机.3.提供方便快捷的地面交通连接市区。\n机场的分类① 按服务对象划分：军用机场、民用机场、军民合用机场\n② 按航线性质划分：国际航线机场（国际机场）、国内航线机场\n③ 按机场在民航运输网络系统中所起作用划分：枢纽机场、干线机场、支线机场\n④ 我国机场的分类：大型枢纽机场、中型枢纽机场、一航干线机场、支线机场\n","slug":"机场运营管理-民用航空系统","date":"2022-01-17T10:56:41.849Z","categories_index":"机场运营管理","tags_index":"机场运营管理","author_index":"天琦"},{"id":"907f4a5d3a44a500e7add8dd361394cf","title":"机场运营管理_机场航站区运营_机场货运经营","content":"第四章 机场航站区运营\n航站区主要由三部分组成：\n① 航站楼、货运站；\n② 航站楼、货运站前的交通设施，如停车场、停车楼等\n③ 航站楼、货运站与飞机的联结地带——站坪。\n\n\n\n4.1 机场航站区的规划4.1.1 航站区的规划原则✳\n(1) 与机场总体规划相一致\n(2) 坚持“一次规划，分期实施”，使其规模与旅客运输量相适应，各区域容量平衡，并具有未来扩建发展的余地。\n(3) 相对于飞行区和机场的其他功能区的间距、方位合理；\n(4) 航站区陆侧应便于交通组织，并与城市地面交通系统有良好的衔接；\n(5) 航站区空侧应根据飞行运行架次、机型组合、地面保障服务设施等因素合理规划，使飞机的运行安全、顺畅、高效；\n(6) 航站区应地势开阔、平坦，排水条件好，并尽可能少占地；\n(7) 注意航站区的群体建筑效应，注意绿化，美化和保护航站区及其周围环境。\n\n4.2 航站楼4.2.1 航站楼的规划设计（1阶段）\n航站楼的具体规划过程大致客服呢为以下四个阶段：\n\n确定设计旅客量。一般为年旅客量的0.03%~0.06%\n\n\n\n估算面积\n\n\n\n制订总体布局方案\n\n\n\n提出设计方案\n\n\n\n\n\n4.2.2 航站楼的布局4.2.3 航站楼旅客流程\n进行航空旅行的旅客，根据其旅行是否跨越国界，可分为国际旅客和国内旅客，国内、国际旅客可进一步分为四类：\n① 出发旅客\n② 到达旅客\n③ 中转旅客\n④ 过境旅客\n\n\n\n4.2.4 航站楼流程的组织原则\n政府联检设施\n政府联检设施包括海关、边防和卫生检疫，是国际旅客必须经过的关卡。\n\n\n\n第五章 机场货运经营\n世界主要机场的航空货运模式\n\n\n三个以上机场之间的货运枢纽网络中转运输模式\n\n\n\n一个机场为中心的点式货运中转模式\n\n\n\n两个机场直接的直达货物运模式\n\n\n\n\n现代机场货运设施的构成\n\n现代机场货运设施通常由四大部分组成，即货运控制系统、货运仓储系统、货运地面设备和集装器具。\n\n\n\n","slug":"机场运营管理-机场航站区的运营-机场货运经营","date":"2022-01-17T10:56:41.843Z","categories_index":"机场运营管理","tags_index":"机场运营管理","author_index":"天琦"},{"id":"52b8064e80b00f26008c047d0f91c36a","title":"机场运营管理-机场系统","content":"第2章 机场系统机场系统的构成\n\n\n\n\n\n\n\n\n机场系统也可以分为空域和地域两部分。\n \n跑道\n\n\n\n\n\n\n\n\n机场的构型主要取决于跑道的数目、方位以及跑道与航站区的相对位置。跑道方位主要与当地风向有关。\n跑道的长度\n\n\n\n\n\n\n\n\n设计跑道的长度主要是依据预计使用该机场飞机的起降特性(特别是要求跑道最长的那种机型的构型和性能特点)。此外跑道长度还与下列因素有关：飞机起降质量与速度（飞机起飞或降落质量越大，离地速度或接地速度越大，滑跑距离就越长），跑道条件（如表面状况，湿度和纵向坡度等），机场所在环境（如机场的标高和地形），气象条件（特别是地面风力、风向和气温等），当海拔高度高，空气稀薄，地面温度高时，发动机的功率就会下降，因而都需要加长跑道。\n停机坪\n\n\n\n\n\n\n\n\n停机坪也叫机坪，是飞机停放和旅客登机的地方。机坪分为停放机坪和登机机坪。\n飞行区的设施航站导航设施仪表着陆系统（ILS）\n\n\n\n\n\n\n\n\n仪表着陆系统按着陆的最小能见度分为3类。现在使用的标准仪表着陆系统为Ⅰ类。Ⅰ类可以在跑道目视视程550米或能见度800米以上、决断高度60米以上时使用。Ⅱ类仪表着陆系统可在跑道视程为350米、决断高度为30米以上的情况使用。Ⅲ类仪表着陆系统没有决断高度限制，但是根据跑道目视视程不同又分为三个类别：Ⅲa类对应视程为200米，Ⅲb类为50米，Ⅲc类则可在视程为0的情况下使用。\n机场地面灯光系统跑道灯光\n\n\n\n\n\n\n\n\n驾驶员着陆时看到近处的跑道端是绿色灯光，远处的跑道端是红色灯光。\n出入机场地面交通系统\n\n\n\n\n\n\n\n\n中大型运输机的巡航速度一般都在900KM/H左右，因而，国内航线的乘机时间都在1~3H之内。\n","slug":"机场运营管理-机场系统","date":"2022-01-17T10:56:41.836Z","categories_index":"机场运营管理","tags_index":"机场运营管理,机场系统","author_index":"天琦"},{"id":"0809d91040f4f7dc3cf10e150b0b9b11","title":"机场运营管理_机场容量管理","content":"第三章 机场容量管理3.1 容量和延误分析3.1.1 容量的概念3.1.2 跑道容量的影响因素\n\n空中交通管制因素\n\n\n(1) 跑道上不容许同时有两架飞机运行——着陆飞机必须滑行到出口外，起飞飞机才能放行，其时间间隔取决于着陆飞机的跑道占用时间；后一架起飞飞机必须待前一架起飞飞机升起后，方可进入跑道，二者的间隔时间也取决于跑道占用时间。\n(2) 着陆优先于起飞——当着陆飞机离跑道入口一定距离（约2海里或1分钟）以内时，应首先安排着陆；否则，可插入一次起飞。\n(3) 同一飞行路径的两架飞机之间应有足够的水平距离间隔——由于飞机翼端在飞行时产生的尾流涡流会对后随飞机的飞行造成危害，因此，对前后两架飞机间的水平间隔做出了规定。\n(4) 交通管制系统的完善程度（控制精度）和管制员所采用的顺序原则（按速度快慢排序原则或按先到先安排原则）。\n\n\n\n机队组成\n\n\n\n跑道布置和使用方案\n\n\n\n环境因素\n\n\n\n3.2 机场高峰时间安排与航班安排3.2.1 高峰时间3.2.2 描述高峰的方法（✳大题）\n\n标准繁忙率（the standard busy rate, SBR）\n\n\n“第三十高峰小时客流量法”，即只有29个单位小时的流量高于这个单位小时。\n\n\n\n繁忙小时率（busy hour rate, BHR）\n\n\n繁忙小时率（busy hour rate, BHR）或所谓5%繁忙小时是对SBR的修改，因为SBR所包含的拥挤程度在不同的机场是不同的。\n\n\n\n典型高峰小时旅客（typical peak hour passengers, TPHP）\n\n\n\n最忙时间表小时（busiest timetable hour, BTH）\n\n\n\n高峰轮廓小时（peak profile hour，PPH）\n\n\n\n","slug":"机场运营管理-机场容量管理","date":"2022-01-17T10:56:41.830Z","categories_index":"机场运营管理","tags_index":"机场运营管理","author_index":"天琦"},{"id":"76340ce449e53e01d3bf837a0cd9b906","title":"机场运营管理_机场安检与联检","content":"第六章 机场安检与联检安检工作机构\n“民用航空安全检查许可证”有效期为五年，到期由颁证机关重新审核换发。\n\n安检人员\n安检人员实行岗位证书只读\n在X射线区域工作的安检人员应当得到下列健康保护\n每年到指定医院进行体检并建立健康状况档案；\n每年享有不少于两周的疗养休假；\n按民航局规定发给工种补助费；\n女工怀孕和哺乳期间应当合理安排工作，避免在X射线区域工作；\nX射线安全检查仪操作检查员连续工作时间不得超过40分钟，每天累计不得超过6小时。\n\n\n\n有关航空安全保卫的国际公约\n《海牙公约》\n《海牙公约》即“关于制止非法劫持航空器的公约”。该公约于1971年10月4日生效。\n\n\n\n安检工作的任务和流程旅客及行李、货物、邮件的检查\n有效乘机身份证件的种类包括：中国籍旅客的居民身份证、临时身份证、军官证、武警警官证、士兵证、军队学员证、军队文职干部证、军队离退休干部证和军队职工证，港、澳地区居民和台湾同胞旅行证件。\n\n候机隔离区的安全监控\n经过安全检查的旅客进入候机隔离区以前，安检部门应当对候机隔离区进行清场。\n安检部门应当派员在候机隔离区内巡视，对重点部位加强监控。\n经过安全检查的旅客应当在候机隔离区内等待登机。如遇航班延误或其他特殊原因离开候机隔离区的，再次进入时应当重新经过安全检查。\n因工作需要进入候机隔离区的人员，必须佩戴机场公安机关制发的候机隔离区通行证件。上述人员及其携带的物品，应当经过安全检查。安检部门应当在候机隔离区工作人员通道口派专人看守，检查进出人员。\n候机隔离区内的商店不得出售可能危害航空安全的商品。商店运进商品应当经过安全检查，同时接受安全部门的监督。\n\n民用航空器的监护任务\n对民用航空器监护区的清查监护，对出、过港民用航空器，经过安全技术检查的旅客及其手提行李实施监护。\n\n飞机监护的时间规定\n对当日首班出港航空器，监护人员应在起飞时间前90分钟与机务人员办理交接手续。\n对执行航班任务延误超过90分钟的航空器由安检部门交由机务人员管理，至确定起飞时间前60分钟由机务人员移交安检部门监护。\n\n护照\n外交护照（我国外交护照有效期为五年）\n公务护照\n因公普通护照\n因私普通护照\n\n签证\n签证（visa），是一个国家的主权机关在本国或外国公民所持的护照或其他旅行证件上的签注、盖印，以表示允许其出入本国国境或者经过国境的手续，也可以说是颁发给他们的一项签注式的证明。\n\n","slug":"机场运营管理-机场安检与联检","date":"2022-01-17T10:56:41.825Z","categories_index":"机场运营管理","tags_index":"机场运营管理","author_index":"天琦"},{"id":"88a8e12c7579d879f9f0d13e2685fb1f","title":"有趣的代码注释","content":"有趣的代码注释&#x2F;*\n                               _(\\_&#x2F;) \n                             ,((((^&#96;\\\n                            ((((  (6 \\ \n                          ,((((( ,    \\\n      ,,,_              ,(((((  &#x2F;&quot;._  ,&#96;,\n     ((((\\\\ ,...       ,((((   &#x2F;    &#96;-.-&#39;\n     )))  ;&#39;    &#96;&quot;&#39;&quot;&#39;&quot;&quot;((((   (      \n    (((  &#x2F;            (((      \\\n     )) |                      |\n    ((  |        .       &#39;     |\n    ))  \\     _ &#39;      &#96;t   ,.&#39;)\n    (   |   y;- -,-&quot;&quot;&#39;&quot;-.\\   \\&#x2F;  \n    )   &#x2F; .&#x2F;  ) &#x2F;         &#96;\\  \\\n       |.&#x2F;   ( (           &#x2F; &#x2F;&#39;\n       ||     \\\\          &#x2F;&#x2F;&#39;|\n       ||      \\\\       _&#x2F;&#x2F;&#39;||\n       ||       ))     |_&#x2F;  ||\n       \\_\\     |_&#x2F;          ||\n       &#96;&#39;&quot;                  \\_\\\n                            &#96;&#39;&quot; \n*&#x2F;\n\n&#x2F;***　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　\n *　　　　　　　　　瓦瓦　　　　　　　　　　　　十　　　　　　　　　　　　　\n *　　　　　　　　十齱龠己　　　　　　　　　亅瓦車己　　　　　　　　　　　　\n *　　　　　　　　乙龍龠毋日丶　　　　　　丶乙己毋毋丶　　　　　　　　　　　\n *　　　　　　　　十龠馬鬼車瓦　　　　　　己十瓦毋毋　　　　　　　　　　　　\n *　　　　　　　　　鬼馬龠馬龠十　　　　己己毋車毋瓦　　　　　　　　　　　　\n *　　　　　　　　　毋龠龠龍龠鬼乙丶丶乙車乙毋鬼車己　　　　　　　　　　　　\n *　　　　　　　　　乙龠龍龍鬼龍瓦　十瓦毋乙瓦龠瓦亅　　　　　　　　　　　　\n *　　　　　　　　　　馬齱龍馬鬼十丶日己己己毋車乙丶　　　　　　　　　　　　\n *　　　　　　　　　　己齱馬鬼車十十毋日乙己己乙乙　　　　　　　　　　　　　\n *　　　　　　　　　　　車馬齱齱日乙毋瓦己乙瓦日亅　　　　　　　　　　　　　\n *　　　　　　　　　　　亅車齺龖瓦乙車龖龍乙乙十　　　　　　　　　　　　　　\n *　　　　　　　　　　　　日龠龠十亅車龍毋十十　　　　　　　　　　　　　　　\n *　　　　　　　　　　　　日毋己亅　己己十亅亅　　　　　　　　　　　　　　　\n *　　　　　　　　　　　丶己十十乙　　丶丶丶丶丶　　　　　　　　　　　　　　\n *　　　　　　　　　　　亅己十龍龖瓦　　丶　丶　乙十　　　　　　　　　　　　\n *　　　　　　　　　　　亅己十龠龖毋　丶丶　　丶己鬼鬼瓦亅　　　　　　　　　\n *　　　　　　　　　　　十日十十日亅丶亅丶　丶十日毋鬼馬馬車乙　　　　　　　\n *　　　　　　　　　　　十日乙十亅亅亅丶　　十乙己毋鬼鬼鬼龍齺馬乙　　　　　\n *　　　　　　　　　　　丶瓦己乙十十亅丶亅乙乙乙己毋鬼鬼鬼龍齱齺齺鬼十　　　\n *　　　　　　　　　　　　乙乙十十十亅乙瓦瓦己日瓦毋鬼鬼龠齱齱龍龍齱齱毋丶　\n *　　　　　　　　　　　　亅十十十十乙瓦車毋瓦瓦日車馬龠龍龍龍龍龍龠龠龠馬亅\n *　　　　　　　　　　　　　十十十十己毋車瓦瓦瓦瓦鬼馬龠龍龠龠龍龠龠龠馬龠車\n *　　　　　　　　　　　　　　亅十十日毋瓦日日瓦鬼鬼鬼龠龠馬馬龠龍龍龠馬馬車\n *　　　　　　　　　　　　　　亅亅亅乙瓦瓦毋車車車馬龍龠鬼鬼馬龠龍龍龠馬馬鬼\n *　　　　　　　　　　　　丶丶乙亅亅乙車鬼鬼鬼毋車龍龍龠鬼馬馬龠龍齱齱龍馬鬼\n *　　　　　　　　　　　亅己十十己十日鬼鬼車瓦毋龠龍龠馬馬龠龠龠齱齺齺齱龠鬼\n *　　　　　　　　　　　　亅乙乙乙十車馬車毋馬齱齱龍龠龠龠馬龠龍齱龍龠龠鬼瓦\n *　　　　　　　　　　　　　　　　丶毋龠鬼車瓦車馬龠龍龠龠龍齱齱龠馬馬鬼毋日\n *　　　　　　　　　　　　　　　　十乙己日十　　丶己鬼龍齱齺齱龍馬馬馬車毋己\n *　　　　　　　　　　　　　　丶十己乙亅丶　　　　　　亅瓦馬龠龍龠龠馬毋瓦乙\n *　　　　　　　　　　　　　丶十十乙亅十　　　　　　　　亅己瓦車馬龠鬼車瓦乙\n *　　　　　　　　　　　　　丶十乙十十丶　　　　　　　　　丶丶亅十瓦鬼車瓦己\n *　　　　　　　　　　　　　　丶亅亅丶　　　　　　　　　　　　　　　亅日瓦日\n *　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　丶\n *&#x2F;\n\n&#x2F;***                                                                          \n *          .,:,,,                                        .::,,,::.          \n *        .::::,,;;,                                  .,;;:,,....:i:         \n *        :i,.::::,;i:.      ....,,:::::::::,....   .;i:,.  ......;i.        \n *        :;..:::;::::i;,,:::;:,,,,,,,,,,..,.,,:::iri:. .,:irsr:,.;i.        \n *        ;;..,::::;;;;ri,,,.                    ..,,:;s1s1ssrr;,.;r,        \n *        :;. ,::;ii;:,     . ...................     .;iirri;;;,,;i,        \n *        ,i. .;ri:.   ... ............................  .,,:;:,,,;i:        \n *        :s,.;r:... ....................................... .::;::s;        \n *        ,1r::. .............,,,.,,:,,........................,;iir;        \n *        ,s;...........     ..::.,;:,,.          ...............,;1s        \n *       :i,..,.              .,:,,::,.          .......... .......;1,       \n *      ir,....:rrssr;:,       ,,.,::.     .r5S9989398G95hr;. ....,.:s,      \n *     ;r,..,s9855513XHAG3i   .,,,,,,,.  ,S931,.,,.;s;s&amp;BHHA8s.,..,..:r:     \n *    :r;..rGGh,  :SAG;;G@BS:.,,,,,,,,,.r83:      hHH1sXMBHHHM3..,,,,.ir.    \n *   ,si,.1GS,   sBMAAX&amp;MBMB5,,,,,,:,,.:&amp;8       3@HXHBMBHBBH#X,.,,,,,,rr    \n *   ;1:,,SH:   .A@&amp;&amp;B#&amp;8H#BS,,,,,,,,,.,5XS,     3@MHABM&amp;59M#As..,,,,:,is,   \n *  .rr,,,;9&amp;1   hBHHBB&amp;8AMGr,,,,,,,,,,,:h&amp;&amp;9s;   r9&amp;BMHBHMB9:  . .,,,,;ri.  \n *  :1:....:5&amp;XSi;r8BMBHHA9r:,......,,,,:ii19GG88899XHHH&amp;GSr.      ...,:rs.  \n *  ;s.     .:sS8G8GG889hi.        ....,,:;:,.:irssrriii:,.        ...,,i1,  \n *  ;1,         ..,....,,isssi;,        .,,.                      ....,.i1,  \n *  ;h:               i9HHBMBBHAX9:         .                     ...,,,rs,  \n *  ,1i..            :A#MBBBBMHB##s                             ....,,,;si.  \n *  .r1,..        ,..;3BMBBBHBB#Bh.     ..                    ....,,,,,i1;   \n *   :h;..       .,..;,1XBMMMMBXs,.,, .. :: ,.               ....,,,,,,ss.   \n *    ih: ..    .;;;, ;;:s58A3i,..    ,. ,.:,,.             ...,,,,,:,s1,    \n *    .s1,....   .,;sh,  ,iSAXs;.    ,.  ,,.i85            ...,,,,,,:i1;     \n *     .rh: ...     rXG9XBBM#M#MHAX3hss13&amp;&amp;HHXr         .....,,,,,,,ih;      \n *      .s5: .....    i598X&amp;&amp;A&amp;AAAAAA&amp;XG851r:       ........,,,,:,,sh;       \n *      . ihr, ...  .         ..                    ........,,,,,;11:.       \n *         ,s1i. ...  ..,,,..,,,.,,.,,.,..       ........,,.,,.;s5i.         \n *          .:s1r,......................       ..............;shs,           \n *          . .:shr:.  ....                 ..............,ishs.             \n *              .,issr;,... ...........................,is1s;.               \n *                 .,is1si;:,....................,:;ir1sr;,                  \n *                    ..:isssssrrii;::::::;;iirsssssr;:..                    \n *                         .,::iiirsssssssssrri;;:.                      \n *&#x2F; \n\n&#x2F;***\n *               ii.                                         ;9ABH,          \n *              SA391,                                    .r9GG35&amp;G          \n *              &amp;#ii13Gh;                               i3X31i;:,rB1         \n *              iMs,:,i5895,                         .5G91:,:;:s1:8A         \n *               33::::,,;5G5,                     ,58Si,,:::,sHX;iH1        \n *                Sr.,:;rs13BBX35hh11511h5Shhh5S3GAXS:.,,::,,1AG3i,GG        \n *                .G51S511sr;;iiiishS8G89Shsrrsh59S;.,,,,,..5A85Si,h8        \n *               :SB9s:,............................,,,.,,,SASh53h,1G.       \n *            .r18S;..,,,,,,,,,,,,,,,,,,,,,,,,,,,,,....,,.1H315199,rX,       \n *          ;S89s,..,,,,,,,,,,,,,,,,,,,,,,,....,,.......,,,;r1ShS8,;Xi       \n *        i55s:.........,,,,,,,,,,,,,,,,.,,,......,.....,,....r9&amp;5.:X1       \n *       59;.....,.     .,,,,,,,,,,,...        .............,..:1;.:&amp;s       \n *      s8,..;53S5S3s.   .,,,,,,,.,..      i15S5h1:.........,,,..,,:99       \n *      93.:39s:rSGB@A;  ..,,,,.....    .SG3hhh9G&amp;BGi..,,,,,,,,,,,,.,83      \n *      G5.G8  9#@@@@@X. .,,,,,,.....  iA9,.S&amp;B###@@Mr...,,,,,,,,..,.;Xh     \n *      Gs.X8 S@@@@@@@B:..,,,,,,,,,,. rA1 ,A@@@@@@@@@H:........,,,,,,.iX:    \n *     ;9. ,8A#@@@@@@#5,.,,,,,,,,,... 9A. 8@@@@@@@@@@M;    ....,,,,,,,,S8    \n *     X3    iS8XAHH8s.,,,,,,,,,,...,..58hH@@@@@@@@@Hs       ...,,,,,,,:Gs   \n *    r8,        ,,,...,,,,,,,,,,.....  ,h8XABMMHX3r.          .,,,,,,,.rX:  \n *   :9, .    .:,..,:;;;::,.,,,,,..          .,,.               ..,,,,,,.59  \n *  .Si      ,:.i8HBMMMMMB&amp;5,....                    .            .,,,,,.sMr\n *  SS       :: h@@@@@@@@@@#; .                     ...  .         ..,,,,iM5\n *  91  .    ;:.,1&amp;@@@@@@MXs.                            .          .,,:,:&amp;S\n *  hS ....  .:;,,,i3MMS1;..,..... .  .     ...                     ..,:,.99\n *  ,8; ..... .,:,..,8Ms:;,,,...                                     .,::.83\n *   s&amp;: ....  .sS553B@@HX3s;,.    .,;13h.                            .:::&amp;1\n *    SXr  .  ...;s3G99XA&amp;X88Shss11155hi.                             ,;:h&amp;,\n *     iH8:  . ..   ,;iiii;,::,,,,,.                                 .;irHA  \n *      ,8X5;   .     .......                                       ,;iihS8Gi\n *         1831,                                                 .,;irrrrrs&amp;@\n *           ;5A8r.                                            .:;iiiiirrss1H\n *             :X@H3s.......                                .,:;iii;iiiiirsrh\n *              r#h:;,...,,.. .,,:;;;;;:::,...              .:;;;;;;iiiirrss1\n *             ,M8 ..,....,.....,,::::::,,...         .     .,;;;iiiiiirss11h\n *             8B;.,,,,,,,.,.....          .           ..   .:;;;;iirrsss111h\n *            i@5,:::,,,,,,,,.... .                   . .:::;;;;;irrrss111111\n *            9Bi,:,,,,......                        ..r91;;;;;iirrsss1ss1111\n *&#x2F;\n\n\n&#x2F;***                                                                    \n *            .,,       .,:;;iiiiiiiii;;:,,.     .,,                   \n *          rGB##HS,.;iirrrrriiiiiiiiiirrrrri;,s&amp;##MAS,                \n *         r5s;:r3AH5iiiii;;;;;;;;;;;;;;;;iiirXHGSsiih1,               \n *            .;i;;s91;;;;;;::::::::::::;;;;iS5;;;ii:                  \n *          :rsriii;;r::::::::::::::::::::::;;,;;iiirsi,               \n *       .,iri;;::::;;;;;;::,,,,,,,,,,,,,..,,;;;;;;;;iiri,,.           \n *    ,9BM&amp;,            .,:;;:,,,,,,,,,,,hXA8:            ..,,,.       \n *   ,;&amp;@@#r:;;;;;::::,,.   ,r,,,,,,,,,,iA@@@s,,:::;;;::,,.   .;.      \n *    :ih1iii;;;;;::::;;;;;;;:,,,,,,,,,,;i55r;;;;;;;;;iiirrrr,..       \n *   .ir;;iiiiiiiiii;;;;::::::,,,,,,,:::::,,:;;;iiiiiiiiiiiiri         \n *   iriiiiiiiiiiiiiiii;;;::::::::::::::::;;;iiiiiiiiiiiiiiiir;        \n *  ,riii;;;;;;;;;;;;;:::::::::::::::::::::::;;;;;;;;;;;;;;iiir.       \n *  iri;;;::::,,,,,,,,,,:::::::::::::::::::::::::,::,,::::;;iir:       \n * .rii;;::::,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,::::;;iri       \n * ,rii;;;::,,,,,,,,,,,,,:::::::::::,:::::,,,,,,,,,,,,,:::;;;iir.      \n * ,rii;;i::,,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,,::i;;iir.      \n * ,rii;;r::,,,,,,,,,,,,,:,:::::,:,:::::::,,,,,,,,,,,,,::;r;;iir.      \n * .rii;;rr,:,,,,,,,,,,,,,,:::::::::::::::,,,,,,,,,,,,,:,si;;iri       \n *  ;rii;:1i,,,,,,,,,,,,,,,,,,:::::::::,,,,,,,,,,,,,,,:,ss:;iir:       \n *  .rii;;;5r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,sh:;;iri        \n *   ;rii;:;51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.:hh:;;iir,        \n *    irii;::hSr,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,sSs:;;iir:         \n *     irii;;:iSSs:.,,,,,,,,,,,,,,,,,,,,,,,,,,,..:135;:;;iir:          \n *      ;rii;;:,r535r:...,,,,,,,,,,,,,,,,,,..,;sS35i,;;iirr:           \n *       :rrii;;:,;1S3Shs;:,............,:is533Ss:,;;;iiri,            \n *        .;rrii;;;:,;rhS393S55hh11hh5S3393Shr:,:;;;iirr:              \n *          .;rriii;;;::,:;is1h555555h1si;:,::;;;iirri:.               \n *            .:irrrii;;;;;:::,,,,,,,,:::;;;;iiirrr;,                  \n *               .:irrrriiiiii;;;;;;;;iiiiiirrrr;,.                    \n *                  .,:;iirrrrrrrrrrrrrrrrri;:.                        \n *                        ..,:::;;;;:::,,.                             \n *&#x2F;                                                                     \n\n\n&#x2F;***\n * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P&#x2F;S│S L│P&#x2F;B│  ┌┐    ┌┐    ┌┐\n * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘\n * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐\n * │~ &#96;│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ &#x3D;│ BacSp │ │Ins│Hom│PUp│ │N L│ &#x2F; │ * │ - │\n * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤\n * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │\n * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │\n * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#39;│ Enter  │               │ 4 │ 5 │ 6 │   │\n * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤\n * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? &#x2F;│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │\n * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││\n * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│\n * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘\n *&#x2F;\n\n\n&#x2F;***\n *                    _ooOoo_\n *                   o8888888o\n *                   88&quot; . &quot;88\n *                   (| -_- |)\n *                    O\\ &#x3D; &#x2F;O\n *                ____&#x2F;&#96;---&#39;\\____\n *              .   &#39; \\\\| |&#x2F;&#x2F; &#96;.\n *               &#x2F; \\\\||| : |||&#x2F;&#x2F; \\\n *             &#x2F; _||||| -:- |||||- \\\n *               | | \\\\\\ - &#x2F;&#x2F;&#x2F; | |\n *             | \\_| &#39;&#39;\\---&#x2F;&#39;&#39; | |\n *              \\ .-\\__ &#96;-&#96; ___&#x2F;-. &#x2F;\n *           ___&#96;. .&#39; &#x2F;--.--\\ &#96;. . __\n *        .&quot;&quot; &#39;&lt; &#96;.___\\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;.\n *       | | : &#96;- \\&#96;.;&#96;\\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |\n *         \\ \\ &#96;-. \\_ __\\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F;\n * &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n *                    &#96;&#x3D;---&#x3D;&#39;\n *\n * .............................................\n *          佛祖保佑             永无BUG\n *&#x2F;\n\n\n&#x2F;***\n *  佛曰:\n *          写字楼里写字间，写字间里程序员；\n *          程序人员写程序，又拿程序换酒钱。\n *          酒醒只在网上坐，酒醉还来网下眠；\n *          酒醉酒醒日复日，网上网下年复年。\n *          但愿老死电脑间，不愿鞠躬老板前；\n *          奔驰宝马贵者趣，公交自行程序员。\n *          别人笑我忒疯癫，我笑自己命太贱；\n *          不见满街漂亮妹，哪个归得程序员？\n *&#x2F;\n\n\n&#x2F;***\n * _ooOoo_\n * o8888888o\n * 88&quot; . &quot;88\n * (| -_- |)\n *  O\\ &#x3D; &#x2F;O\n * ___&#x2F;&#96;---&#39;\\____\n * .   &#39; \\\\| |&#x2F;&#x2F; &#96;.\n * &#x2F; \\\\||| : |||&#x2F;&#x2F; \\\n * &#x2F; _||||| -:- |||||- \\\n * | | \\\\\\ - &#x2F;&#x2F;&#x2F; | |\n * | \\_| &#39;&#39;\\---&#x2F;&#39;&#39; | |\n * \\ .-\\__ &#96;-&#96; ___&#x2F;-. &#x2F;\n * ___&#96;. .&#39; &#x2F;--.--\\ &#96;. . __\n * .&quot;&quot; &#39;&lt; &#96;.___\\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;.\n * | | : &#96;- \\&#96;.;&#96;\\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |\n * \\ \\ &#96;-. \\_ __\\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F;\n * &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n * &#96;&#x3D;---&#x3D;&#39;\n *          .............................................\n *           佛曰：bug泛滥，我已瘫痪！\n *&#x2F;\n\n\n&#x2F;***\n *\n *   █████▒█    ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗\n * ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝\n * ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗\n * ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║\n * ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝\n *  ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝\n *  ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░\n *  ░ ░    ░░░ ░ ░ ░        ░ ░░ ░\n *           ░     ░ ░      ░  ░\n *&#x2F;\n\n\n&#x2F;***\n *                    .::::.\n *                  .::::::::.\n *                 :::::::::::  Success，man\n *             ..:::::::::::&#39;\n *           &#39;::::::::::::&#39;\n *             .::::::::::\n *        &#39;::::::::::::::..\n *             ..::::::::::::.\n *           &#96;&#96;::::::::::::::::\n *            ::::&#96;&#96;:::::::::&#39;        .:::.\n *           ::::&#39;   &#39;:::::&#39;       .::::::::.\n *         .::::&#39;      ::::     .:::::::&#39;::::.\n *        .:::&#39;       :::::  .:::::::::&#39; &#39;:::::.\n *       .::&#39;        :::::.:::::::::&#39;      &#39;:::::.\n *      .::&#39;         ::::::::::::::&#39;         &#96;&#96;::::.\n *  ...:::           ::::::::::::&#39;              &#96;&#96;::.\n * &#96;&#96;&#96;&#96; &#39;:.          &#39;:::::::::&#39;                  ::::..\n *                    &#39;.:::::&#39;                    &#39;:&#39;&#96;&#96;&#96;&#96;..\n *&#x2F;\n\n\n&#x2F;***\n *      ┌─┐       ┌─┐\n *   ┌──┘ ┴───────┘ ┴──┐\n *   │                 │\n *   │       ───       │\n *   │  ─┬┘       └┬─  │\n *   │                 │\n *   │       ─┴─       │\n *   │                 │\n *   └───┐         ┌───┘\n *       │         │\n *       │         │\n *       │         │\n *       │         └──────────────┐\n *       │                        │\n *       │                        ├─┐\n *       │                        ┌─┘\n *       │                        │\n *       └─┐  ┐  ┌───────┬──┐  ┌──┘\n *         │ ─┤ ─┤       │ ─┤ ─┤\n *         └──┴──┘       └──┴──┘\n *                神兽保佑\n *               代码无BUG!\n *&#x2F;\n\n\n&#x2F;***\n *      ┌─┐       ┌─┐\n *   ┌──┘ ┴───────┘ ┴──┐\n *   │                 │\n *   │       ───       │\n *   │   &gt;        &lt;    │\n *   │                 │\n *   │   ...  ⌒  ...   │\n *   │                 │\n *   └───┐         ┌───┘\n *       │         │\n *       │         │\n *       │         │\n *       │         └──────────────┐\n *       │                        │\n *       │                        ├─┐\n *       │                        ┌─┘\n *       │                        │\n *       └─┐  ┐  ┌───────┬──┐  ┌──┘\n *         │ ─┤ ─┤       │ ─┤ ─┤\n *         └──┴──┘       └──┴──┘\n *                神兽保佑\n *               代码无BUG!\n *&#x2F;\n\n\n&#x2F;***\n *      ┌─┐       ┌─┐ + +\n *   ┌──┘ ┴───────┘ ┴──┐++\n *   │                 │\n *   │       ───       │++ + + +\n *   ███████───███████ │+\n *   │                 │+\n *   │       ─┴─       │\n *   │                 │\n *   └───┐         ┌───┘\n *       │         │\n *       │         │   + +\n *       │         │\n *       │         └──────────────┐\n *       │                        │\n *       │                        ├─┐\n *       │                        ┌─┘\n *       │                        │\n *       └─┐  ┐  ┌───────┬──┐  ┌──┘  + + + +\n *         │ ─┤ ─┤       │ ─┤ ─┤\n *         └──┴──┘       └──┴──┘  + + + +\n *                神兽保佑\n *               代码无BUG!\n *&#x2F;\n\n\n&#x2F;***\n *                  ___&#x3D;&#x3D;&#x3D;&#x3D;-_  _-&#x3D;&#x3D;&#x3D;&#x3D;___\n *            _--^^^#####&#x2F;&#x2F;      \\\\#####^^^--_\n *         _-^##########&#x2F;&#x2F; (    ) \\\\##########^-_\n *        -############&#x2F;&#x2F;  |\\^^&#x2F;|  \\\\############-\n *      _&#x2F;############&#x2F;&#x2F;   (@::@)   \\\\############\\_\n *     &#x2F;#############((     \\\\&#x2F;&#x2F;     ))#############\\\n *    -###############\\\\    (oo)    &#x2F;&#x2F;###############-\n *   -#################\\\\  &#x2F; VV \\  &#x2F;&#x2F;#################-\n *  -###################\\\\&#x2F;      \\&#x2F;&#x2F;###################-\n * _#&#x2F;|##########&#x2F;\\######(   &#x2F;\\   )######&#x2F;\\##########|\\#_\n * |&#x2F; |#&#x2F;\\#&#x2F;\\#&#x2F;\\&#x2F;  \\#&#x2F;\\##\\  |  |  &#x2F;##&#x2F;\\#&#x2F;  \\&#x2F;\\#&#x2F;\\#&#x2F;\\#| \\|\n * &#96;  |&#x2F;  V  V  &#96;   V  \\#\\| |  | |&#x2F;#&#x2F;  V   &#39;  V  V  \\|  &#39;\n *    &#96;   &#96;  &#96;      &#96;   &#x2F; | |  | | \\   &#39;      &#39;  &#39;   &#39;\n *                     (  | |  | |  )\n *                    __\\ | |  | | &#x2F;__\n *                   (vvv(VVV)(VVV)vvv)                \n *                        神兽保佑\n *                       代码无BUG!\n *&#x2F;\n\n\n&#x2F;***\n *\n *\n *                                                    __----~~~~~~~~~~~------___\n *                                   .  .   ~~&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;......          __--~ ~~\n *                   -.            \\_|&#x2F;&#x2F;     |||\\\\  ~~~~~~::::... &#x2F;~\n *                ___-&#x3D;&#x3D;_       _-~o~  \\&#x2F;    |||  \\\\            _&#x2F;~~-\n *        __---~~~.&#x3D;&#x3D;~||\\&#x3D;_    -_--~&#x2F;_-~|-   |\\\\   \\\\        _&#x2F;~\n *    _-~~     .&#x3D;~    |  \\\\-_    &#39;-~7  &#x2F;-   &#x2F;  ||    \\      &#x2F;\n *  .~       .~       |   \\\\ -_    &#x2F;  &#x2F;-   &#x2F;   ||      \\   &#x2F;\n * &#x2F;  ____  &#x2F;         |     \\\\ ~-_&#x2F;  &#x2F;|- _&#x2F;   .||       \\ &#x2F;\n * |~~    ~~|--~~~~--_ \\     ~&#x3D;&#x3D;-&#x2F;   | \\~--&#x3D;&#x3D;&#x3D;~~        .\\\n *          &#39;         ~-|      &#x2F;|    |-~\\~~       __--~~\n *                      |-~~-_&#x2F; |    |   ~\\_   _-~            &#x2F;\\\n *                           &#x2F;  \\     \\__   \\&#x2F;~                \\__\n *                       _--~ _&#x2F; | .-~~____--~-&#x2F;                  ~~&#x3D;&#x3D;.\n *                      ((-&gt;&#x2F;~   &#39;.|||&#39; -_|    ~~-&#x2F; ,              . _||\n *                                 -_     ~\\      ~~---l__i__i__i--~~_&#x2F;\n *                                 _-~-__   ~)  \\--______________--~~\n *                               &#x2F;&#x2F;.-~~~-~_--~- |-------~~~~~~~~\n *                                      &#x2F;&#x2F;.-~~~--\\\n *                               神兽保佑\n *                              代码无BUG!\n *&#x2F;\n\n\n&#x2F;***                              _\n *  _._ _..._ .-&#39;,     _.._(&#96;))\n * &#39;-. &#96;     &#39;  &#x2F;-._.-&#39;    &#39;,&#x2F;\n *    )         \\            &#39;.\n *   &#x2F; _    _    |             \\\n *  |  a    a    &#x2F;              |\n *  \\   .-.                     ;\n *   &#39;-(&#39;&#39; ).-&#39;       ,&#39;       ;\n *      &#39;-;           |      .&#39;\n *         \\           \\    &#x2F;\n *         | 7  .__  _.-\\   \\\n *         | |  |  &#96;&#96;&#x2F;  &#x2F;&#96;  &#x2F;\n *        &#x2F;,_|  |   &#x2F;,_&#x2F;   &#x2F;\n *           &#x2F;,_&#x2F;      &#39;&#96;-&#39;\n *&#x2F;\n\n\n&#x2F;***\n **************************************************************\n *                                                            *\n *   .&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-.       *\n *    |                     ______                     |      *\n *    |                  .-&quot;      &quot;-.                  |      *\n *    |                 &#x2F;            \\                 |      *\n *    |     _          |              |          _     |      *\n *    |    ( \\         |,  .-.  .-.  ,|         &#x2F; )    |      *\n *    |     &gt; &quot;&#x3D;._     | )(__&#x2F;  \\__)( |     _.&#x3D;&quot; &lt;     |      *\n *    |    (_&#x2F;&quot;&#x3D;._&quot;&#x3D;._ |&#x2F;     &#x2F;\\     \\| _.&#x3D;&quot;_.&#x3D;&quot;\\_)    |      *\n *    |           &quot;&#x3D;._&quot;(_     ^^     _)&quot;_.&#x3D;&quot;           |      *\n *    |               &quot;&#x3D;\\__|IIIIII|__&#x2F;&#x3D;&quot;               |      *\n *    |              _.&#x3D;&quot;| \\IIIIII&#x2F; |&quot;&#x3D;._              |      *\n *    |    _     _.&#x3D;&quot;_.&#x3D;&quot;\\          &#x2F;&quot;&#x3D;._&quot;&#x3D;._     _    |      *\n *    |   ( \\_.&#x3D;&quot;_.&#x3D;&quot;     &#96;--------&#96;     &quot;&#x3D;._&quot;&#x3D;._&#x2F; )   |      *\n *    |    &gt; _.&#x3D;&quot;                            &quot;&#x3D;._ &lt;    |      *\n *    |   (_&#x2F;                                    \\_)   |      *\n *    |                                                |      *\n *    &#39;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;&#39;      *\n *                                                            *\n *           LASCIATE OGNI SPERANZA, VOI CH&#39;ENTRATE           *\n **************************************************************\n *&#x2F;\n\n\n&#x2F;***\n *                                         ,s555SB@@&amp;                          \n *                                      :9H####@@@@@Xi                        \n *                                     1@@@@@@@@@@@@@@8                       \n *                                   ,8@@@@@@@@@B@@@@@@8                      \n *                                  :B@@@@X3hi8Bs;B@@@@@Ah,                   \n *             ,8i                  r@@@B:     1S ,M@@@@@@#8;                 \n *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@@S                \n *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5               \n *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@@A               \n *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1               \n *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@@B1                \n *               .h8h.,A@@@MXSs,           #@H1:    3ssSSX@1                  \n *               s ,@@@@@@@@@@@@Xhi,       r#@@X1s9M8    .GA981               \n *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@@BS;i;          \n *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS        \n *                s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;,      \n *              :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B,     \n *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8     \n *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:    \n *      s&amp;HA#@@@@@@@@@@@@@@M89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r    \n *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i    \n *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;    \n *  9@@@X:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:    \n *   SH#@B9.rM@@@@@@@@@@@@@B       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5    \n *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@@B    \n *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@@S   \n *              ,,,rHAri1h1rh&amp;@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:  \n *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@@A.\n *\n *\n *    又看源码，看你妹妹呀！\n *&#x2F;\n\n\n&#x2F;***\n *_______________#########_______________________\n *______________############_____________________\n *______________#############____________________\n *_____________##__###########___________________\n *____________###__######_#####__________________\n *____________###_#######___####_________________\n *___________###__##########_####________________\n *__________####__###########_####_______________\n *________#####___###########__#####_____________\n *_______######___###_########___#####___________\n *_______#####___###___########___######_________\n *______######___###__###########___######_______\n *_____######___####_##############__######______\n *____#######__#####################_#######_____\n *____#######__##############################____\n *___#######__######_#################_#######___\n *___#######__######_######_#########___######___\n *___#######____##__######___######_____######___\n *___#######________######____#####_____#####____\n *____######________#####_____#####_____####_____\n *_____#####________####______#####_____###______\n *______#####______;###________###______#________\n *________##_______####________####______________\n *&#x2F;\n\n\n&#x2F;***\n *             ,%%%%%%%%,\n *           ,%%&#x2F;\\%%%%&#x2F;\\%%\n *          ,%%%\\c &quot;&quot; J&#x2F;%%%\n * %.       %%%%&#x2F; o  o \\%%%\n * &#96;%%.     %%%%    _  |%%%\n *  &#96;%%     &#96;%%%%(__Y__)%%&#39;\n *  &#x2F;&#x2F;       ;%%%%&#96;\\-&#x2F;%%%&#39;\n * ((       &#x2F;  &#96;%%%%%%%&#39;\n *  \\\\    .&#39;          |\n *   \\\\  &#x2F;       \\  | |\n *    \\\\&#x2F;         ) | |\n *     \\         &#x2F;_ | |__\n *     (___________))))))) 攻城湿\n *\n *        _       _\n * __   _(_)_   _(_) __ _ _ __\n * \\ \\ &#x2F; &#x2F; \\ \\ &#x2F; &#x2F; |&#x2F; _&#96; |&#39;_ \\\n *  \\ V &#x2F;| |\\ V &#x2F;| | (_| | | | |\n *   \\_&#x2F; |_| \\_&#x2F; |_|\\__,_|_| |_|\n *&#x2F;\n\n\n&#x2F;***\n * https:&#x2F;&#x2F;gold.xitu.io&#x2F;\n *　　　　１１１　　　　　　　　　　　　　　　　　　　　　　　　　１　　　　　　　　　　　\n *　　　　１１１　１１１１１１１１１１１１　　　　　　　　　　　１１１　　　　　　　　　　\n *　　　　１１　　１１１１１１１１１１１１　　　　　　　　　　１１１１１　　　　　　　　　\n *　　　　１１　　１１１　　　　　　　１１　　　　　　　　　１１１１１１１　　　　　　　　\n *　　１１１１　１　１１１１１１１１１１１　　　　　　　　　１１１　１１１１　　　　　　　\n *　　１１１１１１　１１１１１１１１１１１　　　　　　　１１１１　　　１１１１１　　　　　\n *　　１１１１１１　１１　　　　　　　　　　　　　　　１１１１　　　　　１１１１１１　　　\n *　　　　１１　　　１１１１１１１１　１１　　　　１１１１１１１１１１１１１１１１１１　　\n *　　　　１１　　　１１１１１１１１１１１　　　１１１１１１１１１１１１１１１１１１１　　\n *　　　　１１１１１１１１１　１１　　１１　　　　１１　　　　　　１１　　　　　　　　　　\n *　　１１１１１１１１１１１１１１１１１１　　　　　　　　　　　　１１　　　　　　　　　　\n *　　１１１１　　１１１１１１１１１１１１　　　　　　１１１１１１１１１１１１１１　　　　\n *　　１１１１　　１１　　　　１１　　　　　　　　　　１１１１１１１１１１１１１１　　　　\n *　　　　１１　　１１　１１　１１　　１１１　　　　　　１１　　　１１　　１１１　　　　　\n *　　　　１１　　１１　１１　１１　　１１　　　　　　　１１１　　１１　　１１１　　　　　\n *　　　　１１　１１１　１１　１１　　１１　　　　　　　　１１１　１１　１１１　　　　　　\n *　　１１１１　１１１　１１１１１１１１１　　　　　１１　１１１　１１　１１１１１１１　　\n *　　　１１１１１１　　１１１１１１１１１１　　　　１１１１１１１１１１１１１１１１１　　\n *　　　１１　１１１　　　　　　　　　１１１　　　　１１１１１１１１１１１１１１１１１　　\n *&#x2F;\n\n\n&#x2F;***\n * https:&#x2F;&#x2F;www.zhihu.com&#x2F;\n *           _____                    _____                    _____                    _____          \n *          &#x2F;\\    \\                  &#x2F;\\    \\                  &#x2F;\\    \\                  &#x2F;\\    \\         \n *         &#x2F;::\\____\\                &#x2F;::\\    \\                &#x2F;::\\    \\                &#x2F;::\\    \\        \n *        &#x2F;:::&#x2F;    &#x2F;                \\:::\\    \\              &#x2F;::::\\    \\              &#x2F;::::\\    \\       \n *       &#x2F;:::&#x2F;    &#x2F;                  \\:::\\    \\            &#x2F;::::::\\    \\            &#x2F;::::::\\    \\      \n *      &#x2F;:::&#x2F;    &#x2F;                    \\:::\\    \\          &#x2F;:::&#x2F;\\:::\\    \\          &#x2F;:::&#x2F;\\:::\\    \\     \n *     &#x2F;:::&#x2F;____&#x2F;                      \\:::\\    \\        &#x2F;:::&#x2F;__\\:::\\    \\        &#x2F;:::&#x2F;__\\:::\\    \\    \n *    &#x2F;::::\\    \\                      &#x2F;::::\\    \\      &#x2F;::::\\   \\:::\\    \\      &#x2F;::::\\   \\:::\\    \\   \n *   &#x2F;::::::\\    \\   _____    ____    &#x2F;::::::\\    \\    &#x2F;::::::\\   \\:::\\    \\    &#x2F;::::::\\   \\:::\\    \\  \n *  &#x2F;:::&#x2F;\\:::\\    \\ &#x2F;\\    \\  &#x2F;\\   \\  &#x2F;:::&#x2F;\\:::\\    \\  &#x2F;:::&#x2F;\\:::\\   \\:::\\____\\  &#x2F;:::&#x2F;\\:::\\   \\:::\\    \\\n * &#x2F;:::&#x2F;  \\:::\\    &#x2F;::\\____\\&#x2F;::\\   \\&#x2F;:::&#x2F;  \\:::\\____\\&#x2F;:::&#x2F;  \\:::\\   \\:::|    |&#x2F;:::&#x2F;__\\:::\\   \\:::\\____\\\n * \\::&#x2F;    \\:::\\  &#x2F;:::&#x2F;    &#x2F;\\:::\\  &#x2F;:::&#x2F;    \\::&#x2F;    &#x2F;\\::&#x2F;   |::::\\  &#x2F;:::|____|\\:::\\   \\:::\\   \\::&#x2F;    &#x2F;\n *  \\&#x2F;____&#x2F; \\:::\\&#x2F;:::&#x2F;    &#x2F;  \\:::\\&#x2F;:::&#x2F;    &#x2F; \\&#x2F;____&#x2F;  \\&#x2F;____|:::::\\&#x2F;:::&#x2F;    &#x2F;  \\:::\\   \\:::\\   \\&#x2F;____&#x2F;\n *           \\::::::&#x2F;    &#x2F;    \\::::::&#x2F;    &#x2F;                 |:::::::::&#x2F;    &#x2F;    \\:::\\   \\:::\\    \\     \n *            \\::::&#x2F;    &#x2F;      \\::::&#x2F;____&#x2F;                  |::|\\::::&#x2F;    &#x2F;      \\:::\\   \\:::\\____\\    \n *            &#x2F;:::&#x2F;    &#x2F;        \\:::\\    \\                  |::| \\::&#x2F;____&#x2F;        \\:::\\   \\::&#x2F;    &#x2F;    \n *           &#x2F;:::&#x2F;    &#x2F;          \\:::\\    \\                 |::|  ~|               \\:::\\   \\&#x2F;____&#x2F;     \n *          &#x2F;:::&#x2F;    &#x2F;            \\:::\\    \\                |::|   |                \\:::\\    \\         \n *         &#x2F;:::&#x2F;    &#x2F;              \\:::\\____\\               \\::|   |                 \\:::\\____\\        \n *         \\::&#x2F;    &#x2F;                \\::&#x2F;    &#x2F;                \\:|   |                  \\::&#x2F;    &#x2F;        \n *          \\&#x2F;____&#x2F;                  \\&#x2F;____&#x2F;                  \\|___|                   \\&#x2F;____&#x2F;         \n *&#x2F;\n\n\n&#x2F;***\n * http:&#x2F;&#x2F;www.freebuf.com&#x2F;\n *           _.._        ,------------.\n *        ,&#39;      &#96;.    ( We want you! )\n *       &#x2F;  __) __&#96; \\    &#96;-,----------&#39;\n *      (  (&#96;-&#96;(-&#39;)  ) _.-&#39;\n *      &#x2F;)  \\  &#x3D; &#x2F;  (\n *     &#x2F;&#39;    |--&#39; .  \\\n *    (  ,---|  &#96;-.)__&#96;\n *     )(  &#96;-.,--&#39;   _&#96;-.\n *    &#39;&#x2F;,&#39;          (  Uu&quot;,\n *     (_       ,    &#96;&#x2F;,-&#39; )\n *     &#96;.__,  : &#96;-&#39;&#x2F;  &#x2F;&#96;--&#39;\n *       |     &#96;--&#39;  |\n *       &#96;   &#96;-._   &#x2F;\n *        \\        (\n *        &#x2F;\\ .      \\.  freebuf\n *       &#x2F; |&#96; \\     ,-\\\n *      &#x2F;  \\| .)   &#x2F;   \\\n *     ( ,&#39;|\\    ,&#39;     :\n *     | \\,&#96;.&#96;--&quot;&#x2F;      &#125;\n *     &#96;,&#39;    \\  |,&#39;    &#x2F;\n *    &#x2F; &quot;-._   &#96;-&#x2F;      |\n *    &quot;-.   &quot;-.,&#39;|     ;\n *   &#x2F;        _&#x2F;[&quot;---&#39;&quot;&quot;]\n *  :        &#x2F;  |&quot;-     &#39;\n *  &#39;           |      &#x2F;\n *              &#96;      |\n *&#x2F;\n\n\n&#x2F;***\n * https:&#x2F;&#x2F;campus.alibaba.com&#x2F;\n *                                 &#96;:::::::::::,\n *                             &#96;::;:::::::;:::::::,  &#96;\n *                          &#96;::;;:::::::@@@@;:::::::&#96;\n *                        ,:::::::::::::@    #@&#39;:::::&#96;\n *                      :::::::::::::::&#39;@@      @;::::\n *                    ::::::::::::&#39;@@@@&#39;&#96;&#96;&#96;      .+:::&#96;\n *                  ::::::::::;@@@#.              ,:::,\n *                .::::::::+@#@&#96;                   ::::\n *               :::::::+@@&#39;                       ::::\n *             &#96;:::::&#39;@@:                         &#96;:::.\n *            ,::::@@:  &#96;                         ::::\n *           ;::::::@                            .:::;\n *          :;:::::;@&#96;        &#96;                  :::;\n *         :::::::::@&#96;        @                 ;::::\n *        :::::::::#&#96;          @&#96;              ,::::\n *       :::::::::@&#96;         +@ @             .::::&#96;\n *      .::::::&#39;@@&#96;       &#96;@@&#39;  @             ::::,\n *      :::::::++@@@@@@@@@@.                 ::::;\n *     ;:::::::+,   &#96;..&#96;                    :::::\n *    ,::::::::&#39;,                          :::::\n *    :::::::::+,                         :::::&#96;\n *   :::::::::+@.                        ,::::.&#96;                     &#96;,\n *   ::::::;;@+                         .::;::                     &#96;;\n *  :::::::@@                          &#96;:::;:                   &#96;::&#96;&#96;\n *  ::::::#@                           ;::::                  .::&#96;\n *  :::::;@                           :::::&#96;               .;::&#96;\n *  :::::@                           &#96;:;:::            &#96;::::;\n *  :::::#                           :::::.        &#96;,;:::::\n *  ::::::                    &#96;      ::::::,.,::::::::::.\n *  ,::::::&#96;              .::        ::::::::::::::::;&#96;\n *   ;::::::::,&#96;&#96;&#96;&#96;.,:::::,          ::::::::::::::.\n *    :::::::::::::::::: &#96;           &#96;::::::::::&#96;\n *     &#96;::::::::::::,                  .:::.\n *         &#96;..&#96;\n *&#x2F;\n\n\n&#x2F;***\n * http:&#x2F;&#x2F;www.flvcd.com&#x2F;\n *  .--,       .--,\n * ( (  \\.---.&#x2F;  ) )\n *  &#39;.__&#x2F;o   o\\__.&#39;\n *     &#123;&#x3D;  ^  &#x3D;&#125;\n *      &gt;  -  &lt;\n *     &#x2F;       \\\n *    &#x2F;&#x2F;       \\\\\n *   &#x2F;&#x2F;|   .   |\\\\\n *   &quot;&#39;\\       &#x2F;&#39;&quot;_.-~^&#96;&#39;-.\n *      \\  _  &#x2F;--&#39;         &#96;\n *    ___)( )(___\n *   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。\n *&#x2F;\n\n\n&#x2F;***\n * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂\n * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　\n * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂\n * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂\n * 　　　頂頂　　　頂頂　　　　　　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　　　　　頂頂頂　\n * 　　　頂頂　　　　　　頂頂　頂頂　頂頂\n * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂\n * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂\n *&#x2F;\n\n\n&#x2F;***\n * ░░░░░░░░░░░░░░░░░░░░░░░░▄░░\n * ░░░░░░░░░▐█░░░░░░░░░░░▄▀▒▌░\n * ░░░░░░░░▐▀▒█░░░░░░░░▄▀▒▒▒▐\n * ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐\n * ░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐\n * ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌\n * ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒\n * ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐\n * ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄\n * ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒\n * ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒\n * 单身狗就这样默默地看着你，一句话也不说。\n *&#x2F;\n\n\n&#x2F;***\n *                   &#x2F;88888888888888888888888888\\\n *                   |88888888888888888888888888&#x2F;\n *                    |~~____~~~~~~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;|\n *                   &#x2F; \\_________&#x2F;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\\\n *                  &#x2F;  |              \\         \\\n *                 &#x2F;   |  88    88     \\         \\\n *                &#x2F;    |  88    88      \\         \\\n *               &#x2F;    &#x2F;                  \\        |\n *              &#x2F;     |   ________        \\       |\n *              \\     |   \\______&#x2F;        &#x2F;       |\n *   &#x2F;&quot;\\         \\     \\____________     &#x2F;        |\n *   | |__________\\_        |  |        &#x2F;        &#x2F;\n * &#x2F;&quot;&quot;&quot;&quot;\\           \\_------&#39;  &#39;-------&#x2F;       --\n * \\____&#x2F;,___________\\                 -------&#x2F;\n * ------*            |                    \\\n *   ||               |                     \\\n *   ||               |                 ^    \\\n *   ||               |                | \\    \\\n *   ||               |                |  \\    \\\n *   ||               |                |   \\    \\\n *   \\|              &#x2F;                &#x2F;&quot;&quot;&quot;\\&#x2F;    &#x2F;\n *      -------------                |    |    &#x2F;\n *      |\\--_                        \\____&#x2F;___&#x2F;\n *      |   |\\-_                       |\n *      |   |   \\_                     |\n *      |   |     \\                    |\n *      |   |      \\_                  |\n *      |   |        ----___           |\n *      |   |               \\----------|\n *      &#x2F;   |                     |     ----------&quot;&quot;\\\n * &#x2F;&quot;\\--&quot;--_|                     |               |  \\\n * |_______&#x2F;                      \\______________&#x2F;    )\n *                                               \\___&#x2F;\n *&#x2F;\n\n\n&#x2F;***\n *                        d*##$.\n *  zP&quot;&quot;&quot;&quot;&quot;$e.           $&quot;    $o\n * 4$       &#39;$          $&quot;      $\n * &#39;$        &#39;$        J$       $F\n *  &#39;b        $k       $&gt;       $\n *   $k        $r     J$       d$\n *   &#39;$         $     $&quot;       $~\n *    &#39;$        &quot;$   &#39;$E       $\n *     $         $L   $&quot;      $F ...\n *      $.       4B   $      $$$*&quot;&quot;&quot;*b\n *      &#39;$        $.  $$     $$      $F\n *       &quot;$       R$  $F     $&quot;      $\n *        $k      ?$ u*     dF      .$\n *        ^$.      $$&quot;     z$      u$$$$e\n *         #$b             $E.dW@e$&quot;    ?$\n *          #$           .o$$# d$$$$c    ?F\n *           $      .d$$#&quot; . zo$&gt;   #$r .uF\n *           $L .u$*&quot;      $&amp;$$$k   .$$d$$F\n *            $$&quot;            &quot;&quot;^&quot;$$$P&quot;$P9$\n *           JP              .o$$$$u:$P $$\n *           $          ..ue$&quot;      &quot;&quot;  $&quot;\n *          d$          $F              $\n *          $$     ....udE             4B\n *           #$    &quot;&quot;&quot;&quot;&#96; $r            @$\n *            ^$L        &#39;$            $F\n *              RN        4N           $\n *               *$b                  d$\n *                $$k                 $F\n *                 $$b                $F\n *                  $&quot;&quot;               $F\n *                  &#39;$                $\n *                   $L               $\n *                   &#39;$               $\n *                    $               $\n *&#x2F;\n\n\n&#x2F;***\n *              ,----------------,              ,---------,\n *         ,-----------------------,          ,&quot;        ,&quot;|\n *       ,&quot;                      ,&quot;|        ,&quot;        ,&quot;  |\n *      +-----------------------+  |      ,&quot;        ,&quot;    |\n *      |  .-----------------.  |  |     +---------+      |\n *      |  |                 |  |  |     | -&#x3D;&#x3D;----&#39;|      |\n *      |  |  I LOVE DOS!    |  |  |     |         |      |\n *      |  |  Bad command or |  |  |&#x2F;----|&#96;---&#x3D;    |      |\n *      |  |  C:\\&gt;_          |  |  |   ,&#x2F;|&#x3D;&#x3D;&#x3D;&#x3D; ooo |      ;\n *      |  |                 |  |  |  &#x2F;&#x2F; |(((( [33]|    ,&quot;\n *      |  &#96;-----------------&#39;  |,&quot; .;&#39;| |((((     |  ,&quot;\n *      +-----------------------+  ;;  | |         |,&quot;\n *         &#x2F;_)______________(_&#x2F;  &#x2F;&#x2F;&#39;   | +---------+\n *    ___________________________&#x2F;___  &#96;,\n *   &#x2F;  oooooooooooooooo  .o.  oooo &#x2F;,   \\,&quot;-----------\n *  &#x2F; &#x3D;&#x3D;ooooooooooooooo&#x3D;&#x3D;.o.  ooo&#x3D; &#x2F;&#x2F;   ,&#96;\\--&#123;)B     ,&quot;\n * &#x2F;_&#x3D;&#x3D;__&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;__&#x3D;&#x3D;_ooo__ooo&#x3D;_&#x2F;&#39;   &#x2F;___________,&quot;\n *\n *&#x2F;\n\n\n&#x2F;***\n *                 .-~~~~~~~~~-._       _.-~~~~~~~~~-.\n *             __.&#39;              ~.   .~              &#96;.__\n *           .&#39;&#x2F;&#x2F;                  \\.&#x2F;                  \\\\&#96;.\n *         .&#39;&#x2F;&#x2F;                     |                     \\\\&#96;.\n *       .&#39;&#x2F;&#x2F; .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._     |     _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\\\&#96;.\n *     .&#39;&#x2F;&#x2F;.-&quot;                 &#96;-.  |  .-&#39;                 &quot;-.\\\\&#96;.\n *   .&#39;&#x2F;&#x2F;______.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-..   \\ | &#x2F;   ..-&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;.______\\\\&#96;.\n * .&#39;______________________________\\|&#x2F;______________________________&#96;.\n *\n *&#x2F;\n\n\n&#x2F;***             无可奉告 一颗赛艇\n *  uJjYJYYLLv7r7vJJ5kqSFFFUUjJ7rrr7LLYLJLJ7\n *  JuJujuYLrvuEM@@@B@@@B@B@B@@@MG5Y7vLjYjJL\n *  JYjYJvr7XM@BB8GOOE8ZEEO8GqM8OBBBMu77LLJ7\n *  LJLY7ru@@@BOZ8O8NXFFuSkSu25X0OFZ8MZJ;vLv\n *  YvL7i5@BM8OGGqk22uvriiriii;r7LuSZXEMXrvr\n *  vv7iU@BMNkF1uY7v7rr;iiii:i:i:ii7JEPNBPir\n *  L7iL@BM8Xjuujvv77rr;ri;i;:iiiii:iLXFOBJ:\n *  7ri@B@MOFuUS2Y7L7777rii;:::::i:iirjPG@O:\n *  7:1B@BBOPjXXSJvrL7rr7iiii:i::::i;iv5MBB,\n *  r:0@BBM8SFPX2Y77rri::iirri:::::iii75O@G.\n *  7:SB@BBGqXPk0122UJL::i::r:::i:i;i:v2@Bk.\n *  ri:MB@BBEqEMGq2JLLL1u7.iX51u77LF27iSB@r,\n *  ri,v@B@MB8@qqNEqN1u:5B8BOFE0S7ii7qMB@F::\n *  ii,J80Eq1MZkqPPX5YkPE@B@iXPE52j7:vBjE7::\n *  ii:7MSqkS0PvLv7rrii0@L.Z1iLr::ir:rO,vi::\n *  ii::EZXPSkquLvii:iF@N:.,BUi7ri,::UY;r:::\n *  i::.2ONXqkPXS5FUUEOPP;..iSPXkjLYLLrr:::,\n *  :::,iMXNP0NPLriiLGZ@BB1P87;JuL7r:7ri:::,\n *  :::,.UGqNX0EZF2uUjUuULr:::,:7uuvv77::::.\n *  ::::..5OXqXNJ50NSY;i:.,,,:i77Yvr;v;,,::.\n *  :::,:.jOEPqPJiqBMMMO8NqP0SYLJriirv:.:,:.\n *  ,:,,,.,Zq0P0X7vPFqF1ujLv7r:irrr7j7.,,::.\n *  ,,,....0qk0080v75ujLLv7ri:i:rvj2J...,,,.\n *  ......8@UXqZEMNvJjr;ii::,:::7uuv...,.,,.\n *  .....B@BOvX88GMGk52vririiirJS1i.......,.\n *  .JEMB@B@BMvL0MOMMMO8PE8GPqSk2L:.........\n *  @B@@@B@M@B@L:7PGBOO8MOMOEP0Xri@B@Mk7,...\n *  B@B@BBMBB@B@0::rJP8MO0uvvu7..,B@B@B@B@Z7\n *  MMBM@BBB@B@B@Br:i,..:Lur:....7@OMMBM@B@@\n *  8OOMMMOMMMMBB@B:....,PZENNi..JBOZ8GMOOOO\n *&#x2F;\n\n&#x2F;***　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　\n *　　　　　　　　　瓦瓦　　　　　　　　　　　　十　　　　　　　　　　　　　\n *　　　　　　　　十齱龠己　　　　　　　　　亅瓦車己　　　　　　　　　　　　\n *　　　　　　　　乙龍龠毋日丶　　　　　　丶乙己毋毋丶　　　　　　　　　　　\n *　　　　　　　　十龠馬鬼車瓦　　　　　　己十瓦毋毋　　　　　　　　　　　　\n *　　　　　　　　　鬼馬龠馬龠十　　　　己己毋車毋瓦　　　　　　　　　　　　\n *　　　　　　　　　毋龠龠龍龠鬼乙丶丶乙車乙毋鬼車己　　　　　　　　　　　　\n *　　　　　　　　　乙龠龍龍鬼龍瓦　十瓦毋乙瓦龠瓦亅　　　　　　　　　　　　\n *　　　　　　　　　　馬齱龍馬鬼十丶日己己己毋車乙丶　　　　　　　　　　　　\n *　　　　　　　　　　己齱馬鬼車十十毋日乙己己乙乙　　　　　　　　　　　　　\n *　　　　　　　　　　　車馬齱齱日乙毋瓦己乙瓦日亅　　　　　　　　　　　　　\n *　　　　　　　　　　　亅車齺龖瓦乙車龖龍乙乙十　　　　　　　　　　　　　　\n *　　　　　　　　　　　　日龠龠十亅車龍毋十十　　　　　　　　　　　　　　　\n *　　　　　　　　　　　　日毋己亅　己己十亅亅　　　　　　　　　　　　　　　\n *　　　　　　　　　　　丶己十十乙　　丶丶丶丶丶　　　　　　　　　　　　　　\n *　　　　　　　　　　　亅己十龍龖瓦　　丶　丶　乙十　　　　　　　　　　　　\n *　　　　　　　　　　　亅己十龠龖毋　丶丶　　丶己鬼鬼瓦亅　　　　　　　　　\n *　　　　　　　　　　　十日十十日亅丶亅丶　丶十日毋鬼馬馬車乙　　　　　　　\n *　　　　　　　　　　　十日乙十亅亅亅丶　　十乙己毋鬼鬼鬼龍齺馬乙　　　　　\n *　　　　　　　　　　　丶瓦己乙十十亅丶亅乙乙乙己毋鬼鬼鬼龍齱齺齺鬼十　　　\n *　　　　　　　　　　　　乙乙十十十亅乙瓦瓦己日瓦毋鬼鬼龠齱齱龍龍齱齱毋丶　\n *　　　　　　　　　　　　亅十十十十乙瓦車毋瓦瓦日車馬龠龍龍龍龍龍龠龠龠馬亅\n *　　　　　　　　　　　　　十十十十己毋車瓦瓦瓦瓦鬼馬龠龍龠龠龍龠龠龠馬龠車\n *　　　　　　　　　　　　　　亅十十日毋瓦日日瓦鬼鬼鬼龠龠馬馬龠龍龍龠馬馬車\n *　　　　　　　　　　　　　　亅亅亅乙瓦瓦毋車車車馬龍龠鬼鬼馬龠龍龍龠馬馬鬼\n *　　　　　　　　　　　　丶丶乙亅亅乙車鬼鬼鬼毋車龍龍龠鬼馬馬龠龍齱齱龍馬鬼\n *　　　　　　　　　　　亅己十十己十日鬼鬼車瓦毋龠龍龠馬馬龠龠龠齱齺齺齱龠鬼\n *　　　　　　　　　　　　亅乙乙乙十車馬車毋馬齱齱龍龠龠龠馬龠龍齱龍龠龠鬼瓦\n *　　　　　　　　　　　　　　　　丶毋龠鬼車瓦車馬龠龍龠龠龍齱齱龠馬馬鬼毋日\n *　　　　　　　　　　　　　　　　十乙己日十　　丶己鬼龍齱齺齱龍馬馬馬車毋己\n *　　　　　　　　　　　　　　丶十己乙亅丶　　　　　　亅瓦馬龠龍龠龠馬毋瓦乙\n *　　　　　　　　　　　　　丶十十乙亅十　　　　　　　　亅己瓦車馬龠鬼車瓦乙\n *　　　　　　　　　　　　　丶十乙十十丶　　　　　　　　　丶丶亅十瓦鬼車瓦己\n *　　　　　　　　　　　　　　丶亅亅丶　　　　　　　　　　　　　　　亅日瓦日\n *　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　丶\n *&#x2F;\n\n/***                                                                          \n *          .,:,,,                                        .::,,,::.          \n *        .::::,,;;,                                  .,;;:,,....:i:         \n *        :i,.::::,;i:.      ....,,:::::::::,....   .;i:,.  ......;i.        \n *        :;..:::;::::i;,,:::;:,,,,,,,,,,..,.,,:::iri:. .,:irsr:,.;i.        \n *        ;;..,::::;;;;ri,,,.                    ..,,:;s1s1ssrr;,.;r,        \n *        :;. ,::;ii;:,     . ...................     .;iirri;;;,,;i,        \n *        ,i. .;ri:.   ... ............................  .,,:;:,,,;i:        \n *        :s,.;r:... ....................................... .::;::s;        \n *        ,1r::. .............,,,.,,:,,........................,;iir;        \n *        ,s;...........     ..::.,;:,,.          ...............,;1s        \n *       :i,..,.              .,:,,::,.          .......... .......;1,       \n *      ir,....:rrssr;:,       ,,.,::.     .r5S9989398G95hr;. ....,.:s,      \n *     ;r,..,s9855513XHAG3i   .,,,,,,,.  ,S931,.,,.;s;s&amp;BHHA8s.,..,..:r:     \n *    :r;..rGGh,  :SAG;;G@BS:.,,,,,,,,,.r83:      hHH1sXMBHHHM3..,,,,.ir.    \n *   ,si,.1GS,   sBMAAX&amp;MBMB5,,,,,,:,,.:&amp;8       3@HXHBMBHBBH#X,.,,,,,,rr    \n *   ;1:,,SH:   .A@&amp;&amp;B#&amp;8H#BS,,,,,,,,,.,5XS,     3@MHABM&amp;59M#As..,,,,:,is,   \n *  .rr,,,;9&amp;1   hBHHBB&amp;8AMGr,,,,,,,,,,,:h&amp;&amp;9s;   r9&amp;BMHBHMB9:  . .,,,,;ri.  \n *  :1:....:5&amp;XSi;r8BMBHHA9r:,......,,,,:ii19GG88899XHHH&amp;GSr.      ...,:rs.  \n *  ;s.     .:sS8G8GG889hi.        ....,,:;:,.:irssrriii:,.        ...,,i1,  \n *  ;1,         ..,....,,isssi;,        .,,.                      ....,.i1,  \n *  ;h:               i9HHBMBBHAX9:         .                     ...,,,rs,  \n *  ,1i..            :A#MBBBBMHB##s                             ....,,,;si.  \n *  .r1,..        ,..;3BMBBBHBB#Bh.     ..                    ....,,,,,i1;   \n *   :h;..       .,..;,1XBMMMMBXs,.,, .. :: ,.               ....,,,,,,ss.   \n *    ih: ..    .;;;, ;;:s58A3i,..    ,. ,.:,,.             ...,,,,,:,s1,    \n *    .s1,....   .,;sh,  ,iSAXs;.    ,.  ,,.i85            ...,,,,,,:i1;     \n *     .rh: ...     rXG9XBBM#M#MHAX3hss13&amp;&amp;HHXr         .....,,,,,,,ih;      \n *      .s5: .....    i598X&amp;&amp;A&amp;AAAAAA&amp;XG851r:       ........,,,,:,,sh;       \n *      . ihr, ...  .         ..                    ........,,,,,;11:.       \n *         ,s1i. ...  ..,,,..,,,.,,.,,.,..       ........,,.,,.;s5i.         \n *          .:s1r,......................       ..............;shs,           \n *          . .:shr:.  ....                 ..............,ishs.             \n *              .,issr;,... ...........................,is1s;.               \n *                 .,is1si;:,....................,:;ir1sr;,                  \n *                    ..:isssssrrii;::::::;;iirsssssr;:..                    \n *                         .,::iiirsssssssssrri;;:.                      \n */\n \n/***\n *               ii.                                         ;9ABH,          \n *              SA391,                                    .r9GG35&amp;G          \n *              &amp;#ii13Gh;                               i3X31i;:,rB1         \n *              iMs,:,i5895,                         .5G91:,:;:s1:8A         \n *               33::::,,;5G5,                     ,58Si,,:::,sHX;iH1        \n *                Sr.,:;rs13BBX35hh11511h5Shhh5S3GAXS:.,,::,,1AG3i,GG        \n *                .G51S511sr;;iiiishS8G89Shsrrsh59S;.,,,,,..5A85Si,h8        \n *               :SB9s:,............................,,,.,,,SASh53h,1G.       \n *            .r18S;..,,,,,,,,,,,,,,,,,,,,,,,,,,,,,....,,.1H315199,rX,       \n *          ;S89s,..,,,,,,,,,,,,,,,,,,,,,,,....,,.......,,,;r1ShS8,;Xi       \n *        i55s:.........,,,,,,,,,,,,,,,,.,,,......,.....,,....r9&amp;5.:X1       \n *       59;.....,.     .,,,,,,,,,,,...        .............,..:1;.:&amp;s       \n *      s8,..;53S5S3s.   .,,,,,,,.,..      i15S5h1:.........,,,..,,:99       \n *      93.:39s:rSGB@A;  ..,,,,.....    .SG3hhh9G&amp;BGi..,,,,,,,,,,,,.,83      \n *      G5.G8  9#@@@@@X. .,,,,,,.....  iA9,.S&amp;B###@@Mr...,,,,,,,,..,.;Xh     \n *      Gs.X8 S@@@@@@@B:..,,,,,,,,,,. rA1 ,A@@@@@@@@@H:........,,,,,,.iX:    \n *     ;9. ,8A#@@@@@@#5,.,,,,,,,,,... 9A. 8@@@@@@@@@@M;    ....,,,,,,,,S8    \n *     X3    iS8XAHH8s.,,,,,,,,,,...,..58hH@@@@@@@@@Hs       ...,,,,,,,:Gs   \n *    r8,        ,,,...,,,,,,,,,,.....  ,h8XABMMHX3r.          .,,,,,,,.rX:  \n *   :9, .    .:,..,:;;;::,.,,,,,..          .,,.               ..,,,,,,.59  \n *  .Si      ,:.i8HBMMMMMB&amp;5,....                    .            .,,,,,.sMr\n *  SS       :: h@@@@@@@@@@#; .                     ...  .         ..,,,,iM5\n *  91  .    ;:.,1&amp;@@@@@@MXs.                            .          .,,:,:&amp;S\n *  hS ....  .:;,,,i3MMS1;..,..... .  .     ...                     ..,:,.99\n *  ,8; ..... .,:,..,8Ms:;,,,...                                     .,::.83\n *   s&amp;: ....  .sS553B@@HX3s;,.    .,;13h.                            .:::&amp;1\n *    SXr  .  ...;s3G99XA&amp;X88Shss11155hi.                             ,;:h&amp;,\n *     iH8:  . ..   ,;iiii;,::,,,,,.                                 .;irHA  \n *      ,8X5;   .     .......                                       ,;iihS8Gi\n *         1831,                                                 .,;irrrrrs&amp;@\n *           ;5A8r.                                            .:;iiiiirrss1H\n *             :X@H3s.......                                .,:;iii;iiiiirsrh\n *              r#h:;,...,,.. .,,:;;;;;:::,...              .:;;;;;;iiiirrss1\n *             ,M8 ..,....,.....,,::::::,,...         .     .,;;;iiiiiirss11h\n *             8B;.,,,,,,,.,.....          .           ..   .:;;;;iirrsss111h\n *            i@5,:::,,,,,,,,.... .                   . .:::;;;;;irrrss111111\n *            9Bi,:,,,,......                        ..r91;;;;;iirrsss1ss1111\n */\n \n \n/***                                                                    \n *            .,,       .,:;;iiiiiiiii;;:,,.     .,,                   \n *          rGB##HS,.;iirrrrriiiiiiiiiirrrrri;,s&amp;##MAS,                \n *         r5s;:r3AH5iiiii;;;;;;;;;;;;;;;;iiirXHGSsiih1,               \n *            .;i;;s91;;;;;;::::::::::::;;;;iS5;;;ii:                  \n *          :rsriii;;r::::::::::::::::::::::;;,;;iiirsi,               \n *       .,iri;;::::;;;;;;::,,,,,,,,,,,,,..,,;;;;;;;;iiri,,.           \n *    ,9BM&amp;,            .,:;;:,,,,,,,,,,,hXA8:            ..,,,.       \n *   ,;&amp;@@#r:;;;;;::::,,.   ,r,,,,,,,,,,iA@@@s,,:::;;;::,,.   .;.      \n *    :ih1iii;;;;;::::;;;;;;;:,,,,,,,,,,;i55r;;;;;;;;;iiirrrr,..       \n *   .ir;;iiiiiiiiii;;;;::::::,,,,,,,:::::,,:;;;iiiiiiiiiiiiri         \n *   iriiiiiiiiiiiiiiii;;;::::::::::::::::;;;iiiiiiiiiiiiiiiir;        \n *  ,riii;;;;;;;;;;;;;:::::::::::::::::::::::;;;;;;;;;;;;;;iiir.       \n *  iri;;;::::,,,,,,,,,,:::::::::::::::::::::::::,::,,::::;;iir:       \n * .rii;;::::,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,::::;;iri       \n * ,rii;;;::,,,,,,,,,,,,,:::::::::::,:::::,,,,,,,,,,,,,:::;;;iir.      \n * ,rii;;i::,,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,,::i;;iir.      \n * ,rii;;r::,,,,,,,,,,,,,:,:::::,:,:::::::,,,,,,,,,,,,,::;r;;iir.      \n * .rii;;rr,:,,,,,,,,,,,,,,:::::::::::::::,,,,,,,,,,,,,:,si;;iri       \n *  ;rii;:1i,,,,,,,,,,,,,,,,,,:::::::::,,,,,,,,,,,,,,,:,ss:;iir:       \n *  .rii;;;5r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,sh:;;iri        \n *   ;rii;:;51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.:hh:;;iir,        \n *    irii;::hSr,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,sSs:;;iir:         \n *     irii;;:iSSs:.,,,,,,,,,,,,,,,,,,,,,,,,,,,..:135;:;;iir:          \n *      ;rii;;:,r535r:...,,,,,,,,,,,,,,,,,,..,;sS35i,;;iirr:           \n *       :rrii;;:,;1S3Shs;:,............,:is533Ss:,;;;iiri,            \n *        .;rrii;;;:,;rhS393S55hh11hh5S3393Shr:,:;;;iirr:              \n *          .;rriii;;;::,:;is1h555555h1si;:,::;;;iirri:.               \n *            .:irrrii;;;;;:::,,,,,,,,:::;;;;iiirrr;,                  \n *               .:irrrriiiiii;;;;;;;;iiiiiirrrr;,.                    \n *                  .,:;iirrrrrrrrrrrrrrrrri;:.                        \n *                        ..,:::;;;;:::,,.                             \n */                                                                     \n \n \n/***\n * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐\n * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐\n * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘\n * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐\n * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │\n * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤\n * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │\n * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │\n * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#39;│ Enter  │               │ 4 │ 5 │ 6 │   │\n * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤\n * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │\n * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││\n * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│\n * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘\n */\n \n \n/***\n *                    _ooOoo_\n *                   o8888888o\n *                   88&quot; . &quot;88\n *                   (| -_- |)\n *                    O\\ = /O\n *                ____/`---&#39;\\____\n *              .   &#39; \\\\| |// `.\n *               / \\\\||| : |||// \\\n *             / _||||| -:- |||||- \\\n *               | | \\\\\\ - /// | |\n *             | \\_| &#39;&#39;\\---/&#39;&#39; | |\n *              \\ .-\\__ `-` ___/-. /\n *           ___`. .&#39; /--.--\\ `. . __\n *        .&quot;&quot; &#39;&lt; `.___\\_&lt;|&gt;_/___.&#39; &gt;&#39;&quot;&quot;.\n *       | | : `- \\`.;`\\ _ /`;.`/ - ` : | |\n *         \\ \\ `-. \\_ __\\ /__ _/ .-` / /\n * ======`-.____`-.___\\_____/___.-`____.-&#39;======\n *                    `=---=&#39;\n *\n * .............................................\n *          佛祖保佑             永无BUG\n */\n \n \n/***\n *  佛曰:\n *          写字楼里写字间，写字间里程序员；\n *          程序人员写程序，又拿程序换酒钱。\n *          酒醒只在网上坐，酒醉还来网下眠；\n *          酒醉酒醒日复日，网上网下年复年。\n *          但愿老死电脑间，不愿鞠躬老板前；\n *          奔驰宝马贵者趣，公交自行程序员。\n *          别人笑我忒疯癫，我笑自己命太贱；\n *          不见满街漂亮妹，哪个归得程序员？\n */\n \n \n/***\n * _ooOoo_\n * o8888888o\n * 88&quot; . &quot;88\n * (| -_- |)\n *  O\\ = /O\n * ___/`---&#39;\\____\n * .   &#39; \\\\| |// `.\n * / \\\\||| : |||// \\\n * / _||||| -:- |||||- \\\n * | | \\\\\\ - /// | |\n * | \\_| &#39;&#39;\\---/&#39;&#39; | |\n * \\ .-\\__ `-` ___/-. /\n * ___`. .&#39; /--.--\\ `. . __\n * .&quot;&quot; &#39;&lt; `.___\\_&lt;|&gt;_/___.&#39; &gt;&#39;&quot;&quot;.\n * | | : `- \\`.;`\\ _ /`;.`/ - ` : | |\n * \\ \\ `-. \\_ __\\ /__ _/ .-` / /\n * ======`-.____`-.___\\_____/___.-`____.-&#39;======\n * `=---=&#39;\n *          .............................................\n *           佛曰：bug泛滥，我已瘫痪！\n */\n \n \n/***\n *\n *   █████▒█    ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗\n * ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝\n * ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗\n * ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║\n * ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝\n *  ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝\n *  ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░\n *  ░ ░    ░░░ ░ ░ ░        ░ ░░ ░\n *           ░     ░ ░      ░  ░\n */\n \n \n/***\n *                    .::::.\n *                  .::::::::.\n *                 :::::::::::  FUCK YOU\n *             ..:::::::::::&#39;\n *           &#39;::::::::::::&#39;\n *             .::::::::::\n *        &#39;::::::::::::::..\n *             ..::::::::::::.\n *           ``::::::::::::::::\n *            ::::``:::::::::&#39;        .:::.\n *           ::::&#39;   &#39;:::::&#39;       .::::::::.\n *         .::::&#39;      ::::     .:::::::&#39;::::.\n *        .:::&#39;       :::::  .:::::::::&#39; &#39;:::::.\n *       .::&#39;        :::::.:::::::::&#39;      &#39;:::::.\n *      .::&#39;         ::::::::::::::&#39;         ``::::.\n *  ...:::           ::::::::::::&#39;              ``::.\n * ```` &#39;:.          &#39;:::::::::&#39;                  ::::..\n *                    &#39;.:::::&#39;                    &#39;:&#39;````..\n */\n \n \n/***\n *      ┌─┐       ┌─┐\n *   ┌──┘ ┴───────┘ ┴──┐\n *   │                 │\n *   │       ───       │\n *   │  ─┬┘       └┬─  │\n *   │                 │\n *   │       ─┴─       │\n *   │                 │\n *   └───┐         ┌───┘\n *       │         │\n *       │         │\n *       │         │\n *       │         └──────────────┐\n *       │                        │\n *       │                        ├─┐\n *       │                        ┌─┘\n *       │                        │\n *       └─┐  ┐  ┌───────┬──┐  ┌──┘\n *         │ ─┤ ─┤       │ ─┤ ─┤\n *         └──┴──┘       └──┴──┘\n *                神兽保佑\n *               代码无BUG!\n */\n \n \n/***\n *      ┌─┐       ┌─┐\n *   ┌──┘ ┴───────┘ ┴──┐\n *   │                 │\n *   │       ───       │\n *   │   &gt;        &lt;    │\n *   │                 │\n *   │   ...  ⌒  ...   │\n *   │                 │\n *   └───┐         ┌───┘\n *       │         │\n *       │         │\n *       │         │\n *       │         └──────────────┐\n *       │                        │\n *       │                        ├─┐\n *       │                        ┌─┘\n *       │                        │\n *       └─┐  ┐  ┌───────┬──┐  ┌──┘\n *         │ ─┤ ─┤       │ ─┤ ─┤\n *         └──┴──┘       └──┴──┘\n *                神兽保佑\n *               代码无BUG!\n */\n/***\n *      ┌─┐       ┌─┐ + +\n *   ┌──┘ ┴───────┘ ┴──┐++\n *   │                 │\n *   │       ───       │++ + + +\n *   ███████───███████ │+\n *   │                 │+\n *   │       ─┴─       │\n *   │                 │\n *   └───┐         ┌───┘\n *       │         │\n *       │         │   + +\n *       │         │\n *       │         └──────────────┐\n *       │                        │\n *       │                        ├─┐\n *       │                        ┌─┘\n *       │                        │\n *       └─┐  ┐  ┌───────┬──┐  ┌──┘  + + + +\n *         │ ─┤ ─┤       │ ─┤ ─┤\n *         └──┴──┘       └──┴──┘  + + + +\n *                神兽保佑\n *               代码无BUG!\n */\n/***\n *                  ___====-_  _-====___\n *            _--^^^#####//      \\\\#####^^^--_\n *         _-^##########// (    ) \\\\##########^-_\n *        -############//  |\\^^/|  \\\\############-\n *      _/############//   (@::@)   \\\\############\\_\n *     /#############((     \\\\//     ))#############\\\n *    -###############\\\\    (oo)    //###############-\n *   -#################\\\\  / VV \\  //#################-\n *  -###################\\\\/      \\//###################-\n * _#/|##########/\\######(   /\\   )######/\\##########|\\#_\n * |/ |#/\\#/\\#/\\/  \\#/\\##\\  |  |  /##/\\#/  \\/\\#/\\#/\\#| \\|\n * `  |/  V  V  `   V  \\#\\| |  | |/#/  V   &#39;  V  V  \\|  &#39;\n *    `   `  `      `   / | |  | | \\   &#39;      &#39;  &#39;   &#39;\n *                     (  | |  | |  )\n *                    __\\ | |  | | /__\n *                   (vvv(VVV)(VVV)vvv)                \n *                        神兽保佑\n *                       代码无BUG!\n */\n/***\n *\n *\n *                                                    __----~~~~~~~~~~~------___\n *                                   .  .   ~~//====......          __--~ ~~\n *                   -.            \\_|//     |||\\\\  ~~~~~~::::... /~\n *                ___-==_       _-~o~  \\/    |||  \\\\            _/~~-\n *        __---~~~.==~||\\=_    -_--~/_-~|-   |\\\\   \\\\        _/~\n *    _-~~     .=~    |  \\\\-_    &#39;-~7  /-   /  ||    \\      /\n *  .~       .~       |   \\\\ -_    /  /-   /   ||      \\   /\n * /  ____  /         |     \\\\ ~-_/  /|- _/   .||       \\ /\n * |~~    ~~|--~~~~--_ \\     ~==-/   | \\~--===~~        .\\\n *          &#39;         ~-|      /|    |-~\\~~       __--~~\n *                      |-~~-_/ |    |   ~\\_   _-~            /\\\n *                           /  \\     \\__   \\/~                \\__\n *                       _--~ _/ | .-~~____--~-/                  ~~==.\n *                      ((-&gt;/~   &#39;.|||&#39; -_|    ~~-/ ,              . _||\n *                                 -_     ~\\      ~~---l__i__i__i--~~_/\n *                                 _-~-__   ~)  \\--______________--~~\n *                               //.-~~~-~_--~- |-------~~~~~~~~\n *                                      //.-~~~--\\\n *                               神兽保佑\n *                              代码无BUG!\n */\n \n \n/***                              _\n *  _._ _..._ .-&#39;,     _.._(`))\n * &#39;-. `     &#39;  /-._.-&#39;    &#39;,/\n *    )         \\            &#39;.\n *   / _    _    |             \\\n *  |  a    a    /              |\n *  \\   .-.                     ;\n *   &#39;-(&#39;&#39; ).-&#39;       ,&#39;       ;\n *      &#39;-;           |      .&#39;\n *         \\           \\    /\n *         | 7  .__  _.-\\   \\\n *         | |  |  ``/  /`  /\n *        /,_|  |   /,_/   /\n *           /,_/      &#39;`-&#39;\n */\n \n \n/***\n **************************************************************\n *                                                            *\n *   .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-.       *\n *    |                     ______                     |      *\n *    |                  .-&quot;      &quot;-.                  |      *\n *    |                 /            \\                 |      *\n *    |     _          |              |          _     |      *\n *    |    ( \\         |,  .-.  .-.  ,|         / )    |      *\n *    |     &gt; &quot;=._     | )(__/  \\__)( |     _.=&quot; &lt;     |      *\n *    |    (_/&quot;=._&quot;=._ |/     /\\     \\| _.=&quot;_.=&quot;\\_)    |      *\n *    |           &quot;=._&quot;(_     ^^     _)&quot;_.=&quot;           |      *\n *    |               &quot;=\\__|IIIIII|__/=&quot;               |      *\n *    |              _.=&quot;| \\IIIIII/ |&quot;=._              |      *\n *    |    _     _.=&quot;_.=&quot;\\          /&quot;=._&quot;=._     _    |      *\n *    |   ( \\_.=&quot;_.=&quot;     `--------`     &quot;=._&quot;=._/ )   |      *\n *    |    &gt; _.=&quot;                            &quot;=._ &lt;    |      *\n *    |   (_/                                    \\_)   |      *\n *    |                                                |      *\n *    &#39;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&#39;      *\n *                                                            *\n *           LASCIATE OGNI SPERANZA, VOI CH&#39;ENTRATE           *\n **************************************************************\n */\n/***\n *                                         ,s555SB@@&amp;                          \n *                                      :9H####@@@@@Xi                        \n *                                     1@@@@@@@@@@@@@@8                       \n *                                   ,8@@@@@@@@@B@@@@@@8                      \n *                                  :B@@@@X3hi8Bs;B@@@@@Ah,                   \n *             ,8i                  r@@@B:     1S ,M@@@@@@#8;                 \n *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@@S                \n *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5               \n *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@@A               \n *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1               \n *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@@B1                \n *               .h8h.,A@@@MXSs,           #@H1:    3ssSSX@1                  \n *               s ,@@@@@@@@@@@@Xhi,       r#@@X1s9M8    .GA981               \n *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@@BS;i;          \n *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS        \n *                s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;,      \n *              :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B,     \n *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8     \n *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:    \n *      s&amp;HA#@@@@@@@@@@@@@@M89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r    \n *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i    \n *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;    \n *  9@@@X:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:    \n *   SH#@B9.rM@@@@@@@@@@@@@B       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5    \n *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@@B    \n *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@@S   \n *              ,,,rHAri1h1rh&amp;@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:  \n *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@@A.\n *\n *\n *    又看源码，看你妹妹呀！\n */\n/***\n *_______________#########_______________________\n *______________############_____________________\n *______________#############____________________\n *_____________##__###########___________________\n *____________###__######_#####__________________\n *____________###_#######___####_________________\n *___________###__##########_####________________\n *__________####__###########_####_______________\n *________#####___###########__#####_____________\n *_______######___###_########___#####___________\n *_______#####___###___########___######_________\n *______######___###__###########___######_______\n *_____######___####_##############__######______\n *____#######__#####################_#######_____\n *____#######__##############################____\n *___#######__######_#################_#######___\n *___#######__######_######_#########___######___\n *___#######____##__######___######_____######___\n *___#######________######____#####_____#####____\n *____######________#####_____#####_____####_____\n *_____#####________####______#####_____###______\n *______#####______;###________###______#________\n *________##_______####________####______________\n */\n/***\n *             ,%%%%%%%%,\n *           ,%%/\\%%%%/\\%%\n *          ,%%%\\c &quot;&quot; J/%%%\n * %.       %%%%/ o  o \\%%%\n * `%%.     %%%%    _  |%%%\n *  `%%     `%%%%(__Y__)%%&#39;\n *  //       ;%%%%`\\-/%%%&#39;\n * ((       /  `%%%%%%%&#39;\n *  \\\\    .&#39;          |\n *   \\\\  /       \\  | |\n *    \\\\/         ) | |\n *     \\         /_ | |__\n *     (___________))))))) 攻城湿\n *\n *        _       _\n * __   _(_)_   _(_) __ _ _ __\n * \\ \\ / / \\ \\ / / |/ _` |&#39;_ \\\n *  \\ V /| |\\ V /| | (_| | | | |\n *   \\_/ |_| \\_/ |_|\\__,_|_| |_|\n */\n/***\n * https://gold.xitu.io/\n *　　　　１１１　　　　　　　　　　　　　　　　　　　　　　　　　１　　　　　　　　　　　\n *　　　　１１１　１１１１１１１１１１１１　　　　　　　　　　　１１１　　　　　　　　　　\n *　　　　１１　　１１１１１１１１１１１１　　　　　　　　　　１１１１１　　　　　　　　　\n *　　　　１１　　１１１　　　　　　　１１　　　　　　　　　１１１１１１１　　　　　　　　\n *　　１１１１　１　１１１１１１１１１１１　　　　　　　　　１１１　１１１１　　　　　　　\n *　　１１１１１１　１１１１１１１１１１１　　　　　　　１１１１　　　１１１１１　　　　　\n *　　１１１１１１　１１　　　　　　　　　　　　　　　１１１１　　　　　１１１１１１　　　\n *　　　　１１　　　１１１１１１１１　１１　　　　１１１１１１１１１１１１１１１１１１　　\n *　　　　１１　　　１１１１１１１１１１１　　　１１１１１１１１１１１１１１１１１１１　　\n *　　　　１１１１１１１１１　１１　　１１　　　　１１　　　　　　１１　　　　　　　　　　\n *　　１１１１１１１１１１１１１１１１１１　　　　　　　　　　　　１１　　　　　　　　　　\n *　　１１１１　　１１１１１１１１１１１１　　　　　　１１１１１１１１１１１１１１　　　　\n *　　１１１１　　１１　　　　１１　　　　　　　　　　１１１１１１１１１１１１１１　　　　\n *　　　　１１　　１１　１１　１１　　１１１　　　　　　１１　　　１１　　１１１　　　　　\n *　　　　１１　　１１　１１　１１　　１１　　　　　　　１１１　　１１　　１１１　　　　　\n *　　　　１１　１１１　１１　１１　　１１　　　　　　　　１１１　１１　１１１　　　　　　\n *　　１１１１　１１１　１１１１１１１１１　　　　　１１　１１１　１１　１１１１１１１　　\n *　　　１１１１１１　　１１１１１１１１１１　　　　１１１１１１１１１１１１１１１１１　　\n *　　　１１　１１１　　　　　　　　　１１１　　　　１１１１１１１１１１１１１１１１１　　\n */\n/***\n * https://www.zhihu.com/\n *           _____                    _____                    _____                    _____          \n *          /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\         \n *         /::\\____\\                /::\\    \\                /::\\    \\                /::\\    \\        \n *        /:::/    /                \\:::\\    \\              /::::\\    \\              /::::\\    \\       \n *       /:::/    /                  \\:::\\    \\            /::::::\\    \\            /::::::\\    \\      \n *      /:::/    /                    \\:::\\    \\          /:::/\\:::\\    \\          /:::/\\:::\\    \\     \n *     /:::/____/                      \\:::\\    \\        /:::/__\\:::\\    \\        /:::/__\\:::\\    \\    \n *    /::::\\    \\                      /::::\\    \\      /::::\\   \\:::\\    \\      /::::\\   \\:::\\    \\   \n *   /::::::\\    \\   _____    ____    /::::::\\    \\    /::::::\\   \\:::\\    \\    /::::::\\   \\:::\\    \\  \n *  /:::/\\:::\\    \\ /\\    \\  /\\   \\  /:::/\\:::\\    \\  /:::/\\:::\\   \\:::\\____\\  /:::/\\:::\\   \\:::\\    \\\n * /:::/  \\:::\\    /::\\____\\/::\\   \\/:::/  \\:::\\____\\/:::/  \\:::\\   \\:::|    |/:::/__\\:::\\   \\:::\\____\\\n * \\::/    \\:::\\  /:::/    /\\:::\\  /:::/    \\::/    /\\::/   |::::\\  /:::|____|\\:::\\   \\:::\\   \\::/    /\n *  \\/____/ \\:::\\/:::/    /  \\:::\\/:::/    / \\/____/  \\/____|:::::\\/:::/    /  \\:::\\   \\:::\\   \\/____/\n *           \\::::::/    /    \\::::::/    /                 |:::::::::/    /    \\:::\\   \\:::\\    \\     \n *            \\::::/    /      \\::::/____/                  |::|\\::::/    /      \\:::\\   \\:::\\____\\    \n *            /:::/    /        \\:::\\    \\                  |::| \\::/____/        \\:::\\   \\::/    /    \n *           /:::/    /          \\:::\\    \\                 |::|  ~|               \\:::\\   \\/____/     \n *          /:::/    /            \\:::\\    \\                |::|   |                \\:::\\    \\         \n *         /:::/    /              \\:::\\____\\               \\::|   |                 \\:::\\____\\        \n *         \\::/    /                \\::/    /                \\:|   |                  \\::/    /        \n *          \\/____/                  \\/____/                  \\|___|                   \\/____/         \n */\n/***\n * http://www.freebuf.com/\n *           _.._        ,------------.\n *        ,&#39;      `.    ( We want you! )\n *       /  __) __` \\    `-,----------&#39;\n *      (  (`-`(-&#39;)  ) _.-&#39;\n *      /)  \\  = /  (\n *     /&#39;    |--&#39; .  \\\n *    (  ,---|  `-.)__`\n *     )(  `-.,--&#39;   _`-.\n *    &#39;/,&#39;          (  Uu&quot;,\n *     (_       ,    `/,-&#39; )\n *     `.__,  : `-&#39;/  /`--&#39;\n *       |     `--&#39;  |\n *       `   `-._   /\n *        \\        (\n *        /\\ .      \\.  freebuf\n *       / |` \\     ,-\\\n *      /  \\| .)   /   \\\n *     ( ,&#39;|\\    ,&#39;     :\n *     | \\,`.`--&quot;/      &#125;\n *     `,&#39;    \\  |,&#39;    /\n *    / &quot;-._   `-/      |\n *    &quot;-.   &quot;-.,&#39;|     ;\n *   /        _/[&quot;---&#39;&quot;&quot;]\n *  :        /  |&quot;-     &#39;\n *  &#39;           |      /\n *              `      |\n */\n/***\n * https://campus.alibaba.com/\n *                                 `:::::::::::,\n *                             `::;:::::::;:::::::,  `\n *                          `::;;:::::::@@@@;:::::::`\n *                        ,:::::::::::::@    #@&#39;:::::`\n *                      :::::::::::::::&#39;@@      @;::::\n *                    ::::::::::::&#39;@@@@&#39;```      .+:::`\n *                  ::::::::::;@@@#.              ,:::,\n *                .::::::::+@#@`                   ::::\n *               :::::::+@@&#39;                       ::::\n *             `:::::&#39;@@:                         `:::.\n *            ,::::@@:  `                         ::::\n *           ;::::::@                            .:::;\n *          :;:::::;@`        `                  :::;\n *         :::::::::@`        @                 ;::::\n *        :::::::::#`          @`              ,::::\n *       :::::::::@`         +@ @             .::::`\n *      .::::::&#39;@@`       `@@&#39;  @             ::::,\n *      :::::::++@@@@@@@@@@.                 ::::;\n *     ;:::::::+,   `..`                    :::::\n *    ,::::::::&#39;,                          :::::\n *    :::::::::+,                         :::::`\n *   :::::::::+@.                        ,::::.`                     `,\n *   ::::::;;@+                         .::;::                     `;\n *  :::::::@@                          `:::;:                   `::``\n *  ::::::#@                           ;::::                  .::`\n *  :::::;@                           :::::`               .;::`\n *  :::::@                           `:;:::            `::::;\n *  :::::#                           :::::.        `,;:::::\n *  ::::::                    `      ::::::,.,::::::::::.\n *  ,::::::`              .::        ::::::::::::::::;`\n *   ;::::::::,````.,:::::,          ::::::::::::::.\n *    :::::::::::::::::: `           `::::::::::`\n *     `::::::::::::,                  .:::.\n *         `..`\n */\n/***\n * http://www.flvcd.com/\n *  .--,       .--,\n * ( (  \\.---./  ) )\n *  &#39;.__/o   o\\__.&#39;\n *     &#123;=  ^  =&#125;\n *      &gt;  -  &lt;\n *     /       \\\n *    //       \\\\\n *   //|   .   |\\\\\n *   &quot;&#39;\\       /&#39;&quot;_.-~^`&#39;-.\n *      \\  _  /--&#39;         `\n *    ___)( )(___\n *   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。\n */\n/***\n * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂\n * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　\n * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂\n * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂\n * 　　　頂頂　　　頂頂　　　　　　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂\n * 　　　頂頂　　　　　　　頂頂頂　\n * 　　　頂頂　　　　　　頂頂　頂頂　頂頂\n * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂\n * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂\n */\n/***\n * ░░░░░░░░░░░░░░░░░░░░░░░░▄░░\n * ░░░░░░░░░▐█░░░░░░░░░░░▄▀▒▌░\n * ░░░░░░░░▐▀▒█░░░░░░░░▄▀▒▒▒▐\n * ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐\n * ░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐\n * ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌\n * ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒\n * ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐\n * ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄\n * ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒\n * ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒\n * 单身狗就这样默默地看着你，一句话也不说。\n */\n/***\n *                   /88888888888888888888888888\\\n *                   |88888888888888888888888888/\n *                    |~~____~~~~~~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;|\n *                   / \\_________/&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\\\n *                  /  |              \\         \\\n *                 /   |  88    88     \\         \\\n *                /    |  88    88      \\         \\\n *               /    /                  \\        |\n *              /     |   ________        \\       |\n *              \\     |   \\______/        /       |\n *   /&quot;\\         \\     \\____________     /        |\n *   | |__________\\_        |  |        /        /\n * /&quot;&quot;&quot;&quot;\\           \\_------&#39;  &#39;-------/       --\n * \\____/,___________\\                 -------/\n * ------*            |                    \\\n *   ||               |                     \\\n *   ||               |                 ^    \\\n *   ||               |                | \\    \\\n *   ||               |                |  \\    \\\n *   ||               |                |   \\    \\\n *   \\|              /                /&quot;&quot;&quot;\\/    /\n *      -------------                |    |    /\n *      |\\--_                        \\____/___/\n *      |   |\\-_                       |\n *      |   |   \\_                     |\n *      |   |     \\                    |\n *      |   |      \\_                  |\n *      |   |        ----___           |\n *      |   |               \\----------|\n *      /   |                     |     ----------&quot;&quot;\\\n * /&quot;\\--&quot;--_|                     |               |  \\\n * |_______/                      \\______________/    )\n *                                               \\___/\n */\n/***\n *                        d*##$.\n *  zP&quot;&quot;&quot;&quot;&quot;$e.           $&quot;    $o\n * 4$       &#39;$          $&quot;      $\n * &#39;$        &#39;$        J$       $F\n *  &#39;b        $k       $&gt;       $\n *   $k        $r     J$       d$\n *   &#39;$         $     $&quot;       $~\n *    &#39;$        &quot;$   &#39;$E       $\n *     $         $L   $&quot;      $F ...\n *      $.       4B   $      $$$*&quot;&quot;&quot;*b\n *      &#39;$        $.  $$     $$      $F\n *       &quot;$       R$  $F     $&quot;      $\n *        $k      ?$ u*     dF      .$\n *        ^$.      $$&quot;     z$      u$$$$e\n *         #$b             $E.dW@e$&quot;    ?$\n *          #$           .o$$# d$$$$c    ?F\n *           $      .d$$#&quot; . zo$&gt;   #$r .uF\n *           $L .u$*&quot;      $&amp;$$$k   .$$d$$F\n *            $$&quot;            &quot;&quot;^&quot;$$$P&quot;$P9$\n *           JP              .o$$$$u:$P $$\n *           $          ..ue$&quot;      &quot;&quot;  $&quot;\n *          d$          $F              $\n *          $$     ....udE             4B\n *           #$    &quot;&quot;&quot;&quot;` $r            @$\n *            ^$L        &#39;$            $F\n *              RN        4N           $\n *               *$b                  d$\n *                $$k                 $F\n *                 $$b                $F\n *                  $&quot;&quot;               $F\n *                  &#39;$                $\n *                   $L               $\n *                   &#39;$               $\n *                    $               $\n */\n \n \n/***\n *              ,----------------,              ,---------,\n *         ,-----------------------,          ,&quot;        ,&quot;|\n *       ,&quot;                      ,&quot;|        ,&quot;        ,&quot;  |\n *      +-----------------------+  |      ,&quot;        ,&quot;    |\n *      |  .-----------------.  |  |     +---------+      |\n *      |  |                 |  |  |     | -==----&#39;|      |\n *      |  |  I LOVE DOS!    |  |  |     |         |      |\n *      |  |  Bad command or |  |  |/----|`---=    |      |\n *      |  |  C:\\&gt;_          |  |  |   ,/|==== ooo |      ;\n *      |  |                 |  |  |  // |(((( [33]|    ,&quot;\n *      |  `-----------------&#39;  |,&quot; .;&#39;| |((((     |  ,&quot;\n *      +-----------------------+  ;;  | |         |,&quot;\n *         /_)______________(_/  //&#39;   | +---------+\n *    ___________________________/___  `,\n *   /  oooooooooooooooo  .o.  oooo /,   \\,&quot;-----------\n *  / ==ooooooooooooooo==.o.  ooo= //   ,`\\--&#123;)B     ,&quot;\n * /_==__==========__==_ooo__ooo=_/&#39;   /___________,&quot;\n *\n */\n \n \n/***\n *                 .-~~~~~~~~~-._       _.-~~~~~~~~~-.\n *             __.&#39;              ~.   .~              `.__\n *           .&#39;//                  \\./                  \\\\`.\n *         .&#39;//                     |                     \\\\`.\n *       .&#39;// .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._     |     _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\\\`.\n *     .&#39;//.-&quot;                 `-.  |  .-&#39;                 &quot;-.\\\\`.\n *   .&#39;//______.============-..   \\ | /   ..-============.______\\\\`.\n * .&#39;______________________________\\|/______________________________`.\n *\n */\n \n \n/***             无可奉告 一颗赛艇\n *  uJjYJYYLLv7r7vJJ5kqSFFFUUjJ7rrr7LLYLJLJ7\n *  JuJujuYLrvuEM@@@B@@@B@B@B@@@MG5Y7vLjYjJL\n *  JYjYJvr7XM@BB8GOOE8ZEEO8GqM8OBBBMu77LLJ7\n *  LJLY7ru@@@BOZ8O8NXFFuSkSu25X0OFZ8MZJ;vLv\n *  YvL7i5@BM8OGGqk22uvriiriii;r7LuSZXEMXrvr\n *  vv7iU@BMNkF1uY7v7rr;iiii:i:i:ii7JEPNBPir\n *  L7iL@BM8Xjuujvv77rr;ri;i;:iiiii:iLXFOBJ:\n *  7ri@B@MOFuUS2Y7L7777rii;:::::i:iirjPG@O:\n *  7:1B@BBOPjXXSJvrL7rr7iiii:i::::i;iv5MBB,\n *  r:0@BBM8SFPX2Y77rri::iirri:::::iii75O@G.\n *  7:SB@BBGqXPk0122UJL::i::r:::i:i;i:v2@Bk.\n *  ri:MB@BBEqEMGq2JLLL1u7.iX51u77LF27iSB@r,\n *  ri,v@B@MB8@qqNEqN1u:5B8BOFE0S7ii7qMB@F::\n *  ii,J80Eq1MZkqPPX5YkPE@B@iXPE52j7:vBjE7::\n *  ii:7MSqkS0PvLv7rrii0@L.Z1iLr::ir:rO,vi::\n *  ii::EZXPSkquLvii:iF@N:.,BUi7ri,::UY;r:::\n *  i::.2ONXqkPXS5FUUEOPP;..iSPXkjLYLLrr:::,\n *  :::,iMXNP0NPLriiLGZ@BB1P87;JuL7r:7ri:::,\n *  :::,.UGqNX0EZF2uUjUuULr:::,:7uuvv77::::.\n *  ::::..5OXqXNJ50NSY;i:.,,,:i77Yvr;v;,,::.\n *  :::,:.jOEPqPJiqBMMMO8NqP0SYLJriirv:.:,:.\n *  ,:,,,.,Zq0P0X7vPFqF1ujLv7r:irrr7j7.,,::.\n *  ,,,....0qk0080v75ujLLv7ri:i:rvj2J...,,,.\n *  ......8@UXqZEMNvJjr;ii::,:::7uuv...,.,,.\n *  .....B@BOvX88GMGk52vririiirJS1i.......,.\n *  .JEMB@B@BMvL0MOMMMO8PE8GPqSk2L:.........\n *  @B@@@B@M@B@L:7PGBOO8MOMOEP0Xri@B@Mk7,...\n *  B@B@BBMBB@B@0::rJP8MO0uvvu7..,B@B@B@B@Z7\n *  MMBM@BBB@B@B@Br:i,..:Lur:....7@OMMBM@B@@\n *  8OOMMMOMMMMBB@B:....,PZENNi..JBOZ8GMOOOO\n */\n\n","slug":"有趣的代码注释","date":"2022-01-17T10:56:41.820Z","categories_index":"分享","tags_index":"注释","author_index":"天琦"},{"id":"12663d3ec3c5f0fc6b418f272e79efac","title":"数据结构-绪论","content":"基本概念\n\n数据(data): 是客观事物的符号表示，是所有能输入到计算机中并被计算机程序处理的符号的总称。\n数据项(Data Item): 是组成数据元素的、有独立含义的、不可分割的最小单位。 \n数据元素(Data Element): 是数据的基本单位，在计算机中通常作为一个整体进行考虑和处理。\n数据对象(data element): 是性质相同的数据元素的集合，是数据的一个子集。\n数据结构(data structure): 是指相互之间存在一种或多种特定关系的数据元素的集合。是组织并存储数据以便能够有效使用的一种专门格式，用来反应一个数据的内部构成，即一个数据由哪些成分数据构成，以什么方式构成，呈什么结构，(带有结构的数据元素集合)数据结构=逻辑结构+存储结构\n数据类型： \n    *定义域*\n        \n    *操作集*\n\n数据抽象和抽象数据类型    抽象数据类型(Abstract Data Type)\n    定义：简称（ADT），定义了一个数据对象，数据对象中各元素间的结构关系，以及一组处理数据的操作。\n    特点：数据抽象、信息隐蔽\n\n数据的逻辑结构分类一：1、线性结构：有且仅有一个开始解点 和一个终端结点，并且所有结点最多只有一个直接前驱和一个直接后继。\n  1)线性表\n四个基本特征\n\n  1、集合中比存在唯一的一个“第一个元素”;\n  2、集合中比存在唯一的一个“最后的元素”;\n  3、除最后一个元素外，其他数据元素均有唯一的“后继”;\n  4、除第一个元素之外，其他数据元素均有唯一的“前驱”; \n\n  2)栈\n  3)队列\n  4)串及数组\n2、非线性结构：\n  树形结构\n  图形结构\n分类二：四类基本数据结构\n1、集合结构\n三个特征\n  \n  1、确定性\n  2、唯一性\n  3、无序性\n\n2、线性结构\n  线性结构指的是数据元素之间存在着一对一的现象关系的数据结构。\n\n3、树状结构\n  除了一个数据元素(元素01)以外每个数据元素有且仅有一个直接前驱元素，但是可以有多个直接后续元素。\n  特点是数据元素之间是一对多的联系。\n\n4、网状结构(图状结构)\n  每个数据元素可以有多个直接前驱元素，也可以有多个直接沟洫元素。\n  特点是数据元素之间是多对多的联系。\n\n数据的运算集合并在其上定义运算集合。\n检索\n排序\n插入\n删除\n修改\n\n数据的存储结构按一定的映像方式将数据储存在计算机中。\n\n1、顺序存储\n把逻辑上相邻的结点在物理位置上相邻的存储单元中节点之间的逻辑关系由存储单元的邻接关系来体现。(数组)\n优点:节省存储空间(分配给数据的存储单元全用存放结点的数据，节点之间的逻辑关系没有占用额外的存储空间)\n    可实现对结点的随机存取，即每一个结点对应一个序号，由该序号可以之间计算出来结点的存储地址。\n缺点:插入和删除操作需要移动元素，效率极低。\n\n2、链式存储\n数据元素的存储对应的是不连续的存储空间，每个存储字节对应一个需要存储的数据元素。\n每个结点是由数据域和指针域组成。元素之间的逻辑关系通过存储结点之间的链接关系反应出来。\n\n特点\n1)比顺序存储结构的存储密度小(每个结点都由数据域和指针域组成，所以相同空间内假设全存满的话顺序比链式存储更多)\n2)逻辑上相邻的结点物理上不必相邻。\n3)插入、删除灵活(不必移动结点，只要改变结点中的指针)\n4)查找结点是链式存储比顺序存储慢。\n\n3、索引存储\n除建立存储结点信息外，还建立附加的索引表来标识结点的地址。(目录)\n\n4、散列存储\n根据结点的关键字直接计算出该结点的存储地址(神奇的结构，添加、查询速度快)\n\n算法(Algorithm):规则的有限集合，为解决特定问题而规定的一系列操作。\n算法的特性：\n有限性：有限步骤之内正常结束，不能形成无穷循环。\n确定性：算法中的每一个步骤必须有确定含义，无二义性\n输入：有多个或0个输入\n输出：至少有一个或多个输出\n可行性：原则上能精确进行，操作可通过已实现的基本运算执行有限次而完成。\n\n算法设计的要求\n算法的正确性\n可读性\n健壮性\n高效率和低存储量\n\n算法性能评价\n  时间T:语句执行的次数(语句频度)\n    时间复杂度T(n)：O(f(n)),\n    f(n)最差时间复杂度。\n\n  常用的时间复杂度级别\n        常数阶O(1)\n        对数阶O(log2 n)\n        线性阶O(n)\n        线性对数阶O(n*log2 n)\n        平方阶O(n^2)\n        立方阶O(n^3)\n        ...\n        k方阶O(n^k)\n        指数阶O(2^n)\n        阶乘阶O(n!)\n从上到下，执行效率越来越低\n\n空间S\n","slug":"数据结构-绪论","date":"2022-01-17T10:56:41.817Z","categories_index":"数据结构","tags_index":"数据结构","author_index":"天琦"},{"id":"cc5068c18e9979834bedd7237675997e","title":"数据结构-线性表","content":"考核方式\n平时成绩：40%\n作业、考勤：10%\n实验(源代码、实验报告)：15%\n过程性评价(3次，5分/次)：15%\n课堂纪律\n    无故迟到3次=1次旷课\n    无故旷课：-2分/次\n    上课玩手机、玩游戏：-2分/次\n\n期末成绩：60%\n闭卷、笔试\n\n抽象数据类型的表示ADT = (D,R,P)\n[D]：数据对象\n[R]：D上的关系集\n[P]：D上的操作集\nADT抽象数据类型名&#123;\n\n    数据对象:&lt;数据对象的定义&gt;\n\n    数据关系:&lt;数据关系的定义&gt;\n\n    基本操作:&lt;基本操作的定义&gt;\n&#125;ADT抽象数据类型名\n\n时间复杂度推导秘籍1、寻找执行频率最高的那条语句  (通常是循环最内层)\n2、估计出该语句的执行次数(是问题规模n的函数)\n3、只保留最高次幂(去掉最高次幂的系数和其余项)\n推导的一般准则准则1、对于一些简单的输入输出语句或赋值语句，近似认为需要O(1)时间。\n准则2、对于多个循环，假设循环体的时间复杂度为O(n),各个循环的循环次数分别是a,b,c…,则这个循环的时间复杂度为O(nabc…)。\n准则3、如果算法中包含并列的循环，则：若并列循环设计问题规模相同，则取最大；若并列循环设计问题规模不同，则求和。\n准则4、对于条件判断语句，总的时间复杂度等于其中时间复杂度最大的路径的时间复杂度。\n线性表的顺序表示和实现定义若结构是非空有限集，则有且仅有一个开始结点和一个终端结点，并且所有结点都最多只有一个直接前驱和一个直接后继。\n\n线性结构可表示为  (a1,a2,a3,a4,a5,a6…)\n线性结构反应结点间的逻辑关系是1：1线性结构包括：线性表、栈、队列、字符串和数组。\n\n线性结构的特点存在唯一的一个被称作“第一个”的数据元素；\n \n存在唯一的一个被称作“最后一个”的数据元素；\n\n除第一个外，集合中的每个数据元素均只有一个直接前驱；\n\n除最后一个之外，集合中每个数据元素均只有一个直接后继。\n\n数据元素都是记录； 元素间关系是线性\n同一线性表中的元素必定具有相同特性\n线性表的类型定义  n个具有相同特性的数据元素的有限序列\n\n  ADT List&#123;\n  数据对象: D=&#123;ai|ai∈ElemSet,i=1,2,...,n,n≥0&#125; \n  数据关系: R=&#123;&lt;ai-1,ai&gt;|ai-1,ai∈D,i=2,...,n&#125; \n  基本操作：\n  \n  InitList(&amp;L)\n    操作结果：构造一个空的线性L。\n  \n  DestroyList(&amp;L)    \n    初始条件：线性表L已存在。\n    操作结果：销毁线性表L。\n  \n  ListEmpty(L)    \n    初始条件：线性表L已存在。\n    操作结果：若L为空表，则返回T,否则返回F。\n  \n  ListLength(L)\n    初始条件：线性表L已存在。\n    操作结果：返回L中数据元素个数。\n  \n  GetElem(L,i,&amp;e)\n    初始条件：线性表L已存在，     1≤i≤ListLength(L)。\n    操作结果：用e返回L中第i个数据元素的值。 \n  \n  LocateElem(L,e,compare())\n    初始条件：线性表L已存在，compare()是数据元素判定函数。\n    操作结果：返回L中第1个与e满足关系compare()的数据元素的位序。若这样的数据元素不存在，则返回值为0。\n  \n  PriorElem(L,cur_e,&amp;pre_e)\n    初始条件：线性表L已存在。\n    操作结果：若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前驱，否则操作失败，pre_e无定义。 \n  \n  NextElem(L,cur_e,&amp;next_e)\n    初始条件：线性表L已存在。\n    操作结果：若cur_e是L的数据元素，且不是最后一个，则用next_e返回它的后继，否则操作失败，next_e无定义。\n  \n  ListTraverse(L)\n    初始条件：线性表L已存在。\n    操作结果：对线性表L进行遍历，在遍历过程中依次对L的每个数据元素访问一次。\n  \n  ClearList(&amp;L)\n  初始条件：线性表L已存在。\n  操作结果：将L重置为空表。\n  \n  ListInsert(&amp;L,i,e)\n    初始条件：线性表L已存在，1≤i≤ListLength(L)+1。\n    操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1。\n  \n  ListDelete(&amp;L,i,&amp;e)\n    初始条件：线性表L已存在且非空，1≤i≤ListLength(L)。\n    操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1。\n  \n  PutElem(&amp;L, i, e )\n       初始条件：线性表 L 已存在且1≤i≤LengthList(L)。。\n       操作结果：L 中第i 个元素的值与e 相同。\n\n线性表的操作主要包括  创建和删除结构\n  对结构有没有改变的操作\n  对结构有改变的操作\n\n查找插入删除线性表的链式表示和实现定义线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表中的数据元素。\n\n特点：\n  逻辑上相邻的数据元素，物理上也相邻；\n  若已知表中首元素在存储器中的位置，则可求出线性表中其他元素的存放位置\n\n线性表的起始地址（线性表的基地址）\n\n顺序表的实现顺序表的基本操作\n初始化顺序表L\n 销毁顺序表L\n 清空顺序表L\n 求顺序表L的长度\n 判断顺序表L是否为空 \n 获取顺序表L中的某个数据元素内容 \n 检索值为e的数据元素    \n 在顺序表L中插入一个数据元素  \n 删除顺序表L中第i个数据元素\n\n线性表顺序表示的优缺点  优点：\n    可以随机存取表中任一元素;\n    无需为表示表中元素之间的逻辑关系而增加额外存储空间；\n  缺点：\n    在插入、删除某一元素时，需要移动大量元素；\n    表的容量难以确定,浪费存储空间\n\n为了克服这一缺点–&gt;链表\n线性表的链式存储的特点：  用一组任意的存储单元存储线性表的数据元素\n    存储单元的地址可以连续或不连续\n    即：逻辑上相邻的数据元素在物理上不一定相邻\n  \n  对线性表中的每一个数据元素，都需要用两部分来存储：一部分用于存放数据元素本身的信息，称为数据域（Data Field）；另一部分用于存放直接前驱或直接后继的地址（指针），称为指针域（Link Field）\n\n与链式存储有关的术语  结点（Node）：\n数据元素的存储映像  \n  由数据域和指针域两部分组成：数据域Data 指针域Link\n\n  链表：n个结点通过指针域链结称一个链表\n链表的种类  单链表      结点只有一个指针域的链表，也称线性链表\n  双链表      有两个指针域的链表\n  循环链表      首尾相接的链表\n头指针、首元结点和头结点头指针：指向链表中第一个结点（为头结点或首元结点）的指针\n首元结点：是指链表中存储第一个数据元素a1的结点\n头结点：实在链表的首元结点之前附设的一个结点；数据域内只放空表标志和表长等信息\n\n在链表中设置头结点的好处\n\n单链表的定义和实现单链表的存储结构定义typedef struct LNode&#123;\n  ElemType data;//数据域\n  struct LNode *next;//指针域\n&#125;LNode,*LinkList;\n或者\nstruct LNode&#123;\n  ElemType data;\n  struct LNode *next;\n&#125;;\ntypedef LNode *LinkList;\n或者\ntypedef struct LNode&#123;\n  ElemType data;\n  struct LNode *next;\n&#125;LNode;\ntypedef LNode *LinkList;\n\n 指针变量和结点变量    LNode *p;    LNode n; \np:指针变量，表示结点地址。\np-&gt;data,p-&gt;next\nn:结点变量，表示一个结点\nn.data;n.next\n\n如何获得后继元素    若p-&gt;data代表ai\n单链表基本操作的实现  初始化单链表L\n  销毁单链表L\nStatus DestroyList_L(LinkList&amp;L)&#123;\n    LinkList p;\n    while(L)&#123;\n      p=L;\n      L=L-&gt;next;\n      delete p;\n    &#125;\n  return OK;\n&#125;\n\n  清空单链表L\nStatus ClearList(LinkList L)&#123;\n  //将L重置为空表\n  LinkList p,q;\n  p=L-&gt;next;//p指向第一个结点\n  while(p)&#123;//没到表尾\n    q=p-&gt;next;\n    delete p;\n    p=q;\n  &#125;\n  L-&gt;next=null;//头结点指针域为空\n  return OK;\n&#125;\n\n  求单链表L的长度\nint ListLength_L(LinkList L)&#123;\n  //返回L中数据元素个数\n  LinkList P；\n  p=L-&gt;next;\n  count = 0;\n  while(p)&#123;\n    ++count;\n    p=p-&gt;next;\n  return count;\n  &#125;\n&#125;\n\n  判断单链表L是否为空\nbool ListEmpty()&#123;\n\n&#125;\n\n  获取单链表L中的某个数据元素内容\n  Status GetElem_L(LinkList L,int i, ElemType &amp;e)&#123;\n    //当第i个元素存在时，其值赋给e并返回OK。否则返回ERROR\n    p=L-&gt;next;\n    j=1;\n\n    while(p&amp;&amp;j&lt;i)&#123;\n      //向后扫描，直到p指向第i个元素或p为空\n      p=p-&gt;next;\n      ++j;\n    &#125;\n    if(!p||j&gt;i)return ERROR;//不合法范围\n    e=p-&gt;data;\n    return OK;\n  &#125;\n\n  检索值为e的数据元素\n  LNode *LocateElem_L(LinkList L , Elemtype e)&#123;\n\n  &#125;\n\n  在单链表L中插入一个数据元素\nStatus ListInsert_L(LinkList L,int i , ElemType e)&#123;\n  p=1;j=0;\n  while(p&amp;&amp;j&lt;i-1)&#123;//寻找第i-1个结点\n    p=p-&gt;next;\n    ++i;\n  &#125;\n  if(!p||i&gt;i-1)return ERROR;//i大于表长+1或者小于1\n  s=new LNode;//生成新节点*s\n  s-&gt;data=e;//将节点*s的数据域置为e\n  s-&gt;next=p-&gt;next;//将结点*s插入L中\n  p-&gt;next=s;\n  return OK;\n&#125;\n\n单链表的建立(前插法)\n从一个空表开始，重复读入数据\n    生成新结点\n    将读入数据存放到新节点的数据域中\n    将该新结点插入到...\n\n后插法  从一个空表L开始，将新节点逐个插入到链表的尾部，尾指针r…\n链表的运算时间效率分析查找因线性表职能顺序存取，即在查找时要从头指针找起，查找的时间复杂度为O(n)\n\n插入和删除因线性\n\n链表的优缺点优点\n数据元素的个数可以自由扩充\n插入、删除等操作不必移动数据，只需修改链接指针，修改效率较高\n  \n缺点\n存储密度笑\n存取效率不高，必须采用顺序存取\n\n循环链表将单链表中最后一个结点的指针域指向头结点，整个链表形成一个环。\n(a)非空单循环链表\n  特点：从表中任一结点出发均可找到表中其他结点\n(b)空表\n\n与单链表的区别：查找结束条件\n单链表---p-&gt;next=null\n循环链表--p-&gt;next=head\n\n设立尾指针：可以使链表合并简化\n\n双向链表既有前驱指针，也有后继指针\n\n顺序表和链表的比较","slug":"数据结构-线性表","date":"2022-01-17T10:56:41.812Z","categories_index":"数据结构","tags_index":"数据结构","author_index":"天琦"},{"id":"232069321853689fdbb7d700cb818436","title":"操作系统-进程的描述与控制","content":"第二章进程的描述与控制前驱图和程序执行前驱图\n前趋图：有向无循环图（DAG ）。描述一个程序的各部分（程序段或语句）间的依赖关系，或者是一个大的计算的各个子任务间的因果（前后）关系。\n\n前驱图的定义\n前趋图中的每个结点可以表示一条语句、一个程序段或一个进程，结点间的有向边表示两个结点之间存在的偏序关系或前趋关系“→ ”。\n→ ＝ (Pi,Pj)| 在 Pj 开始前 Pi 必须完成 。如果 (Pi,Pj)∈→ ，可写成 Pi→Pj ，Pi是Pj的直接前趋，Pj是Pi的直接后继。\n没有前趋的结点称为初始结点，没有后继的结点称为终止结点。此外，每个结点还具有一个权值，用于表示该结点所含有的程序量或结点的执行时间。\n\n程序顺序执行\n必须按照某种先后次序逐个执行。\n\n程序顺序执行时的特征\n顺序性 ：一个程序各个部分的执行，严格地按照某种先后次序执行。\n封闭性 ：程序在封闭的环境下运行，即程序运行时独占全部系统资源。\n可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，都将获得相同的结果。\n\n程序并发执行\n指一组在逻辑上互相独立的程序或程序段在执行时间上客观上互相重叠，即一个程序或程序段的执行尚未结束，另一个程序（段）的执行已经开始的方式。\n\n程序并发执行时的特征\n间断性（异步性）：互斥、同步\n失去封闭性 ：共享资源 → 失去封闭性\n不可再现性：失去封闭性 → 失去可再现性\n\n程序并发执行时的不可再现性是绝对不允许的；因此应采取措施使并发程序保持其 可再现性 。引入进程，对并发执行的程序加以描述和控制。\n进程的描述进程的定义\n进程是程序的一次执行\n进程是一个程序及其数据在处理机上顺序执行时所发生的活动\n进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位\n\n进程的特征\n动态性：进程的实质是程序在处理机上的一次执行过程，因此是动态。动态性是进程的最基本的特征 。同时动态性还表现在进程则是有生命期的，它 因创建而产生，因调度而执行，因得不到资源而暂停，因撤消而消亡 。\n并发性：指多个进程实体同时存在于内存中，能在一段时间内同时运行。引入进程的目的就是为了使进程能并发执行，以提高资源利用率，所以并发性是进程的重要特征，也是 OS 的重要特征。\n独立性：指进程是一个能独立运行的基本单位，也是系统进行资源分配和调度的独立单位。\n异步性：指进程以各自独立的、不可预知的速度向前推进。\n\n从操作系统角度分类\n系统进程\n用户进程\n\n进程和程序的区别\n进程是动态概念，而程序则是静态概念\n程序是指令的有序集合，永远存在；进程强调是程序在数据集上的一次执行，有创建有撤销，存在是暂时的；\n进程具有并发性，而程序没有\n进程可创建其他进程，而程序并不能形成新的程序\n进程是竞争计算机资源的基本单位，程序不是\n\n进程和程序的联系\n进程是程序在数据集上的一次执行\n程序是构成进程的组成部分，一个程序可对应多个进程，一个进程可包括多个程序\n进程的运行目标是执行所对应的程序\n从静态看，进程由程序、数据和进程控制块（PCB）组成\n\n进程的基本状态及转换\n进程的三种基本状态\n\n就绪状态ready\n\n（运行）执行状态running\n\n（等待）阻塞状态waiting\n\n\n\n三种基本状态的转换\n\n进程在运行期间并非固定处于某个状态，而是不断从一个状态转换到另一个状态。\n\n\n\n创建状态和终止状态\n\n五状态进程模型\n\n\n注意\n\n阻塞态-&gt;运行态和就绪态-&gt;阻塞态这二种状态转换不可能发生\n\n\n\n挂起操作和进程状态的转换\n挂起和阻塞的区别\n挂起操作的目的\n终端用户的需要: 修改、检查进程\n父进程的需要：修改、协调子进程\n对换的需要：缓和内存\n负荷调节的需要：保证实时任务的执行\n\n\n关键图\n具有挂起状态的进程状态转换\n具有创建、终止的进程状态转换\n具有创建、终止、挂起状态的进程状态转换\n\n\n\n进程管理中的数据结构\n进程控制块PCB的作用\n作为独立运行基本单位的标志（PCB 是进程存在的唯一标志。）\n能实现间断性运行方式\n提供进程管理所需要的信息\n提供进程调度所需要的信息\n实现与其他进程的同步与通信\n\n\n进程控制块的信息\n进程标识符\n外部标识符PID\n内部标识符(端口)\n\n\n处理机状态（断点信息）\n通用寄存器\n指令计数器\n程序状态字PSW\n用户栈指针\n\n\n进程调度信息\n进程状态\n进程优先级\n进程调度所需的其他信息\n事件\n\n\n进程控制信息\n程序和数据的地址\n进程同步和通信机制\n资源清单\n链接指针\n\n\n进程控制块的组织方式\n线性方式\n链接方式\n索引方式\n\n\n\n\n\n进程控制操作系统内核\n两大功能\n支撑功能\n中断管理\n时钟管理\n原语操作\n进程的管理，由若干原语（primitive）来执行\n\n\n\n\n资源管理功能\n进程管理\n存储器管理\n设备管理\n\n\n\n\n状态\n系统态，管态，内核态\n用户态，目态\n\n\n\n进程的创建\n进程的层次结构\n\n父进程\n子进程\n\n\n引起创建进程的事件\n\n用户登录\n作业调度\n提供服务\n应用请求\n\n\n进程的创建过程\n\n1.申请空白PCB\n2.为新进程分配其运行所需的资源\n3.初始化进程块PCB\n4.如果进程就绪队列能够接纳新进程，便将新进程插入就绪队列\n\n\n进程的终止\n\n引起进程终止的事件\n1.正常结束\n2.异常结束\n3.外界干预\n\n\n进程的终止过程\n1.根据被终止进程的标识符\n\n\n\n\n进程的阻塞与唤醒\n\n引起进程阻塞和唤醒的事件\n请求系统服务而未满足\n启动某种操作而阻塞当前进程\n新数据尚未到达\n无新工作可做：系统进程\n\n\n进程阻塞过程(自己阻塞自己)\n进程唤醒过程(系统或其他进程唤醒自己)\n\n\n进程的挂起与激活\n\nsuspend\nactive\n\n\n\n进程同步\n基本概念\n\n两种形式的制约关系\n间接相互制约关系\n互斥——竞争\n\n\n直接相互制约关系\n同步——协作\n\n\n\n\n临界资源\n分区\n进入区enter section\n临界区critical section\n退出区exit section\n剩余区remainder section\n\n\n同步机制应遵循的规则\n1.空闲让进\n2.忙则等待\n3.有限等待\n4.让权等待\n\n\n\n\n进程同步机制\n\n软件同步机制:都没有解决让权等待，而且部分方法还会产生死锁的情况\n硬件同步机制\n关中断\n利用Test-and-Set指令实现互斥\n利用swap指令实现进程互斥\n\n\n信号量机制\n整型信号量\n记录型信号量\n由于整型信号量没有遵循让权等待原则，记录型允许负数，即阻塞链表\n\n\nAND型信号量\n信号量集\n理解:AND型号量的wait和signal仅能对信号施以加1或减1操作，意味着每次只能对某类临界资源进行一个单位的申请或释放。当一次需要N个单位时，便要进行N次wait操作，这显然是低效的，甚至会增加死锁的概率。此外，在有些情况下，为确保系统的安全性，当所申请的资源数量低于某一下限值时，还必须进行管制，不予以分配。因此，当进程申请某类临界资源时，在每次分配前，都必须测试资源数量，判断是否大于可分配的下限值，决定是否予以分配\n操作\nSwait(S1，t1，d1…Sn，tn，dn)\nSsignal(S1，d1…Sn，dn)\n特殊情况\n\n\n\n\n\n\n\n\n经典进程的同步问题\n\n生产者–消费者问题\n哲学家进餐问题\n读者–写者问题\n\n\n\n进程通信进程通信是指进程之间的信息交换，又称低级进程通信进程通信的类型\n共享存储器系统\n\n基于共享数据结构的通信方式\n生产者和消费者\n\n\n基于共享存储区的通信方式\n高级通信\n\n\n\n\n管道通信系统(pipe)\n\n高级通信\n\n\n消息传递系统\n\n高级通信\n方式分类\n直接通信\n间接通信\n\n\n\n\n客服机–服务器系统\n\n\n消息传递通信的实现方式\n直接消息传递系统\n信箱通信\n\n线程的基本概念线程的引入\n线程的引入正是为了简化线程间的通信，以小的开销来提高进程内的并发程度\n\n多线程并发的不足\n\n进程的两个基本属性\n一个拥有资源的独立单位，可独立分配系统资源\n一个可独立调度和分派的基本单位，PCB\n\n\n程序并发执行所需付出的时空开销\n创建进程\n撤销进程\n进程切换\n进程间通信效率低\n将分配资源和调度两个属性分开\n\n\n\n\n线程——作为调度和分派的基本单位\n\n进程是系统资源分配的单位，线程是处理器调度的单位\n线程表示进程的一个控制点，可以执行一系列的指令。通常，和应用程序的一个函数相对应\n进程分解为线程还可以有效利用多处理器和多核计算机\n\n\n\n线程与进程的比较\n不同点\n\n调度的基本单位\n并发性\n\n\n相似点\n\n状态：运行、阻塞、就绪\n线程具有一定的生命期\n进程可创建线程，一个线程可创建另一个子线程\n多个线程并发执行时仍然存在互斥与同步\n\n\n\n线程的实现\n线程的实现方式\n\n内核支持线程KST\n用户级线程ULT\n组合方式\n\n\n多线程OS中的进程属性\n\n进程是一个可拥有资源的基本单位\n多个线程可并发执行\n进程已不是可执行的实体\n\n\n线程的状态和线程控制块\n\n线程运行的三个状态\n执行状态\n就绪状态\n阻塞状态\n\n\n线程控制块TCB\n\n\n\n\n","slug":"操作系统-进程的描述与控制","date":"2022-01-17T10:56:41.805Z","categories_index":"操作系统","tags_index":"操作系统,进程","author_index":"天琦"},{"id":"d58045765cfed11a5e19353201052243","title":"操作系统-输入输出系统","content":"第六章：输入输出系统I/O系统的功能，模型和接口I/O系统管理的对象是I/O设备和相应的设备控制器。I/O系统的基本功能\n隐藏物理设备的细节\n与设备的无关性\n提高处理机和I/O设备的利用率\n对I/O设备进行控制\n确保对设备的正确共享\n错误处理\n\nI/O软件的层次结构\n用户层I/O软件\n设备独立性软件\n设备驱动程序（厂家开发）\n中断处理程序\n硬件\n\nI/O系统的分层\n中断处理程序\n设备驱动程序\n设备独立性软件\n\nI/O系统接口\n块设备接口\n指以数据块为单位来组织和传送数据信息的设备\n典型的块设备是磁盘、光盘\n块设备的基本特征\n①传输速率较高，通常每秒钟为几兆位；\n②它是可寻址的，即可随机地读/写任意一块；\n③磁盘设备的I/O采用DMA方式。\n\n\n\n\n流设备接口\n又称字符设备指以单个字符为单位来传送数据信息的设备\n这类设备一般用于数据的输入和输出，有交互式终端、打印机\n字符设备的基本特征\n①传输速率较低；\n②不可寻址，即不能指定输入时的源地址或输出时的目标地址；\n③字符设备的I/O常采用中断驱动方式。\n\n\n\n\n网络通信接口\n提供网络接入功能，使计算机能通过网络与其他计算机进行通信或上网浏览。\n\n\n\nI/O设备和设备控制器分类\n使用特性分\n存储设备\nI/O设备\n\n\n传输速率分\n低速设备（几字节——几百字节）\n典型的设备有键盘、鼠标、语音的输入\n\n\n中速设备（数千——数万字节）\n典型的设备有行式打印机、激光打印机\n\n\n高速设备（数十万——千兆字节）\n典型的设备有磁带机、磁盘机、光盘机\n\n\n\n\n\n设备并不是直接与CPU进行通信，而是与设备控制器通信。在设备与设备控制器之间应该有一个接口。\n数据信号：控制器 ←  设备 ←  控制器\n传送数据信号，输入、输出bit\n\n\n控制信号: 控制器  →  设备\n执行读、写操作的信号\n\n\n状态信号：设备当前使用状态\n\n设备控制器\n主要功能：控制一个或多个I/O设备，以实现I/O设备和计算机之间的数据交换\n基本功能\n接收和识别命令\n控制寄存器、命令译码器\n\n\n数据交换\n实现CPU与控制器，控制器与设备间的数据交换\n\n\n标识和报告设备的状态\n地址识别\n配置地址译码器，识别不同的设备\n\n\n数据缓冲区\n差错控制\n\n\n设备控制器的组成\n设备控制器与处理机（CPU）的接口\n实现CPU与设备控制器之间的通信\n\n\n设备控制器与设备的接口\n控制器可连接多个设备\n\n\nI/O逻辑\n实现对设备的控制\nCPU利用该逻辑向控制器发送I/O命令\n命令、地址译码\n\n\n\n\n\n内存映像I/O\n驱动程序将抽象I/O命令转换出的一系列具体的命令，参数等数据装入设备控制器的相应寄存器，由控制器来执行这些命令，具体实施对I/O设备的操作\n\nI/O通道\n目的：建立独立的I/O操作(组织, 管理和结束)，使由CPU处理的I/O工作转由通道完成（解放CPU，实现并行）\n什么是I/O通道？\n 是一种特殊的处理机，具有通过执行通道程序完成I/O操作的指令\n 特点：指令单一(局限于与I/O操作相关的指令)，与CPU共享内存\n\n\n基本过程：\nCPU向通道发出I/O指令-&gt;通道接收指令-&gt;从内存取出通道程序处理I/O-&gt;向CPU发出中断\n\n\n通道类型\n字节多路通道\n低中速连接子通道时间片轮转方式共享主通道\n字节多路通道不适于连接高速设备，这推动了按数组方式进行数据传送的数组选择通道的形成。\n\n\n数组选择通道\n这种通道可以连接多台高速设备，但只含有一个分配型子通道，在一段时间内只能执行一道通道程序， 控制一台设备进行数据传送， 直至该设备传送完毕释放该通道。这种通道的利用率很低。\n\n\n数组多路通道\n含有多个非分配型子通道，前两种通道的组合，通道利用率较好\n\n\n\n\n瓶颈问题\n原因;通道不足\n解决办法：增加设备到主机间的通路，而不增加通道（结果类似RS触发器）\n\n\n\n中断机构和中断处理程序中断\n分类\n中断（外部触发）\n对外部I/O设备发出的中断信号的响应\n\n\n陷入（内部原因：除0）\n由CPU内部事件引起的中断\n\n\n\n\n中断向量表（类比51单片机）\n中断程序的入口地址表\n\n\n中断优先级\n对紧急程度不同的中断处理方式\n\n\n对多中断源的处理方式\n屏蔽中断\n嵌套中断\n\n\n\n中断处理程序\n测定是否有未响应的中断信号\n保护被中断进程的CPU环境\n转入相应的设备处理程序\n中断处理\n恢复CPU 的现场并退出中断\n\n设备驱动程序是I/O进程与设备控制器之间的通信程序，又由于它常以进程的形式存在，故以后就简称为设备驱动进程主要任务是接受来自它上一层的与设备无关软件的抽象请求，并执行这个请求。功能\n\n接收由I/O进程发来的命令和参数， 并将命令中的抽象要求转换为具体要求。例如，将磁盘块号转换为磁盘的盘面、 磁道号及扇区号。\n\n\n\n检查用户I/O请求的合法性，了解I/O设备的状态，传递有关参数，设置设备的工作方式。 \n\n\n\n发出I/O命令，如果设备空闲，便立即启动I/O设备去完成指定的I/O操作；如果设备处于忙碌状态，则将请求者的请求块挂在设备队列上等待。\n\n\n\n及时响应由控制器或通道发来的中断请求，并根据其中断类型调用相应的中断处理程序进行处理。\n\n\n\n对于设置有通道的计算机系统，驱动程序还应能够根据用户的I/O请求，自动地构成通道程序。 \n\n\n\n设备驱动程序的处理过程\n将用户和上层软件对设备控制的抽象要求转换成对设备的具体要求，如对抽象要求的盘块号转换为磁盘的盘面、磁道及扇区。\n检查I/O请求的合理性。\n读出和检查设备的状态，确保设备处于就绪态。\n传送必要的参数，如传送的字节数，数据在主存的首址等。\n工作方式的设置。\n启动I/O设备，并检查启动是否成功，如成功则将控制返回给I/O控制系统，在I/O设备忙于传送数据时，该用户进程把自己阻塞，直至中断到来才将它唤醒，而CPU可干别的事。\n\n对I/O设备的控制方式\nI/O控制的宗旨\n减少CPU对I/O控制的干预\n充分利用CPU完成数据处理工作\n\n\nI/O 控制方式\n轮询的可编程I/O方式\n中断驱动I/O方式\nDMA控制方式\nI/O通道控制方式\n\n\n\nDMA控制器组成\n主机与DMA控制器的接口\nDMA控制器与块设备的接口\nI/O控制逻辑\n\n与设备无关的I/O软件基本概念\n含义： 应用程序独立于具体使用的物理设备。\n驱动程序是一个与硬件(或设备)紧密相关的软件。为实现设备独立性，须在驱动程序上设置一层软件，称为设备独立性软件。\n设备独立性(Device Independence)的优点\n以物理设备名使用设备\n引入了逻辑设备名\n逻辑设备名称到物理设备名称的转换（易于实现I/O重定向）\n\n\n\n与设备无关的软件\n设备驱动程序的统一接口\n缓存管理\n差错控制\n对独立设备的分配与回收\n独立于设备的逻辑数据块\n\n设备分配中的数据结构\n设备控制表DCT\n控制器控制表COCT\n通道控制表CHCT\n显然，在有通道的系统中，一个进程只有获得了通道，控制器和所需设备三者之后，才具备了进行I/O操作的物理条件\n系统设备表SDT\n逻辑设备表LUT\n分配的流程，从资源多的到资源紧张的:LUT-&gt;SDT-&gt;DCT-&gt;COCT-&gt;CHCT\n在申请设备的过程中，根据用户请求的I/O设备的逻辑名，查找逻辑设备和物理设备的映射表；以物理设备为索引，查找SDT，找到该设备所连接的DCT；继续查找与该设备连接的COCT和CHCT，就找到了一条通路。\n\n用户层的I/O软件系统调用与库函数\nOS向用户提供的所有功能，用户进程都必须通过系统调用来获取\n在C语言以及UNIX系统中，系统调用（如read）与各系统调用所使用的库函数（如read）之间几乎是一一对应的。而微软的叫Win32API\n\n假脱机系统（spooling）\nspooling技术是对脱机输入/输出系统的模拟\n主要组成\n输入/输出井\n输入/输出缓冲区\n输入/输出进程\n井管理程序\n\n\n特点（体现操作系统的虚拟性）\n提高了I/O的速度\n对数据所进行的I/O操作，已从对低速设备演变为对输入井或输出井中的数据存取。\n\n\n将独占设备改造为共享设备\n实际分给用户进程的不是打印设备，而是共享输出井中的存储区域 \n\n\n实现了虚拟设备功能\n将独占设备变成多台独占的虚拟设备。\n\n\n\n\n\n缓冲区管理缓冲的引入（原因）\n缓和CPU与I/O设备间速度不匹配的矛盾\n减少对CPU的中断频率，放宽对CPU中断响应时间的限制\n提高CPU和I/O设备之间的并行性\n解决数据粒度不匹配的问题\n\n单缓冲区\n即在CPU计算的时候，将数据数据输入到缓冲区(大小取决与T和C的大小)\n\n双缓冲区\n即允许CPU连续工作（T不断）\n\n环形缓冲区（专为生产者和消费者打造）\n组成\n多个缓冲区\n多个指针\n\n\n使用\nGetbuf过程\nReleasebuf过程\n\n\n同步问题\n\n缓冲池(理解为更大的缓冲区)\n组成\n空白缓冲队列（emq）\n由空缓冲区链接而成F(emq)，L(emq)分别指向该队列首尾缓冲区\n\n\n输入队列（inq）\n由装满输入数据的缓冲区链接而成F(inq)，L(inq)分别指向该队列首尾缓冲区\n\n\n输出队列（outq）\n由装满输出数据的缓冲区链接而成F(outq)， L(outq)分别指向该队列首尾缓冲\n\n\n\n\nGetbuf和Putbuf过程\n收容：缓冲池接收外界数据\n提取：外界从缓冲池获得数据\n\n\n缓冲区工作方式（从缓冲区的角度来看）\n收容输入\n提取输入\n收容输出\n提取输出\n\n\n\n磁盘存储器的性能和调度数据的组织和格式磁盘的类型\n固定头磁盘（贵）\n移动头磁盘\n\n磁盘访问的时间（关键）\n寻道时间Ts=m*n+s\n旋转延迟时间Tr\n传输时间Tt=b/rN\n总时间Ta=Ts+1/2r+b/rN\n\n磁盘的调度算法（掌握图表）\n先来先服务（FCFS）\n优点：公平，简单\n缺点：可能导致某些进程的请求长期得不到满足\n\n\n最短寻道时间优先（SSTF）\n说明：要求访问的磁道和当前磁头所在的磁道距离最近，以使每次的寻道时间最短\n\n\n扫描算法（SCAN）\n扫描算法不仅考虑到欲访问的磁道与当前磁道间的距离，更优先考虑的是磁道当前的移动方向\n联想电梯的运行\n可防止低优先级进程出现“饥饿”的现象\n\n\n循环扫描算法（CSCAN）\n算法规定磁头单向移动，例如，只是自里向外移动，当磁头移到最外的磁道并访问后，磁头立即返回到最里的欲访问磁道，亦即将最小磁道号紧接着最大磁道号构成循环，进行循环扫描\n\n\nNStepScan算法\nN步SCAN算法是将磁盘请求队列分成若干个长度为N的子队列，磁盘调度将按FCFS算法依次这些子队列。\n\n\nFSCAN算法\n是Nstepscan算法的简化，将磁盘请求队列分成两个子队列\n\n\n\n\n","slug":"操作系统-输入输出系统","date":"2022-01-17T10:56:41.800Z","categories_index":"操作系统","tags_index":"操作系统,输入输出系统","author_index":"天琦"},{"id":"f121329dd6a12ba42543fd4b22b2c313","title":"操作系统-虚拟存储器","content":"第五章：虚拟存储器常规存储管理方式的特征一次性驻留性局部性原理程序在执行时将呈现出局部性特征，即在一较短的时间内，程序的执行仅局限于某个部分，相应地，它所访问的存储空间也局限于某个区域时间局限性\n如果程序中的某条指令一旦执行， 则不久以后该指令可能再次执行；如果某数据被访问过， 则不久以后该数据可能再次被访问。产生时间局限性的典型原因，是由于在程序中存在着大量的循环操作\n\n空间局限性\n一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，其典型情况便是程序的顺序执行。\n\n定义指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统优点大程序：可在较小的可用内存中执行较大的用户程序；大的用户空间：提供给用户可用的虚拟内存空间通常大于物理内存(real memory)并发：可在内存中容纳更多程序并发执行；易于开发：不必影响编程时的程序结构以CPU时间和外存空间换取昂贵内存空间，这是操作系统中的资源转换技术特征离散性\n指在内存分配时采用离散的分配方式，它是虚拟存储器的实现的基础\n\n多次性\n指一个作业被分成多次调入内存运行，即在作业运行时没有必要将其全部装入，只须将当前要运行的那部分程序和数据装入内存即可。多次性是虚拟存储器最重要的特征\n\n对换性\n指允许在作业的运行过程中在内存和外存的对换区之间换进、换出。\n\n虚拟性\n指能够从逻辑上扩充内存容量，使用户所看到的内存容量远大于实际内存容量。\n\n虚拟存储器的实现方式请求分页存储管理方式\n硬件\n请求页表机制\n格式：页号+物理块号+状态位P+访问字段A+修改位M+外存地址\n\n\n缺页中断机构\n地址变换机构（过程图很关键）\n\n\n请求分页中的内存分配\n最小物理块数\n即能保证进程正常运行所需的最小物理块数\n\n\n内存分配策略\n固定分配局部置换（国王的大儿子）\n可变分配全局置换（国王的二儿子）\n可变分配局部置换（国王的小儿子）\n\n\n\n\n物理块分配算法\n平均分配算法\n按比例分配算法\n考虑优先权的分配算法\n\n\n页面调入策略\n系统应在何时调入所需页面\n预调页策略（不能实现）\n请求调页策略（需要才给）\n\n\n系统应该从何处调入这些页面\n对换区\n文件区\n\n\n页面调入过程\n缺页率（出计算题）\n\n\n\n请求分段系统\n硬件\n请求分段的段表机构\n缺段中断机构\n地址变换机构\n\n\n\n页面置换算法抖动的概念\n即刚被换出的页很快又要被访问，需要将它重新调入，此时又需要再选一页调出\n\n最佳置换算法(需要预知后面进程，所以不能实现)先进先出页面置换算法（FIFO）\n选择在内存中驻留时间最久的页面予以淘汰\n\n最近最久未使用置换算法（LRU）Recently\n寄存器支持\n特殊的栈结构\n\n最少使用置换算法（LFU）Frequentlyclock置换算法（对访问位A的判断）\n改进型——增加对修改位M思维判断\n\n页面缓冲算法（PBA,page buffering algorithm）\n空闲页面链表\n修改页面链表\n\n\n","slug":"操作系统-虚拟存储器","date":"2022-01-17T10:56:41.795Z","categories_index":"操作系统","tags_index":"操作系统,虚拟存储器","author_index":"天琦"},{"id":"e167c1764813b78cbd177e17c623704c","title":"操作系统-文件管理","content":"第七章：文件管理数据项基本数据项组合数据项记录记录是一组相关数据项的集合，用于描述一个对象在某个方面的属性文件文件类型文件长度文件的物理位置文件的建立时间文件操作创建文件删除文件读文件写文件设置文件读写的位置文件的逻辑结构顺序文件记录寻址索引文件索引顺序文件直接文件和哈希文件文件目录文件控制块（FCB）\n文件名+inode(属性)\n\n简单的文件目录\n单级文件目录\n查找慢\n不允许重名\n不便于实现文件共享\n\n\n两级文件目录\n提高检索速度，从M*N到M+N\n\n\n\n树形结构目录\n路径名\n“..”是父目录\n“/”是根目录\n区别绝对路径和相对路径（../…/…/1/2/3/）\n\n\n\n文件共享有向无循环图（DAG）利用符号链接实现文件共享\n实际上就是“快捷方式”\n\n文件保护\n","slug":"操作系统-文件管理","date":"2022-01-17T10:56:41.789Z","categories_index":"操作系统","tags_index":"操作系统,文件管理","author_index":"天琦"},{"id":"39a1d68c8b246f2bec009a9ddf2e0be4","title":"操作系统-引论","content":"一.操作系统引论1.操作系统的目标和功能目标\n方便性\n有效性\n提高系统资源利用率\n提高系统吞吐量\n\n\n可扩充性\n开放性\n\n作用\nOS作为用户与计算机硬件系统之间的接口\n命令方式\n系统调用方式\n图标–窗口方式\n\n\nOS实现了对计算机资源的抽象\n\n2.操作系统的发展过程未配置操作系统的计算机系统\n人工操作方式\n\n\n\n\n\n\n\n\n\n\n用户独占全机 CPU等待人工操作 严重降低了计算机资源的利用率\n\n脱机输入/输出(Off–Line I/O)方式\n\n\n\n\n\n\n\n\n\n\n减少了CPU的空闲时间 提高了I/O速度 效率仍然不理想\n\n\n单道批处理系统多道批处理系统\n\n\n\n\n\n\n\n\n1.资源利用率高2.系统吞吐量大3.平均周转时间长4.无交互能力\n\n(宏观并行，微观串行)\n\n分时系统\n\n\n\n\n\n\n\n\n特征:1.多路性2.独立性3.及时性4.交互性\n实时系统  指系统能及时（或即时）响应外部事件的请求，并控制所有实时任务协调一致地运行\n\n\n\n\n\n\n\n\n\n特征：实时性和可靠性；多路性、独立性、交互性\n集群系统–超算~云计算微机操作系统的发展3.操作系统的基本特征1.并发concurrence（最重要）\n并发（Concurrence）：在一段时间内同时存在多道运行地程序（进程）。\n\n\n\n\n\n\n\n\n\n\n宏观上：多道程序同时在执行。\n\n\n\n\n\n\n\n\n\n\n微观上：在单处理及系统中，任何时刻只有一道程序在执行，即微观上多道程序在CPU上交替执行。\n\n并行（Parallel）：指多道程序在同一时刻执行，通常需要多个硬件支持。\n\n区别并行和并发\n\n\n\n\n\n\n\n\n\n\n并行性是指两个或多个事件在同一时刻发生→宏观并行，微观并行\n\n\n\n\n\n\n\n\n\n\n并发性是指两个或多个事件在同一时间间隔内发生→宏观并行，微观串行\n\n并发是进程宏观一起运行，微观上交替运行，而并行是指同时运行\n\n\n引入进程\n\n\n\n\n\n\n\n\n\n\n进程是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令，数据和堆栈等组成的，是一个能独立运行的活动实体。通常地程序时静态实体。\n\n引入线程\n\n\n\n\n\n\n\n\n\n\n通常在一个进程中可以包含若干个线程，把线程作为独立运行和独立调度地基本单位。线程基本上不拥有系统资源，调度开销小，能提高系统内多个程序间并发执行的程度。\n\n\n2.共享sharing  指系统中的资源不再为某道程序所独占，而是供多道程序共同使用。\n\n1.互斥共享方式\n2.同时访问方式\n并发和共享是多用户(多任务)OS的两个最基本的特征。它们又是互为存在的条件\n\n3.虚拟virtual  虚拟是操作系统管理系统资源的重要手段，可提高资源利用率。\n\n时分复用，即分时使用方式。如：虚拟处理机、虚拟设备。\n空分复用，用于提高存储空间的利用率。如：虚拟磁盘、虚拟存储器。\n\n4.异步asynchronism  异步性也称不确定性，指进程在执行中，其执行时间、顺序、向前推进的速度和完成的时间等都是不可预知的。\n  “不确定性”不是说操作系统的功能不确定，也不是说同一程序在相同的数据集上的多次运行结果不确定，而是指同一道程序的多次运行所需的时间不确定，同一批程序的多次运行的运行序列和总运行时间不确定。\n4.操作系统的主要功能1.处理机管理功能\n进程控制\n进程同步\n进程互斥方式\n进程同步方式(协同)\n\n\n进程通信\n调度\n作业调度\n进程调度\n\n\n\n2.存储器管理功能\n内存分配\n静态分配\n动态分配\n\n\n内存保护\n地址映射\n内存扩充\n\n3.设备管理功能\n缓冲管理\n设备分配\n设备处理\n设备处理程序又称设备驱动程序\n\n\n\n4.文件管理功能\n文件存储空间的管理\n目录管理\n文件的读写管理和保护\n\n5.操作系统与用户之间的接口\n用户接口\n程序接口\n\n6.现代操作系统的新功能\n系统安全\n网络的功能和服务\n支持多媒体\n\n5.OS结构设计传统操作系统结构\n无结构操作系统\n模块化OS\n分层式结构OS\n\n微内核os结构\n客户/服务器模式（客户机、服务器、网络系统）\n面对对象的程序设计（封装、继承、多态）\n机制与策略分离\n\n\n\n\n\n\n\n\n机制 (Mechanism)，是指实现某一功能的具体执行机构。策略 (Policy)，是在机制的基础上，借助于某些参数和算法来实现该功能的方法。简单理解：软件是策略，硬件是机制。命令是策略，实施是机制。\n\n\n\n","slug":"操作系统-引论","date":"2022-01-17T10:56:41.784Z","categories_index":"操作系统","tags_index":"操作系统,引论","author_index":"天琦"},{"id":"61ce46b388aa93845c5e0ae4f1edb2c3","title":"操作系统-存储器管理","content":"第四章:存储器管理存储器的层次结构多层结构的存储系统\n存储器的多层结构\nCPU寄存器\n主存\n辅存\n\n\n可执行存储器\n寄存器和主存的总称\n访问速度快，进程可以在很少的时钟周期内用一条load或store指令完成存取。\n\n\n\n主存储器与寄存器高速缓存和磁盘缓存程序的装入和链接步骤\n编译\n源程序 -&gt;目标模块（Object modules）——–Compiler\n由编译程序对用户源程序进行编译，形成若干个目标模块\n\n\n\n\n链接\n一组目标模块 -&gt;装入模块 （Load Module）———-Linker\n由链接程序将编译后形成的一组目标模板以及它们所需要的库函数链接在一起，形成一个完整的装入模块\n\n\n\n\n装入\n装入模块 -&gt;内存  ——–Loader\n由装入程序将装入模块装入内存\n\n\n\n\n\n程序的装入\n绝对装入方式\n在编译时，如果知道程序将驻留在内存中指定的位置。编译程序将产生绝对地址的目标代码。\n\n\n可重定位装入方式\n在可执行文件中，列出各个需要重定位的地址单元和相对地址值。当用户程序被装入内存时，一次性实现逻辑地址到物理地址的转换，以后不再转换(一般在装入内存时由软件完成)。\n优点：不需硬件支持，可以装入有限多道程序。\n缺点：一个程序通常需要占用连续的内存空间，程序装入内存后不能移动。不易实现共享。\n\n\n动态运行时的装入方式\n动态运行时的装入程序在把装入模块装入内存后，并不立即把装入模块中的逻辑地址转换为物理地址，而是把这种地址转换推迟到程序真正要执行时才进行\n优点：\nOS可以将一个程序分散存放于不连续的内存空间，可以移动程序，有利用实现共享。\n能够支持程序执行中产生的地址引用，如指针变量（而不仅是生成可执行文件时的地址引用）。\n\n\n缺点：需要硬件支持，OS实现较复杂。\n它是虚拟存储的基础。\n\n\n\n程序的链接\n静态链接方式(lib)\n装入时动态链接\n运行时动态链接(dll)\n\n连续分配存储管理方式连续分配\n单一连续分配(DOS)\n固定分区分配(浪费很多空间)\n动态分区分配\n\n地址映射和存储保护措施\n基址寄存器：程序的最小物理地址\n界限寄存器：程序的逻辑地址范围\n物理地址 = 逻辑地址 + 基址\n\n内碎片：占用分区之内未被利用的空间外碎片：占用分区之间难以利用的空闲分区（通常是小空闲分区）把内存划分为若干个固定大小的连续分区。固定式分区又称为静态分区。\n分区大小相等：只适合于多个相同程序的并发执行（处理多个类型相同的对象）。\n分区大小不等：多个小分区、适量的中等分区、少量的大分区。根据程序的大小，分配当前空闲的、适当大小的分区。\n优点：无外碎片、易实现、开销小。\n缺点：\n存在内碎片，造成浪费\n分区总数固定，限制了并发执行的程序数目。\n通用Os很少采用，部分控制系统中采用\n\n\n\n动态创建分区：指在作业装入内存时，从可用的内存中划出一块连续的区域分配给它，且分区大小正好等于该作业的大小。可变式分区中分区的大小和分区的个数都是可变的，而且是根据作业的大小和多少动态地划分。\n基于顺序搜索的动态分区分配算法\n首次适应算法（first fit,FF）\n顺序找，找到一个满足的就分配，但是可能存在浪费\n这种方法目的在于减少查找时间。\n空闲分区表（空闲区链）中的空闲分区要按地址由低到高进行排序\n\n\n循环首次适应算法（next fit，NF）\n相对上面那种，不是顺序，类似哈希算法中左右交叉排序\n空闲分区分布得更均匀，查找开销小\n从上次找到的空闲区的下一个空闲区开始查找，直到找到第一个能满足要求的的空闲区为止，并从中划出一块与请求大小相等的内存空间分配给作业。\n\n\n最佳适应算法（best fit，BF）\n找到最合适的，但是大区域的访问次数减少\n这种方法能使外碎片尽量小。\n空闲分区表（空闲区链）中的空闲分区要按大小从小到大进行排序，自表头开始查找到第一个满足要求的自由分区分配。\n\n\n最坏适应算法（worst fit，WF）\n相对于最好而言，找最大的区域下手，导致最大的区域可能很少，也造成许多碎片\n空闲分区按大小由大到小排序\n\n\n\n\n基于索引搜索的动态分区分配算法\n快速适应算法（quick fit）\n伙伴系统（buddy system）\n哈希算法\n\n\n动态可重定位分区分配\n紧凑\n动态重定位\n动态运行时装入，地址转化在指令执行时进行，需获得硬件地址变换机制的支持\n内存地址=相对地址+起始地址\n\n\n动态重定位分区分配算法\n1、在某个分区被释放后立即进行紧凑，系统总是只有一个连续的分区而无碎片，此法很花费机时。\n2、当“请求分配模块”找不到足够大的自由分区分给用户时再进行紧凑，这样紧缩的次数比上种方法少得多，但管理复杂。采用此法的动态重定位分区分配算法框图如下：\n\n\n\n\n优点：没有内碎片。\n缺点：外碎片。\n\n对换（了解）系统把所有的作业放在外存，每次只调用一个作业进入内存运行，当时间片用完时，将它调至外存后备队列上等待，在从后备队列调入另一个作业进入内存运行。基本分页存储管理方式分页存储管理的基本方式\n页面\n将一个进程的逻辑地址空间分成若干个大小相等的片\n\n\n页框（frame）\n内存空间分成与页面相同大小的存储块\n\n\n由于进程的最后一页经常装不满一块而形成了不可利用的碎片，称之为“页内碎片”\n地址结构\n页号P+位移量W(0-31)\n\n\n页表\n在分页系统中，允许将进程的各个页离散地存储在内存在内存的任一物理块中，为保证进程仍然能够正确地运行，即能在内存中找到每一个页面所对应的物理块，系统又为每个进程建立了一张页面映像表，简称页表\n页表的作用是实现从页面号到物理块号的地址映射\n\n\n\n地址变换机构\n基本的地址变换机构\n要访问两次内存\n页表大都驻留在内存中\n为了实现地址变换功能，在系统中设置页表寄存器（PTR），用来存放页表的始址和页表的长度。\n在进程未执行时，每个进程对应的页表的始址和长度存放在进程的PCB中，当该进程被调度时，就将它们装入页表寄存器。\n\n\n具有快表的地址变换机构\n提高了效率，此处会有计算题\n如果页表存放在内存中，则每次访问内存时，都要先访问内存中的页表，然后根据所形成的物理地址再访问内存。这样CPU存一个数据必须访问两次内存，从而使计算机的处理速度降低了1/2。\n为了提高地址变换的速度，在地址变换机构中增设了一个具有并行查询功能的特殊的高速缓冲存储器，称为“联想存储器”或“快表”，用以存放当前访问的那些页表项。\n地址变换过程为：\n1、CPU给出有效地址\n2、地址变换机构自动地将页号送入高速缓存，确定所需要的页是否在快表中。\n3、若是，则直接读出该页所对应的物理块号，送入物理地址寄存器；\n4、若快表中未找到对应的页表项，则需再访问内存中的页表\n5、找到后，把从页表中读出的页表项存入快表中的一个寄存器单元中，以取代一个旧的页表项。\n\n\n\n\n\n两级和多级页表\n主要是有的时候页表太多了，要化简\n格式：外层页号P1+外层页内地址P2+页内地址d\n基本方法：将页表进行分页，每个页面的大小与内存物理块的大小相同，并为它们进行编号，可以离散地将各个页面分别存放在不同的物理块中。\n\n反置页表\n反置页表为每一个物理块（页框）设置一个页表项，并按物理块排序，其内容则是页号和其所属进程的标识。\n\n优点：\n没有外碎片，每个内碎片不超过页大小。\n一个程序不必连续存放。\n便于改变程序占用空间的大小。即随着程序运行而动态生成的数据增多，地址空间可相应增长。\n\n缺点：程序全部装入内存。分段存储管理方式引入\n方便编程\n信息共享\n动态增长\n动态链接\n\n在分段存储管理方式中，作业的地址空间被划分为若干个段，每个段是一组完整的逻辑信息，每个段都有自己的名字，都是从零开始编址的一段连续的地址空间，各段长度是不等的。内存空间被动态的划分为若干个长度不相同的区域，称为物理段，每个物理段由起始地址和长度确定分段系统的基本原理\n分段\n格式：段号+段内地址\n\n\n段表\n段表实现了从逻辑段到物理内存区的映射。\n\n\n地址变换机构\n\n和分页的区别\n页是信息的物理单位\n页的大小固定且由系统固定\n分页的用户程序地址空间是一维的\n通常段比页大，因而段表比页表短，可以缩短查找时间，提高访问速度。\n分页是系统管理的需要，分段是用户应用的需要。一条指令或一个操作数可能会跨越两个页的分界处，而不会跨越两个段的分界处。\n\n信息共享\n这是分段最重要的优点\n\n段页式存储管理方式\n基本原理\n格式：段号（S）+段内页号（P）+页内地址（W）\n\n\n地址变换过程\n需要三次访问过程\n\n\n在段页式系统中，为了获得一条指令或数据，需三次访问内存：第一次访问内存中的段表，从中取得页表始址；第二次访问内存中的页表，从中取出该页所在的物理块号，并将该块号与页内地址一起形成指令或数据的物理地址；第三次访问才是真正根据所得的物理地址取出指令或数据。\n\n\n","slug":"操作系统-存储器管理","date":"2022-01-17T10:56:41.778Z","categories_index":"操作系统","tags_index":"操作系统,存储器管理","author_index":"天琦"},{"id":"1d2ed8984af443f473a28e444517b102","title":"操作系统-处理机调度与死锁","content":"第三章:处理机调度与死锁处理机调度算法的目标处理机调度算法的共同目标\n资源利用率:CPU的利用率=CPU有效工作时间/(CPU有效工作时间+CPU空闲等待时间)\n公平性\n平衡性\n策略强制执行\n\n批处理系统的目标\n平均周转时间短\n系统吞吐量高\n处理机利用率高\n\n分时系统的目标\n响应时间快\n均衡性\n\n实时系统目标\n截止时间的保证\n可预测性\n\n处理机调度的层次\n高级调度（作业调度）\n分时系统无需作业调度，因为需要交互\n批处理系统需要作业调度\n\n\n中级调度（和挂起有关）\n低级调度（进程调度）\n进程调度是最基本的调度，任何操作系统都有进程调度。\n低级调度的三个基本机制\n排队器\n分派器\n上下文切换\n\n\n进程调度方式\n非抢占方式\n抢占方式\n优先权原则\n短进程优先原则\n时间片原则\n\n\n\n\n进程调度的任务\n保存处理机的现场信息\n按某种算法选取进程\n把处理器分配给进程\n\n\n进程调度的算法\n优先级调度算法\n优先级调度算法的类型\n非抢占式优先级调度算法\n等当前进程执行完以后，再执行另一个优先权最高的进程\n这种调度算法主要用于批处理系统中；也可用于某些对实时性要求不严的实时系统中。 \n\n\n抢占式优先级调度算法\n不等当前进程结束，直接抢处理机\n常用于要求比较严格的实时系统中， 以及对性能要求较高的批处理和分时系统中。\n\n\n\n\n优先级的类型\n静态优先级\n优先权是在创建进程时确定的，且在进程的整个运行期间保持不变。一般地，优先权是利用某一范围内的一个整数来表示的，例如，07或0255中的某一整数， 又把该整数称为优先数。\n可以参考BIOS系统中设置boot的优先级\n\n\n动态优先级\n在创建进程时所赋予的优先权，是可以随进程的推进或随其等待时间的增加而改变的，以便获得更好的调度性能。\n\n\n\n\n\n\n轮转调度算法\n基本原理:在轮转(RR)法中，系统根据FCFS策略，将所有的就绪进程排成一个就绪队列，并可设置每隔一定时间间隔(如30ms)即产生一次中断，激活系统中的进程调度程序，完成一次调度，将CPU分配给队首进程，令其执行\n进程切换时机\n时间片未用完，进程完成\n时间片到，进程未完成\n\n\n时间片大小的确定\n太小利于短作业，增加系统切换开销\n太长就退化为FCFS算法\n一般选择: q略大于一次交互所需要的时间，使大多数进程在一个时间片内完成\n\n\n一般来说，平均周转时间将比SJF长，但是有较好的响应时间\n\n\n多队列调度算法\n多级反馈队列调度算法\n调度机制\n设置多个就绪队列\n每个队列都采用FCFS算法\n按照队列优先级调度，在第n队列中采取按时间片轮转的方式运行\n\n\n调度算法的性能\n对于终端型用户，由于作业小，感觉满意\n对于短批处理作业用户，周转时间也较小\n长批处理作业用户，也能够得到执行\n\n\n\n\n基于公平原则的调度算法\n保证调度算法\n公平分享调度算法\n\n\n\n\n\n\n\n作业与作业调度作业\n作业不仅包含程序和数据，还配有一份作业说明书，系统根据说明书对程序的运行进行控制。批处理系统是以作业为单位从外存掉入内存的。\n\n作业控制块JCB\n为每个作业设置一个JCB，保存了对作业管理调度的全部信息。是作业存在的标志。\n\n作业步\n作业步，每个作业都必须经过若干相对独立，有相互关联的顺序步骤才能得到结果。每一个步骤就是一个作业步。\n\n作业运行的三个阶段\n收容阶段\n运行阶段\n完成阶段\n\n作业运行的三个状态\n后备状态\n运行状态\n完成状态\n\n作业调度的主要任务\n接纳多少个作业\n接纳哪些作业\n\n先来先服务(first–come first–served，FCFS)调度算法\n比较有利于长作业，而不利于短作业。\n有利于CPU繁忙的作业，而不利于I/O繁忙的作业。\n\n短作业优先(short job first，SJF)的调度算法\n优点\n比FCFS改善平均周转时间和平均带权周转时间，缩短作业的等待时间；\n提高系统的吞吐量；\n\n\n缺点\n必须预知作业的运行时间\n对长作业非常不利，长作业的周转时间会明显地增长\n在采用SJF算法时，人–机无法实现交互\n该调度算法完全未考虑作业的紧迫程度，故不能保证紧迫性作业能得到及时处理\n\n\n\n优先级调度算法(priority–scheduling algorithm，PSA)高响应比优先调度算法(Highest Response Ratio Next,HRRN)\n原理\n在每次选择作业投入运行时，先计算此时后备作业队列中每个作业的响应比RP然后选择其值最大的作业投入运行\n优先权=(等待时间+要求服务时间)/要求服务时间=响应时间/要求服务时间=1+等待时间/要求服务时间\n\n\n特点\n如果作业的等待时间相同，则要求服务的时间愈短，其优先权愈高，因而类似于SJF算法，有利于短作业\n当要求服务的时间相同时，作业的优先权又决定于其等待时间，因而该算法又类似于FCFS算法\n对于长时间的优先级，可以为随等待时间的增加而提高，当等待时间足够长时，也可获得处理机\n\n\n\n实时调度(HRT和SRT任务)实现实时调度的基本条件\n提供必要信息\n就绪时间\n开始截止时间和完成截止时间\n处理时间\n资源要求\n优先级\n\n\n系统处理能力强\n∑(Ci/Pi)≤1\nN个处理机:∑(Ci/Pi)≤N\n\n\n采用抢占式调度机制\n具有快速切换机制\n对中断的快速响应能力\n快速的任务分派能力\n\n\n\n实时调度算法的分类\n非抢占式调度算法\n非抢占式轮转调度算法\n非抢占式优先调度算法\n\n\n抢占式调度算法\n基于时钟中断的抢占式优先级调度算法\n立即抢占的优先级调度算法\n\n\n\n最早截止时间优先EDF(Earliest Deadline First)算法\n根据任务的开始截至时间来确定任务的优先级\n截至时间越早，优先级越高\n\n\n非抢占式调度方式用于非周期实时任务\n抢占式调度方式用于周期实时任务\n\n最低松弛度优先LLF(Least Laxity First)算法\n类似EDF\n算法根据任务紧急(或松弛)的程度，来确定任务的优先级。任务的紧急程度愈高，为该任务所赋予的优先级就愈高， 以使之优先执行。\n松弛度例子\n例如，一个任务在200ms时必须完成，而它本身所需的运行时间就有100ms，因此，调度程序必须在100 ms之前调度执行，该任务的紧急程度(松弛程度)为100 ms\n\n\n\n优先级倒置(Priority inversion problem)\n优先级倒置的形成\n高优先级进程被低优先级进程延迟或阻塞。\n\n\n优先级倒置的解决方法\n简单的:假如进程P3在进入临界区后P3所占用的处理机就不允许被抢占\n实用的:建立在动态优先级继承基础上的\n\n\n\n死锁概述资源问题\n可重用性资源\n计算机外设\n\n\n消耗性资源\n数据，消息\n\n\n可抢占性资源\n 不引起死锁\nCPU，内存 \n\n\n不可抢占性资源\n光驱，打印机\n\n\n\n计算机系统中的死锁\n竞争不可抢占性资源引起死锁\n竞争可消耗资源引起死锁\n进程推进顺序不当引起死锁\n\n死锁的定义，必要条件和处理方法\n定义:如果一组进程中的每一个进程都在等待仅由该进程中的其他进程才能引发的事件，那么该组进程是死锁的\n产生死锁的必要条件\n互斥条件\n请求和保存条件\n不可抢占条件\n循环等待条件\n如果每个资源只有一个实例，则环路等待条件是死锁存在的充分必要条件\n\n\n\n\n处理死锁的方法\n预防死锁\n静态方法，在进程执行前采取的措施，通过设置某些限制条件，去破坏产生死锁的四个条件之一，防止发生死锁。\n预防死锁的策略\n破坏”请求和保存”条件\n第一种协议\n所有进程在开始运行之前，必须一次性地申请其在整个运行过程中所需的全部资源\n优点:简单，易行，安全\n缺点\n资源被严重浪费，严重地恶化了资源的利用率\n使进程经常会发生饥饿现象\n\n\n\n\n第二种协议\n它允许一个进程只获得运行初期所需的资源后，便开始运行。进程运行过程中再逐步释放已分配给自己的，且已用毕的全部资源，然后再请求新的所需资源\n\n\n\n\n破坏”不可抢占”条件\n当一个已经保存了某些不可被抢占资源的进程，提出新的资源请求而不能得到满足时，它必须释放已经保持的所有资源，待以后需要时再重新申请\n\n\n破坏”循环等待”条件\n对系统所以资源类型进行线性排序，并赋予不同的序号\n例如令输入机的序号为1，打印机序号为2，磁盘机序号为3等。所有进程对资源的请求必须严格按资源序号递增的次序提出。\n\n\n\n\n\n\n避免死锁\n动态的方法，在进程执行过程中采取的措施，不需事先采取限制措施破坏产生死锁的必要条件，而是在进程申请资源时用某种方法去防止系统进入不安全状态，从而避免发生死锁。如银行家算法\n避免死锁的策略\n系统安全状态\n安全状态\n某时刻，对于并发执行的n个进程，若系统能够按照某种顺序如&lt;p1,p2…pn&gt;来为每个进程分配所需资源，直至最大需求，从而使每个进程都可顺利完成，则认为该时刻系统处于安全状态，这样的序列为安全序列\n\n\n安全状态之例\n由安全状态向不安全状态的转换\n\n\n利用银行家算法避免死锁\n含义:每一个新进程在进入系统时，它必须申明在运行过程中，可能需要每种资源类型的最大单元数目，其数目不应超过系统所拥有的资源总量。当进程请求一组资源时，系统必须首先确定是否有足够的资源分配给该进程。若有，再进一步计算在将这些资源分配给进程后，是否会使系统处于不安全状态。如果不会，才将资源分配给它，否则让进程等待\n银行家算法中的数据结构\n可用资源向量 Available[m]：m为系统中资源种类数，Available[j]=k表示系统中第j类资源数为k个。\n最大需求矩阵 Max[n,m]：n为系统中进程数，Max[i,j]=k表示进程i对j类资源的最大需求数为中k。\n分配矩阵 Allocation[n，m]:它定义了系统中每一类资源当前已分配给每一进程资源数，   Allocation[i,j] = k表示进程i已分得j类资源的数目为k个。\n需求矩阵 Need[n,m]：它表示每个进程尚需的各类资源数，Need[i,j]=k 表示进程i   还需要j类资源k个。Need[i,j]=Max[i,j] - Allocation[i,j]\n\n\n银行家算法\n安全性算法\n银行家算法之例\n解题\n矩阵\n列表\n\n\n\n\n\n\n\n\n检测死锁\n死锁的检测与解除\n死锁的检测\n资源分配图\n简化步骤\n选择一个没有阻塞的进程p\n将p移走，包括它的所有请求边和分配边\n重复步骤1，2，直至不能继续下去\n\n\n\n\n死锁定理\n若一系列简化以后不能使所有的进程节点都成为孤立节点\n\n\n检测时机\n 当进程等待时检测死锁 （其缺点是系统的开销大）\n 定时检测\n 系统资源利用率下降时检测死锁\n\n\n死锁检测中的数据结构\n\n\n死锁的解除\n抢占资源\n终止(或撤销)进程\n终止进程的方法\n终止所有死锁进程\n逐个终止进程\n代价最小\n进程的优先级的大小\n进程已执行了多少时间，还需时间\n进程在运行中已经使用资源的多少，还需多少资源\n进程的性质是交互式还是批处理的\n\n\n\n\n\n\n付出代价最小的死锁解除算法\n是使用一个有效的挂起和解除机构来挂起一些死锁的进程\n\n\n\n\n\n\n\n\n解除死锁\n\n\n\n\n","slug":"操作系统-处理机调度与死锁","date":"2022-01-17T10:56:41.772Z","categories_index":"操作系统","tags_index":"操作系统,处理机调度与死锁","author_index":"天琦"},{"id":"5d8159d6c4d39f32f65e93170e5d526a","title":"学习网站推荐","content":"今天在B站翻到了UP主“三太子敖丙”在六月发布的大学四年自学走来，这些私藏的实用工具/学习网站我贡献出来了，感觉分享的网站对在大学期间自学挺有用的，所以写下来，记录一下。\n\nB站\n\n众所周知，B站是个学习网站\n\n\n中国大学MOOC\n\nIMOOC\n\n极客时间\n\n极客学院\n\n网易云课堂\n\n百度  \n\n知乎\n\nGitHub\n\n我要自学网\n\nw3school\n\n菜鸟教程\n\n豆瓣\n\n微信读书\n\nCSDN\n\nstackoverflow\n\n开源中国\n\nV2ex\n\ninfoQ\n\n有道词典\n\n印象笔记\n\n\n","slug":"学习网站","date":"2022-01-17T10:56:41.766Z","categories_index":"分享","tags_index":"学习网站","author_index":"天琦"},{"id":"f7db2861f70ddb007b7ba571d918c967","title":"LeetCode每日一题2021/01/20","content":"题目：628. 三个数的最大乘积难度：简单\n给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。\n示例1：\n输入: [1,2,3]\n输出: 6\n\n示例2：\n输入: [1,2,3,4]\n输出: 24\n\n注意:\n\n给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[-1000, 1000]。\n输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。  \n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/maximum-product-of-three-numbers\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n解题思路分三种情况讨论：\n\n数组中全是正数\n此时遍历数组找出数组中第一大的元素max1、第二大的元素max2、第三大的元素max3\nresult = max1*max2*max3 ;\n\n\n\n\n数组中全是负数\n此时遍历数组找出数组中第一大的元素max1、第一小的元素min1、第二小的元素min2\nresult = max1*min1*min2 ;\n\n\n\n\n数组中既有正数又有负数\n此时result = MAX(max1*max2*max3 , max1*min1*min2 );\n\n\n\n综合上述三种情况可知：result = MAX(max1*max2*max3 , max1*min1*min2 );\nclass Solution &#123;\n    public int maximumProduct(int[] nums) &#123;\n        int max1 &#x3D; -1001;\n        int max2 &#x3D; max1;\n        int max3 &#x3D; max1;\n        int min1 &#x3D; 1001;\n        int min2 &#x3D; min1;\n\n        for (int i &#x3D; 0;i &lt; nums.length;i++) &#123;\n            int n &#x3D; nums[i];\n\n            if (n &gt; max1) &#123;\n                max3 &#x3D; max2;\n                max2 &#x3D; max1;\n                max1 &#x3D; n;\n            &#125; else if (n &gt; max2) &#123;\n                max3 &#x3D; max2;\n                max2 &#x3D; n;\n            &#125; else if (n &gt; max3) &#123;\n                max3 &#x3D; n;\n            &#125; \n\n            if (n &lt; min1) &#123;\n                min2 &#x3D; min1;\n                min1 &#x3D; n;\n            &#125; else if (n &lt; min2) &#123;\n                min2 &#x3D; n;\n            &#125;\n        &#125;\n\n        return Math.max(max1 * max2 * max3,max1 * min1 * min2);\n    &#125;\n&#125;","slug":"力扣每日一题20210120","date":"2022-01-17T10:56:41.757Z","categories_index":"数据结构与算法","tags_index":"LeetCode每日一题","author_index":"天琦"},{"id":"838ae74e3a76757d637de803a615bfd9","title":"MySQL","content":"1、数据库的安装2、操作数据库2.1、数据库的操作（了解）1、创建数据库\n\n\n\n\n\n\n\n\n\nCREATE DATABASE [IF NOT EXISTS] myDataBase;\n2、删除数据库\n\n\n\n\n\n\n\n\n\nDROP DATABASE [IF EXISTS] myDataBase;\n3、使用数据库\n\n\n\n\n\n\n\n\n\n– tab上面的点，如果表名或者字段名是一个特殊字符，就需要加 ``\n\n\n\n\n\n\n\n\n\nUSE school\n4、查看数据库\n\n\n\n\n\n\n\n\n\nSHOW DATABASES –查看所有数据库\n学习思路：\n·  对照SQLyog可视化历史记录查看SQL语句\n·  固定的语法或关键字必须要强行记住。\n2.2、数据库的列类型\n\n\n\n\n\n\n\n\n数值\n\n\n\n类型\n数据大小\n字节数\n备注\n\n\n\ntinyint\n十分小的数据\n1个字节\n\n\n\nsmallint\n较小的数据\n2个字节\n\n\n\nmediumint\n中等大小的数据\n3个字节\n\n\n\nint\n标准的整数\n4个字节\n最常用\n\n\nbigint\n较大的数据\n8个字节\n\n\n\nfloat\n浮点数\n4个字节\n\n\n\ndouble\n浮点数\n8个字节\n存在精度问题\n\n\ndecimal\n字符串形式的浮点数\n\n金融计算的时候，一般会使用decimal。\n\n\n\n\n\n\n\n\n\n\n\n字符串\n\n\n\n类型\n说明\n大小\n备注\n\n\n\nchar\n字符串固定大小的\n0~255\n\n\n\nvarchar\n可变字符串\n0~65535\n常用的变量、String\n\n\ntinytext\n微型文本\n2^8-1\n\n\n\ntext\n文本串\n2^16-1\n保存大文本\n\n\n\n\n\n\n\n\n\n\n\n时间日期\n\n\n\n类型\n说明\n备注\n\n\n\ndate\nYYYY-MM-DD\n日期格式\n\n\ntime\nHH:mm:ss\n时间格式\n\n\ndatetime\nYYYY-MM-DD HH:mm:ss\n最常用的时间格式\n\n\ntimestamp\n时间戳，1970年1月1日到现在的毫秒数\n常用\n\n\nyear\n年份表示\n\n\n\n\n\n\n\n\n\n\n\n\nnull\n\n没有值、未知\n注意：不要使用NULL进行运算，结果为NULL\n\n2.3、数据库的字段类型（重点） Unsigned\n\n无符号整数\n表示了该列不能声明为负数\n\nzerofill\n\n0填充\n不足的位数，使用0来填充。int(3), 5–&gt; 005\n\n自增\n\n自动在上一条记录的基础上+1（默认）\n通常用来设计唯一的主键~ index，必须是整数类型。\n可以自定义设计主键自增的起始值和步长。\n\n非空 NULL not null\n\n设置为not null时，如果不给他赋值，就会报错！\nNULL，如果不填写值，默认就是NULL\n\n默认\n\n设置默认的值\nsex，默认为难，如果不指定该列的值，则会有默认的值。\n\n2.4、创建数据库表（重点）-- 目标：创建一个school数据库\n-- 创建学生表（列、字段） 使用SQL创建\n-- 学号int 登录密码varchar（20） 姓名，性别varchar（2），出生日期（datatime），家庭住址，email\n\n-- 注意点，使用英文（），表的名称和字段尽量使用&#96;&#96;括起来。\n-- AUTO_INCRAMENT 自增\n-- 字符串使用 单引号括起来\n-- 所有语句后面加英文的逗号，最后一个语句不用加\nCREATE TABLE IF NOT EXISTS &#96;student&#96;(\n\t&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,\n    &#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,\n    &#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,\n    &#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,\n    &#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,\n    &#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;家庭住址&#39;,\n    &#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,\n    PRIMARY KEY (&#96;id&#96;)\n)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8\n\n格式\nCREATE TABLE [IF NOT EXISTS] 表名(\n\t&#96;字段名&#96; 列类型[属性][索引][注释],\n    &#96;字段名&#96; 列类型[属性][索引][注释],\n    &#96;字段名&#96; 列类型[属性][索引][注释],\n    ......\n    &#96;字段名&#96; 列类型[属性][索引][注释],\n)[表类型][字符集设置][注释]\n\n常用命令\nSHOW CREATE DATABASE school  -- 查看创建数据库的语句\nSHOW CREATE TABLE student  -- 查看student数据表的定义语句\nDESC student  -- 显示表的结构\n\n\n\n2.5、数据表的类型-- 关于数据库引擎\n&#x2F;*\nINNODB 默认使用\nMYISAM 早些年使用的\n*&#x2F;\n\n\n\n\n\nMYISAM\nINNODB\n\n\n\n事务支持\n不支持\n支持\n\n\n数据行锁定\n不支持\n支持\n\n\n外键约束\n不支持\n支持\n\n\n全文索引\n支持\n不支持(3.8版本之后支持)\n\n\n表空间的大小\n较小\n较大，约为MYISAM的2倍\n\n\n常规使用操作\n\nMYISAM 节约空间，速度较快\nINNODB 安全性高，事物的处理，多表多用户操作\n\n\n\n\n\n\n\n\n\n\n在物理空间存在的位置\n所有的数据库文件都存在data目录下\n本质还是文件的存储！\nMySQL引擎在物理文件上的区别\n\nINNODB在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件\nMYISAM对应文件\n*frm -表结构的定义文件\n*.MYD -数据文件（data）\n*.MYI -索引文件（index）\n\n\n\n\n\n\n\n\n\n\n\n\n设置数据库表的字符集编码\nCHARSET&#x3D;utf8\n\n不设置的话，会是mysql默认的字符集编码（不支持中文！）\nMySQL的默认编码时Latin1，不支持中文\n在my.ini中配置默认的编码\ncharacter-set-server&#x3D;utf8\n\n2.6、删除数据库表\n\n\n\n\n\n\n\n\n修改\n-- 修改表名 ALTER TABLE 旧表名 RENAME AS 新表名\nALTER TABLE teacher RENAME AS teachers\n-- 增加表的字段 ALTER TABLE 表名 ADD 字段名 列属性\nALTER TABLE teacher1 ADD age INT(11)\n-- 修改表的字段（重命名，修改约束）\n-- ALTER TABLE 表名 MODIFY 字段名 列属性\nALTER TABLE teacher1 MODIFY age VARCHAR(11)  -- 修改约束\n-- ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性\nALTER TABLE teacher1 CHANGE age age1 INT(11)  -- 字段重命名\n\n\n\n\n\n\n\n\n\n\n删除\n-- 删除表的字段 ALTER TABLE 表名 DROP 字段名\nALTER TABLE teacher1 DROP age1\n-- 删除表(如果存在表才删除)\nDROP TABLE [IF EXISTS] teacher1\n\n所有的创建和删除操作尽量加上判断，以面报错\n注意点：\n\n``所有的字段名，使用这个符号包裹！\n注释用–  或者/**/\nSQL关键字大小写不敏感，建议写小写\n所有符号全部用英文！\n\n3、MySQL数据管理3.1、外键\n\n\n\n\n\n\n\n\n方式一：在创建表的时候，增加约束（麻烦，复杂）\n-- 创建年级表\nCREATE TABLE &#96;grade&#96;(\n\t&#96;gradeid&#96; int(10) not null auto_increment comment &#39;年级id&#39;,\n    &#96;gradename&#96; carchar(50) not null comment &#39;年级名称&#39;,\n    primary key(&#96;gradeid&#96;)\n)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8\n\n-- 创建学生表\nCREATE TABLE IF NOT EXISTS &#96;student&#96;(\n\t&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,\n    &#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,\n    &#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,\n    &#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,\n    &#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,\n    -- 学生表的gradeid字段要去引用年级表的gradeid\n    &#96;gradeid&#96; int(10) not null comment &#39;学生的年级&#39;,\n    &#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;家庭住址&#39;,\n    &#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,\n    PRIMARY KEY (&#96;id&#96;),\n    -- 1、定义外键key\n    key &#96;FK_gradeid&#96; (&#96;gradeid&#96;),\n    -- 给这个外键添加约束（执行引用） references 引用\n    constraint &#96;FK_gradeid&#96; foreign key(&#96;gradeid&#96;) references &#96;grade&#96;(&#96;gradeid&#96;)\n)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8\n\n删除有外键关系的表的时候，必须要先删除引用别人的表（从表），再删除被引用的表（主表）\n\n\n\n\n\n\n\n\n\n方式二：创建表成功后，添加外键约束\n-- 创建年级表\nCREATE TABLE &#96;grade&#96;(\n\t&#96;gradeid&#96; int(10) not null auto_increment comment &#39;年级id&#39;,\n    &#96;gradename&#96; carchar(50) not null comment &#39;年级名称&#39;,\n    primary key(&#96;gradeid&#96;)\n)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8\n\n-- 创建学生表\nCREATE TABLE IF NOT EXISTS &#96;student&#96;(\n\t&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,\n    &#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,\n    &#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,\n    &#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,\n    &#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,\n    -- 学生表的gradeid字段要去引用年级表的gradeid\n    &#96;gradeid&#96; int(10) not null comment &#39;学生的年级&#39;,\n    &#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;家庭住址&#39;,\n    &#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,\n    PRIMARY KEY (&#96;id&#96;)\n)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8\n\n-- 创建表的时候没有外键关系\nalter table &#96;student&#96;\nadd constraint &#96;FK_gradeid&#96; foreign key(&#96;gradeid&#96;) references &#96;grade&#96;(&#96;grade&#96;);\n\n-- alter table 表名 add constraint &#96;约束名&#96; foreign key(&#96;作为外键的列&#96;) references &#96;哪个表&#96;(&#96;哪个字段&#96;);\n\n以上两种方法都是物理外键，数据库级别的外键，不建议使用！（避免数据库过多造成困扰，了解即可）\n==最佳实践==\n\n数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）\n可以使用多张表的数据，想使用外键（程序去实现）\n\n3.2、DML语言（全部记住）数据库的意义：数据存储、数据管理\nDML语言：数据库操作语言\n\ninsert\nupdate\ndelete\n\n3.3、添加-- 插入语句（添加）\n-- insert into 表名([字段名1,字段名2,字段名3,...])value(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;,...)\ninsert into &#96;grade&#96; (&#96;gradename&#96;) values(&#39;大四&#39;)\n\n-- 由于主键自增，我们可以省略（如果不写表的字段，它就会一一匹配）\ninsert into &#96;grade&#96;values(&#39;大三&#39;)\n\n-- 一般写插入语句骂我们一定要数据和字段一一对应\n\n-- 插入多个字段\ninsert into &#96;grade&#96;(&#96;gradename&#96;)values(&#39;大二&#39;),(&#39;大一&#39;)\n\n-- \ninsert into &#96;student&#96;(&#96;name&#96;)values(&#39;张三&#39;)\n\ninsert into &#96;student&#96;(&#96;name&#96;,&#96;pwd&#96;,&#96;sex&#96;)values(&#39;张三&#39;,&#39;123456&#39;,&#39;男&#39;)\n\ninsert into &#96;student&#96;(&#96;name&#96;,&#96;pwd&#96;,&#96;sex&#96;)\nvalues(&#39;李四&#39;,&#39;123123&#39;,&#39;男&#39;),(&#39;王五&#39;,&#39;123111&#39;,&#39;女&#39;)\n\n语法：insert into 表名([字段名1,字段名2,字段名3,...])value(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;,...)\n注意事项：\n\n字段和字段之间使用英文逗号隔开\n字段是可以省略的，但是后面的值必须是一一对应的，不能少！\n可以同时插入多条数据，values后面的值，需要使用逗号隔开，values(),(),...\n\n3.4 修改\n\n\n\n\n\n\n\n\nupdate  修改谁 （条件） set 原来的值=新值\n-- 修改学员名字\nupdate &#96;student&#96; set &#96;name&#96;&#x3D;&#39;杜天琦&#39; where id&#x3D;1\n-- 不指定条件，会改变所有表！谨慎操作！\nupdate &#96;student&#96; set &#96;name&#96;&#x3D;&#39;长江七号&#39;\n\n-- 修改多个属性，逗号隔开\nupdate &#96;student&#96; set &#96;name&#96;&#x3D;&#39;杜天琦&#39;,&#96;email&#96;&#x3D;&#39;781357011@qq.com&#39; where &#96;id&#96;&#x3D;1; \n\n条件：where子句 运算符 id等于某个值，大于某个值，在某个区间内修改…\n操作符会返回布尔值\n\n\n\n操作符\n含义\n范围\n结果\n\n\n\n=\n等于\n5=6\nfalse\n\n\n&lt;&gt;或!=\n不等于\n5&lt;&gt;6或5!=6\ntrue\n\n\n&lt;=\n小于等于\n5&lt;=6\ntrue\n\n\n&gt;=\n大于等于\n5&gt;=6\nfalse\n\n\nbetween…and…\n在某个范围内\n[2,5]\n\n\n\nAND\n&amp;&amp;，我和你\n5&gt;1 and 1&gt;2\nfalse\n\n\nOR\n||，我或你\n5&gt;1 or 1&gt;2\ntrue\n\n\n-- 通过多个条件定位数据\nupdate &#96;student&#96; set &#96;name&#96;&#x3D;&#39;杜天琦&#39; where &#96;name&#96; &#x3D;&#39;长江7号&#39; or &#96;sex&#96;&#x3D;&#39;女&#39;\n\n语法：update 表名 set colnum_name = value,[colnum_num = value,...] where [条件]\n注意：\n\ncolnum_name  是数据库的列，尽量带上`` \n\n条件，是筛选的条件，如果没有指定，会修改所有的列，谨慎操作！\n\nvalue可以是一个具体的值，也可以是一个变量\n\n```mysqlupdate student set birthday=current_time where name =’长江7号’ and sex=’女’\n* 多个属性的设置，使用逗号隔开\n\n\n\n## 3.5 删除\n\n&gt; delete\t命令\n\n**语法：**&#96;delete from 表名[where 条件]&#96;\n\n&#96;&#96;&#96;mysql\n-- 删除数据（避免这样写）\ndelete from &#96;student&#96; where id&#x3D;1;\n\n\n\n\n\n\n\n\n\n\n\n\ntruncate 命令\n作用：完全清空一个数据库表，表的结构和索引约束不会变！\n-- 清空student表\ntruncate &#96;student&#96;\n\n\n\n\n\n\n\n\n\n\ndelete 与 truncate 的区别\n\n相同点：都能删除数据，都不会删除表结构\ntruncate 重新设置自增列（计数器从1开始） delete 删除表不会影响自增列\ntruncate 不会影响事物\n\n了解即可：delete删除的问题，重启数据库，现象\n\nINNODB 自增列会从1开始（存在内存中，断电即失）\nMYISAM 继续从上一个自增量开始（存在文件中，不会丢失）\n\n4、DQL查询数据（最重点的内容）4.1 DQLData Query Language：数据查询语言\n\n所有查询操作都用它 Select\n简单的查询、复杂的查询都能做\n数据库重最核心的语言，最重要的语句\n使用频率最高\n\n-- select 完整语法，关键词顺序不能颠倒\nselect all|distinct 要查询的字段\nfrom 表名\nXXX join 要连接的表\non 等值判断\nwhere (具体条件|子查询语句)\ngroup by 通过哪个字段分组\nhaving 过滤分组后的信息，与where相同，位置不同\norder by 通过哪个字段排序 ASC升序 | DESC 降序\nlimit startIndex,pageSize\n\n\n\n4.2 指定查询字段-- 查询全部学生:select * from 表名\nselect * from student\n\n-- 查询指定字段\nselect &#96;StudentNo&#96;,&#96;StudentName&#96; from studnet\n\n-- 别名，给结果起一个名字 AS；可以给字段起别名，也可以给表起别名\nselect &#96;StudentNo&#96; AS 学号,&#96;StudentName&#96; AS 学生姓名 from student AS s\n\n-- 函数 Concat(a,b)\nselect concat(&#39;姓名：&#39;, StudentName) AS 新名字 from student\n\n语法：select 字段... from 表\n\n\n\n\n\n\n\n\n\n有的时候，列名字不是那么的知名见意，可以起别名：AS\n字段名 as 别名\n表名 as 别名\n\n\n\n\n\n\n\n\n\n去重（distinct）\n-- 查询一下有哪些同学参加了考试、成绩\n\n-- 查询全部的考试成绩\nselect * from result  \n-- 查询有哪些同学参加了考试\nselect &#96;StudentNo&#96; from result \n\n-- 去除重复数据,相同的数据只显示一条\nselect distinct &#96;StudentNo&#96; from result\n\n\n\n\n\n\n\n\n\n\n数据库的列\n-- 查看系统的版本\nselect version()\n\n-- 计算100*3-1 保存在‘计算结果’列中\nselect 100*3-1 AS 计算结果\n\n-- 查询自增的步长(变量)\nselect @@auto_increment_increment\n\n-- 学员考试成绩 +1 分查看\nselect &#96;StudentNo&#96;,&#96;StudentResult&#96;+1 AS &#39;提分后&#39; from result\n\n数据库的表达式：文本值、列、Null、函数、计算表达式、系统变量…\n4.3 where条件子句 作用：检索数据中符合条件的值\n\n\n\n\n\n\n\n\n\n逻辑运算符\n\n\n\n运算符\n语法\n描述\n\n\n\nand或者&amp;&amp;\na and b或者a&amp;&amp;b\n逻辑与，两个都为真，结果为真\n\n\nor 或者||\na or b 或者 a||b\n逻辑或，一个为真，结果为真\n\n\nnot 或者!\nnot a或者!a\n逻辑非，真为假，假为真\n\n\n运算符尽量使用英文字母\nselect &#96;StudentNo&#96;,&#96;StudentResult&#96; from result\n\n-- 查询考试成绩在95~100分之间\nselect &#96;StudentNo&#96;,&#96;StudentResult&#96; from result\nwhere StudentResult&gt;&#x3D;95 and StudentResult&lt;&#x3D;100\n\n-- 除了1000号学生之外的学生的成绩\nselect &#96;StudentNo&#96;,&#96;StudentResult&#96; from result\nwhere StudentNo!&#x3D;1000;\n\nselect &#96;StudentNo&#96;,&#96;StudentResult&#96; from result\nwhere not StudentNo&#x3D;1000;\n\n\n\n\n\n\n\n\n\n\n模糊查询：比较运算符\n\n\n\n运算符\n语法\n描述\n\n\n\nIS NULL\na is null\n如果操作符为null，结果为真\n\n\nis not null\na is not null\n如果操作符为not null，结果为真\n\n\nbetween and\na between b and c\n若a 在b和c之间，结果为真\n\n\nLIKE\na like b\nSQL匹配，如果a匹配b，则结果为真\n\n\nin\na in (a1,a2,a3…)\n假如a在a1,a2,a3…某一个中，则结果为真\n\n\n-- 模糊查询\n-- between and\nselect &#96;StudentNo&#96;,&#96;StudentResult&#96; from result\nwhere StudentResult between 95 and 100\n\n-- like\t%（代表0到任意个字符）\t_（一个字符）\n-- 查询姓刘的同学\nselect &#96;StudentNo&#96;,&#96;StudentName&#96; from student\nwhere StudentName like &#39;刘%&#39;\n-- 查询姓刘的同学，并且名字只有两个字。\nselect &#96;StudentNo&#96;,&#96;StudentName&#96; from student\nwhere StudentName like &#39;刘_&#39;\n-- 查询姓刘的同学，并且名字有三个字\nselect &#96;StudentNo&#96;,&#96;StudentName&#96; from student\nwhere StudentName like &#39;刘__&#39;\n-- 查询名字中间有嘉字的同学 %嘉%\nselect &#96;StudentNo&#96;,&#96;StudentName&#96; from student\nwhere StudentName like &#39;%嘉%&#39;\n\n\n-- in（具体的一个或多个值，不能用%、_）\n-- 查询1001、1002、1003号学员\nselect &#96;StudentNo&#96;,&#96;StudentName&#96; from student\nwhere StudentNo in (1001,1002,1003);\n-- 查询在北京的学生\nselect &#96;StudentNo&#96;,&#96;StudentResult&#96; from student\nwhere &#96;address&#96; in(&#39;安徽&#39;,&#39;河南洛阳&#39;);\n\n-- null、 not null\n-- 查询地址为空的学生\nselect &#96;StudentNo&#96;,&#96;StudentName&#96; from student\nwhere &#96;address&#96;&#x3D;&#39;&#39; or address is null\n\n4.4、联表查询\n\n\n\n\n\n\n\n\njoin 对比 \n\n-- 联表查询\n-- 查询参加了考试的学生（学号、姓名、科目编号、分数）\nselect * from student\nselect * from result\n\n&#x2F;*思路\n1、分析需求、分析查询的字段来自哪些表，（连接查询）\n2、确定使用哪种连接查询？ 7种\n确定交叉点（这两个表中哪个数据是相同的）\n判断的条件：学生表中的StudentNo &#x3D; 成绩表中的StudentNo\n*&#x2F;\n\n-- join on 连接查询，on代表判断的条件\n-- where 等值查询\n\n-- inner join \nselect s.studentNo,studentName,SubjectNo,StudentResult\nfrom student as s\ninner join result as r\nwhere s.sutdentNo &#x3D; r.studentNo\n\n-- right join\nselect s.studentNo,studentName,SubjectNo,StudentResult\nfrom student s -- student as s可以省略as\nright join result r\non s.sutdentNo &#x3D; r.studentNo -- where用于单个查询，on\n\n-- left join\nselect s.studentNo,studentName,SubjectNo,StudentResult\nfrom student s \nleft join result r  \non s.sutdentNo &#x3D; r.studentNo \n\n\n\n\n操作\n描述\n\n\n\ninner join\n如果表中至少有一个匹配，则返回行\n\n\nleft join\n从左表中返回所有的值，即使右表中没有匹配\n\n\nright  join\n从右表中返回所有的值，即使左表中没有匹配\n\n\n-- 我要查询哪些数据：select...\n-- 从哪几个表中查：from 表 XXX join 连接的表 on 交叉条件\n-- 假设存在一种多张表查询，一步一步来，先查询两张表，然后再慢慢增加\n\n-- from a left join b 以表a为基准\n-- from a right join b 以表b为基准\n\n\n\n\n\n\n\n\n\n\n\n\n自连接\n自己的表和自己的表连接，核心：一张表拆为两张一样的表即可\n 父类表 (category)\n\n\n\ncategoryId\ncategoryName\n\n\n\n2\n信息技术\n\n\n3\n软件开发\n\n\n5\n美术设计\n\n\n子类表(category)\n\n\n\npid\ncategoryId\ncategoryName\n\n\n\n3\n4\n数据库\n\n\n2\n8\n办公信息\n\n\n3\n6\nweb开发\n\n\n5\n7\nps技术\n\n\n操作：查询父类对应的子类关系\n\n\n\n父类\n子类\n\n\n\n信息技术\n办公信息\n\n\n软件开发\n数据库\n\n\n软件开发\nweb开发\n\n\n美术设计\nps技术\n\n\n-- 查询父子信息，把一张表看为两个一模一样的表\nselect a.&#96;categoryName&#96; as &#39;父栏目&#39;, b.&#96;categoryName&#96; as &#39;子栏目&#39;\nfrom &#96;category&#96; as a, &#96;category&#96; as b\nwhere a.&#96;categoryId&#96; &#x3D; b.&#96;pid&#96;\n\nselect s.&#96;StudentNo&#96;,&#96;StudentName&#96;,&#96;SubjectName&#96;,&#96;StudentResult&#96;\nfrom studnet s\ninner join &#96;result&#96; r\non s.StudentNo &#x3D; r.StudentNo\ninner join &#96;subject&#96; sub\non r.&#96;SubjectNo&#96; &#x3D; sub.&#96;SubjectNo&#96;\nwhere subjectName &#x3D; &#39;数据库结构-1&#39;\n\n4.5 分页（limit）和排序（order by）\n\n\n\n\n\n\n\n\n排序： 升序ASC、降序DESC\n-- 查询的结果，根据成绩排序\n-- order by 通过那个字段排序，怎么排\nselect s.&#96;StudentNo&#96;,&#96;StudentName&#96;,&#96;SubjectName&#96;,&#96;StudentResult&#96;\nfrom studnet s\ninner join &#96;result&#96; r\non s.StudentNo &#x3D; r.StudentNo\ninner join &#96;subject&#96; sub\non r.&#96;SubjectNo&#96; &#x3D; sub.&#96;SubjectNo&#96;\nwhere subjectName &#x3D; &#39;数据库结构-1&#39;\norder by StudentResult ASC\n\n\n\n\n\n\n\n\n\n\n分页\n-- 为什么分页？ \n-- 100万条数据\n-- 缓解数据库压力，给人的体验更好，瀑布流\n\n-- 网页应用： 当前页码、总页数\n-- limit 0,5\t1~5\n-- limit 1,5\t2~6\nselect s.&#96;StudentNo&#96;,&#96;StudentName&#96;,&#96;SubjectName&#96;,&#96;StudentResult&#96;\nfrom studnet s\ninner join &#96;result&#96; r\non s.StudentNo &#x3D; r.StudentNo\ninner join &#96;subject&#96; sub\non r.&#96;SubjectNo&#96; &#x3D; sub.&#96;SubjectNo&#96;\nwhere subjectName &#x3D; &#39;数据库结构-1&#39;\norder by StudentResult ASC\nlimit 1,5\n\n语法：limit 查询起始下标，pageSize\n-- 分页，每页只显示五条数据\n-- 语法：limit 起始值，页面的大小\n\n-- 第一页: limit 0,5 \t\t\t(1-1)*5\n-- 第二页: limit 5,5 \t\t\t(2-1)*5\n-- 第三页: limit 10,5 \t\t\t(3-1)*5\n-- 第n页: limit (n-1)*5,5 \t(n-1)*5\n-- 起始值：(n-1)*pageSize；pageSize：页面大小；当前页数：n\n-- 总页数：数据总数&#x2F;页面大小\n\n\n\n4.6、子查询本质：在where语句中嵌套一个查询语句\n-- 1、查询《数据库结构-1》的所有考试结果（学号、科目编号、成绩），降序排列\n-- 方式一：使用连接查询\nselect &#96;StudentNo&#96;,r.&#96;SubjectNo&#96;,&#96;StudentResult&#96;\nfrom &#96;result r\ninner join &#96;subject&#96; sub\non r.SubjectName &#x3D; sub.SubjectNo\nwhere SubjectName &#x3D; &#39;数据库结构-1&#39;\norder by StudentResult DESC\n\n-- 方式二：使用子查询（由里及外）\nselect &#96;StudentNo&#96;,&#96;SubjectNo&#96;,&#96;StudentResult&#96;\nfrom &#96;result&#96;\nwhere StudentNo&#x3D; (\n\t-- 查询所有 数据库结构-1 的学生学号\n    select StudentNo \n    from &#96;subject&#96;\n    where SubjectName &#x3D; &#39;数据库结构-1&#39;\n)\norder by StudentResult DESC\n\n-- 查询分数不小于80分的学会的学号和姓名\nselect s.&#96;StudentNo&#96;,&#96;StudentName&#96;\nfrom &#96;student&#96; s\ninner join &#96;result&#96; r\non r.&#96;StudentNo&#96; &#x3D; s.&#96;StudentNo&#96;\nwhere &#96;StudentResult&#96;&gt;&#x3D;80\n\n-- 在这个基础上增加一个科目，高等数学-2\nselect s.&#96;StudentNo&#96;,&#96;StudentName&#96;\nfrom &#96;student&#96; s\ninner join &#96;result&#96; r\non r.&#96;StudentNo&#96; &#x3D; s.&#96;StudentNo&#96;\nwhere &#96;StudentResult&#96;&gt;&#x3D;80 and &#96;SubjectNo&#96;&#x3D;(\n    -- 查询 高等数学-2 的SubjectNo\n    select SubjectNo\n    from &#96;subject&#96;\n    where &#96;SubjectName&#96;&#x3D;&#39;高等数学-2&#39;\n)\n\n4.7、分组（group by）和过滤（having）-- 查询不同课程的平均分，最高分，最低分，平均分大于80\n-- 核心：根据不同的课程分组\n\nselect SubjectName,avg(StudnetResult)as平均分,max(StudentResult)as最高分，min(StudentResult)as最低分\nfrom result r\ninner join &#96;subject&#96; sub\non r.&#96;SubjectNo&#96;&#x3D;sub.&#96;SubjectNo&#96;\nGroup by r.SubjectNo  -- 根据什么字段分组\nhaving 平均分&gt;80\n\n\n\n5、MySQL函数5.1、常用函数（不常用）-- 数学运算\nselect ABS(-8)  -- 取绝对值\nselect CEILING(9.4)  -- 向上取整\nselect FLOOR(9.4)  -- 向下取整\nselect RAND()  -- 返回一个0~1之间的随机数\nselect SIGN(-10)  -- 判断一个数的符号，负数返回-1，整数返回1\n\n-- 字符串函数\nselect CHAR_LENGTH(&#39;即使再小的帆也能远航&#39;)  -- 字符串长度\nselect CONCAT(&#39;我&#39;,&#39;和&#39;,&#39;你&#39;)  -- 拼接字符串\nselect INSERT(&#39;我爱编程helloworld&#39;,1,2,&#39;超级热爱&#39;)  -- 查询、从某个位置开始替换某个长度的串\nselect LOWER(&#39;DuTianqi&#39;)  -- 小写字母\nselect UPPER(&#39;DuTianqi&#39;)  -- 大写字母\nselect REPLACE(&#39;坚持就能成功&#39;,&#39;坚持&#39;,&#39;努力&#39;)  -- 替换出现的指定的字符串\nselect SUBSTR(&#39;坚持就能成功&#39;,4,6)  -- 返回指定的子字符串（源字符串，截取的位置，截取的长度）\nselect REVERSE(&#39;清晨我上马&#39;)  -- 反转\n\n-- 时间和日期函数（记住）\nselect CURRENT_DATE()  -- 获取当前日期\nselect CURDATE() -- 获取当前日期\nselect NOW()  -- 获取当前时间\nselect LOCALTIME()  -- 获取本地时间\nselect SYSDATE()  -- 获取系统时间\n\nselect YEAR(NOW())\nselect MONTH(NOW())\nselect DAY(NOW())\nselect HOUR(NOW())\nselect MINUTE(NOW())\nselect SECOND(NOW())\n\n-- 系统函数\nselect SYSTEM_USER()  -- 系统当前用户\nselect USER()\nselect VERSION()\n\n5.2、聚合函数（常用）\n\n\n函数名称\n描述\n\n\n\ncount()\n计数\n\n\nsum()\n求和\n\n\navg()\n平均值\n\n\nmax()\n最大值\n\n\nmin()\n最小值\n\n\n-- count()，统计表中的数据 \nselect count(列名) from 表名  -- 会忽略所有的null值\nselect count(*) from 表名  -- 不会忽略null值，\nselect count(1) from 表名  -- 不会忽略null值\n\n-- sum()\nselect sun(&#96;StudentResult&#96;) as 总和 from result\n\n-- avg()\nselect avg(&#96;StudentResult&#96;) as 平均分 from result\n\n-- max()\nselect max(&#96;StudentResult&#96;) as 最高分 from result\n\n-- min()\nselect min(&#96;StudentResult&#96;) as 最低分 from result\n\n6、事务6.1、什么是事务==要么都成功，要么都失败==\n\n比如：一个事务包括以下两个操作1和2\n1、A：1000元，B：200元，SQL执行，A给B转账200元\n2、SQL执行，B收到A的钱。A：800，B：400\n根据原子性，这个事务的两个操作1和2要么都执行成功，要么都不执行\n\n\n\n\n\n\n\n\n\n\n事务原则：ACID原则：原子性、一致性、隔离性、持久性\n原子性（Atomicity）\n事务中的操作要么发生，要么不发生。\n一致性（Consistency）\n事务前后数据的完整性必须保持一致\n隔离性（Isolation）\n多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n持久性（Durability）\n一个事务一旦被提交，它对数据库中数据的改变就是永久性的。\n\n\n\n\n\n\n\n\n\n隔离所导致的一些问题\n脏读：指一个事物读取到另外一个事务未提交的数据\n不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）\n虚读（幻读）：指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。\n-- 事务\n-- mysql 是默认开启事务自动提交的\nset autocommit &#x3D; 0  -- 关闭\nset autocommit &#x3D; 1  -- 开启（默认值）\n\n-- 手动处理事务\nset autocommit &#x3D; 0  -- 关闭自动提交\n-- 事务开启\nstart transaction  -- 标记一个事务的开始，从这个之后的sql语句 都在同一个事务内\n\ninsert XX\ninsert XX\n\n-- 提交： 持久化（成功）\ncommit\n-- 回滚：回到原来的样子（失败）\nrollback\n-- 事务结束\nset autocommit &#x3D; 1  -- 打开自动提交，恢复默认\n\n-- 了解\nsavepoint 保存点的名  -- 设置一个事务的保存点\nrollback to 保存点的名  -- 回滚到保存点\nrelease 保存点的名  -- 释放（删除）保存点\n\n7、索引\n\n\n\n\n\n\n\n\nMySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构。\n索引的本质是数据结构\n7.1、索引的分类\n\n\n\n\n\n\n\n\n在一个表中，主键索引只能有一个，唯一索引可以有多个。\n\n主键索引（PRIMARY KEY）\n唯一的标识，主键不可重复，只能有一个列作为一个主键\n\n\n唯一索引（UNIQUE KEY）\n避免重复的列出现，唯一索引可以重复，多个列都可以标识为唯一索引\n\n\n常规索引（KEY/INDEX）\n默认的索引，index。用key标识\n\n\n全文索引（FULLTEXT）\n部分数据库引擎支持。\n\n\n\n-- 索引的使用\n-- 1、在创建表的时候给字段增加索引\n-- 2、在创建完毕后，增加索引\n\n-- 显示所有的索引信息\nshow index from student\n\n-- 增加一个全文索引\nalter table school.student add fulltext index &#96;studentName&#96;(&#96;studentName&#96;);\n\n7.2 测试索引索引在小数据量的时候，用处不大，但是在大数据的时候，区别十分明显！\n7.3、索引原则\n索引不是越多越好\n不要对进程变动数据加索引\n小数据量的表不需要加索引\n索引一般加在常用来查询的字段上！\n\n\n\n\n\n\n\n\n\n\n索引的数据结构\n\nHash类型的索引\nBTree: INNODB默认的数据结构\n\n8、权限管理和备份\n\n\n\n\n\n\n\n\nSQLyog 可视化管理\n-- 创建用户 create user 用户名 identified by &#39;密码&#39;\ncreate user dutianqi identified by &#39;123456&#39;\n\n-- 修改密码（修改当前用户密码）\nset password for dutianqi &#x3D; password(&#39;123123&#39;)\n\n-- 重命名 rename user 原名字 to 新名字\nrename user dutianqi to dutianqi2\n\n-- 用户授权 all privileges 全部的权限，库.表\ngrant all privileges on *.* to dutianqi2\n\n-- 查询权限\nshow grants for dutianqi2  -- 查看指定用户的权限\n\n9、规范数据库设计当数据库比较复杂的时候，就需要设计\n糟糕的数据库设计：\n\n数据冗余，浪费空间\n\n数据库插入和删除都会麻烦、异常【拒绝使用物理外键】\n\n程序的性能差\n\n\n良好的数据库设计\n\n节省内存空间\n保证数据库的完整性\n方便开发系统\n\n软件开发中，关于数据库的设计\n\n分析需求，分析业务和需要处理的数据库的需求\n概要设计：设计关系图E-R图\n\n设计数据库的步骤（以个人博客网站为例）\n\n收集信息，分析需求\n用户表（用户登录注销，用户的个人信息，写博客，创建分类\n分类表（文章分类，谁创建的）\n文章表（文章的信息)\n友链表（友链信息）\n自定义表（系统信息，某个关键的字，或者一些主字段）key：value\n\n\n标识实体（把需求落地到实处）\n\n9.2 三大范式为什么需要数据规范化\n\n信息重复\n更新异常\n插入异常\n删除异常\n\n\n\n\n\n\n\n\n\n\n三大范式（目的：规范数据库）\n\n第一范式（1NF，保证原子性）：要求数据库表的每一列都是不可分割的原子数据项\n第二范式（2NF）：满足第一范式，属性完全依赖于主键，消除各个非主属性的部分函数依赖。确保数据库表中的每一列都和主键相关，而不能只和主键的某一部分相关。\n第三范式（3NF）：满足第一范式和第二范式，在第二范式的基础上消除传递依赖，属性不依赖于其他非主属性。确保数据表中的每一列数据都和主键直接相关，而不能间接相关。\n\n（阿里规范要求）关联查询的表不得超过三张表\n\n考虑商业化的需求和目标（成本、用户体验），数据库的性能更加重要\n在规范性能的时候，需要适当的考虑以下规范性\n故意给某些表增加一些冗余的字段。（从多表查询中变为单表查询）\n故意增加一些计算列（从大数据量降低为小数据量的查询，索引）\n\n10、JDBC（重点）10.1、数据库驱动程序会通过数据库驱动和数据库打交道\n10.2、JDBCSUN公司为了简化开发人员的（对数据库的统一）操作，提供了一个（Java操作数据库的）规范，俗称JDBC\n开发人员只需掌握JDBC接口的操作即可！\njava.sql\njavax.sql\n导入数据库驱动包：mysql-connector-java-5.1.47.jar\n10.3、第一个JDBC程序1. 创建测试用表\nCREATE DATABASE jdbcStudy CHARACTER SET utf8 COLLATE utf8_general_ci;\n\nUSE jdbcStudy;\n\nCREATE TABLE users(\n\tid INT PRIMARY KEY,\n\tNAME VARCHAR(40),\n\tPASSWORD VARCHAR(40),\n\temail VARCHAR(60),\n\tbirthday DATE\n);\n\nINSERT INTO users(id,NAME,PASSWORD,email,birthday)\nVALUES(1,&#39;zhangsan&#39;,&#39;123456&#39;,&#39;zs@sina.com&#39;,&#39;1980-12-04&#39;),\n(2,&#39;lisi&#39;,&#39;123456&#39;,&#39;ls@sina.com&#39;,&#39;1981-12-04&#39;),\n(3,&#39;wangwu&#39;,&#39;123456&#39;,&#39;ww@sina.com&#39;,&#39;1979-12-04&#39;);\n\n2、编写JDBC测试代码\npackage cn.equsky.demo01;\n\nimport java.sql.*;\n\npublic class JdbcFirstDemo&#123;\n    public static void main(String[] args)throws ClassNotFoundException,SQLException&#123;\n        //1、加载驱动\n        Class.forName(\"com.mysql.jdbc.Driver\");//固定写法，加载驱动\n        //2、用户信息和url\n        String url = \"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=ture&amp;characterEncoding=utf8&amp;useSSL=true\";\n        String username = \"root\";\n        String password = \"123456\";\n        //3、连接成功，数据库对象 Connection 代表数据库\n        Connection connection = DriverManager.getConnection(url,username,password);\n        //4、执行SQL的对象 Statement 执行SQL的对象\n        Statement statement = connection.createStatement();\n        //5、执行SQL的对象  去 执行SQL，可能存在的结果\n        String sql = \"select * from users;\";\n        ResultSet resultSet = statement.executeQuery(sql);  //返回的结果集，结果集中封装了查询出来的所有结果\n\n        while(resultSet.next())&#123;\n            System.out.println(\"id=\" + resultSet.getObject(\"id\"));\n            System.out.println(\"name=\" + resultSet.getObject(\"NAME\"));\n            System.out.println(\"pwd=\"+ resultSet.getObject(\"PASSWORD\"));\n            System.out.println(\"email=\" + resultSet.getObject(\"EMAIL\"));\n            System.out.println(\"birth=\" + resultSet.getObject(\"BIRTHDAY\"));\n        &#125;\n        //6、释放连接\n        resultSet.close();\n        statement.close();\n        connection.close();\n    &#125;\n&#125;\n\n步骤总结：\n\n加载驱动\n连接数据库 DriverManager\n获得执行sql的对象 s’tatement\n获得返回的结果集\n释放连接\n\n\n\n\n\n\n\n\n\n\nDriverManager\n//1、加载驱动\n//DriverManager.registerDriver(new com.mysql.jdbc.Driver());\nClass.forName(\"com.mysql.jdbc.Driver\");//固定写法，加载驱动；因为Driver中会注册对象，所以不用自己先注册\n\n//3、连接成功，数据库对象 Connection 代表数据库\nConnection connection = DriverManager.getConnection(url,username,password);\n\n/*\nconnection 代表数据库\nconnection.setAutoCommit(); 数据库设置自动提交 \nconnection.commit();  事务提交\nconnection.rollback();  事务回滚\n数据库中可以进行的操作，在Java代码中都可以进行操作\n*/\n\n\n\n\n\n\n\n\n\n\nURL\n//2、用户信息和url\nString url = \"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true\";\n\n/*URL格式 协议://地址:端口号/数据库名?参数1&amp;参数2&amp;参数3\n-- mysql -- 3306\n协议==jdbc:mysql://\n地址：端口号==localhost:3306\n数据库名==jdbcstudy?\n问号(?)后面跟参数\n参数1==useUnicode=true\n参数2==characterEncoding=utf8\n参数3==useSSL=true\"\n\n-- oracle -- 1521\njdbc:oracle:thin:@localhost:1521:sid\n*/\n\nString username = \"root\";\nString password = \"123456\";\n\n\n\n\n\n\n\n\n\n\nStatement | PrepareStatement 是执行SQL的对象\n//4、执行SQL的对象 Statement 执行SQL的对象\nStatement statement = connection.createStatement();\n\n/*\nstatement.executeQuery();  //查询操作，返回ResultSet\nstatement.execute();  //执行任何SQL\nstatement.executeUpdate();  //更新、插入、删除都是用这个，返回一个受影响的行数\n*/\n\n\n\n\n\n\n\n\n\n\nResultSet 查询的结果集合:封装了查询出来的所有结果\n//5、执行SQL的对象  去 执行SQL，可能存在的结果\nString sql = \"select * from users;\";\nResultSet resultSet = statement.executeQuery(sql);  //返回的结果集，结果集中封装了查询出来的所有结果\n\n/*\nresultSet.getObject();  //在不知道列类型的情况下使用\n已知列类型的形况下使用以下方法：\nresultSet.getString();\nresultSet.getInt();\nresultSet.getFloat();\nresultSet.getDate();\n...\n*/\n\n/*遍历，指针：\nresultSet.beforeFirst();\t//移动到最前面\nresultSet.afterLast();\t//移动到最后面\nresultSet.next();\t//移动到下一个数据\nresultSet.previous();\t//移动到前一行\nresultSet.absolute(row);  //移动到指定行\n*/\n\n        while(resultSet.next())&#123;\n            System.out.println(\"id=\" + resultSet.getObject(\"id\"));\n            System.out.println(\"name=\" + resultSet.getObject(\"NAME\"));\n            System.out.println(\"pwd=\"+ resultSet.getObject(\"PASSWORD\"));\n            System.out.println(\"email=\" + resultSet.getObject(\"EMAIL\"));\n            System.out.println(\"birth=\" + resultSet.getObject(\"BIRTHDAY\"));\n            System.out.println(\"=================\");\n        &#125;\n\n\n\n\n\n\n\n\n\n\n释放资源\n//6、释放连接\nresultSet.close();\nstatement.close();\nconnection.close();  //消耗资源，用完及时关掉\n\n10.4、statement对象jdbc中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。\nStatement对象的executeUpdate方法，用于向数据库发送增、删、改的SQL语句，executeUpdate执行完之后，将会返回一个整数（即增删改语句导致了数据库几行数据发生了变化）\nStatement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。\n\n\n\n\n\n\n\n\n\nCRUD操作-create\n使用executeUpdate(String sql)方法完成数据添加操作，示例操作：\nStatement st = conn.createStatement();\nString sql = \"insert into user(...)values(...)\";\nint num = st.executeIpdate(sql);\nif(num>0)&#123;\n    System.out.println(\"插入成功！\");\n&#125;\n\n\n\n\n\n\n\n\n\n\n\n\nCRUD操作-delete\n使用executeUpdate(String sql)方法完成数据删除操作，示例操作：\nStatement st = conn.createStatement();\nString sql = \"delete from user where id=1\";\nint num = st.executeIpdate(sql);\nif(num>0)&#123;\n    System.out.println(\"删除成功！\");\n&#125;\n\n\n\n\n\n\n\n\n\n\nCRUD操作-update\n使用executeUpdate(String sql)方法完成数据修改操作，示例操作：\nStatement st = conn.createStatement();\nString sql = \"update user set name='' where name=''\";\nint num = st.executeIpdate(sql);\nif(num>0)&#123;\n    System.out.println(\"修改成功！\");\n&#125;\n\n\n\n\n\n\n\n\n\n\nCRUD操作-read\n使用executeQuery(String sql)方法完成数据查询操作，示例操作：\nStatement st = conn.createStatement();\nString sql = \"select * from user where id=1\";\nResultSet rs = st.executeQuery(sql);\nwhile(rs.next())&#123;\n    //根据获取列的数据类型，分别调用rs相应的方法映射到java对象中\n&#125;\n\n\n\n\n\n\n\n\n\n\n代码实现\n提取工具类\npackage cn.equsky.demo02.utils;\n\nimport java.io.*;\nimport java.sql.*;\nimport java.util.*;\n\npublic class JdbcUtils &#123;\n    private static String driver = null;\n    private static String url = null;\n    private static String username = null;\n    private static String password = null;\n\n    static &#123;\n        try&#123;\n           InputStream in =  JdbcUtils.class.getClassLoader().getResourceAsStream(\"db.properties\");\n            Properties properties = new Properties();\n            properties.load(in);\n\n            driver = properties.getProperty(\"driver\");\n            url = properties.getProperty(\"url\");\n            username = properties.getProperty(\"username\");\n            password = properties.getProperty(\"password\");\n\n            //驱动只用加载一次！\n            Class.forName(driver);\n\n        &#125; catch (IOException | ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n\n    //获取连接\n    public static Connection getConnection() throws SQLException &#123;\n        return DriverManager.getConnection(url,username,password);\n    &#125;\n    //释放连接资源\n    public static void release(Connection conn, Statement st, ResultSet rs)&#123;\n        if(rs!=null)&#123;\n            try&#123;\n             rs.close();\n            &#125; catch (SQLException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n        if(st!=null)&#123;\n            try&#123;\n                st.close();\n            &#125; catch (SQLException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n        if(conn!=null)&#123;\n            try&#123;\n                conn.close();\n            &#125; catch (SQLException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n\n\n编写增、删、改的方法，executeUpdate(sql)\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n//更新数据\npublic class TestUpdate &#123;\n    public static void main(String[] args) &#123;\n        Connection conn = null;\n        Statement st = null;\n        ResultSet rs = null;\n        try &#123;\n            conn = JdbcUtils.getConnection();   //获取数据库连接\n            st = conn.createStatement();    //获取SQL的执行对象\n            String sql = \"update users set `name`='dtq', `email`='781357011@qq.com' where id=1\";\n            int i = st.executeUpdate(sql);  //返回受影响的行数\n            if(i>0)&#123;\n                System.out.println(\"更新成功！\");\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,rs);\n        &#125;\n    &#125;\n&#125;\n\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n//插入数据\npublic class TestInsert &#123;\n    public static void main(String[] args) &#123;\n        Connection conn = null;\n        Statement st = null;\n        ResultSet rs = null;\n        try &#123;\n            conn = JdbcUtils.getConnection();   //获取数据库连接\n            st = conn.createStatement();    //获取SQL的执行对象\n            String sql = \"insert into users(`id`,`NAME`,`PASSWORD`,`email`,`birthday`)\"+\n                    \"values ('4','dutianqi','123456','781357011@qq.com','2021-01-01')\";\n            int i = st.executeUpdate(sql);  //返回受影响的行数\n            if(i>0)&#123;\n                System.out.println(\"插入成功！\");\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,rs);\n        &#125;\n    &#125;\n&#125;\n\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n//删除数据\npublic class TestDelete &#123;\n    public static void main(String[] args) &#123;\n        Connection conn = null;\n        Statement st = null;\n        ResultSet rs = null;\n        try &#123;\n            conn = JdbcUtils.getConnection();   //获取数据库连接\n            st = conn.createStatement();    //获取SQL的执行对象\n            String sql = \"delete from users where id=4\";\n            int i = st.executeUpdate(sql);  //返回受影响的行数\n            if(i>0)&#123;\n                System.out.println(\"删除成功！\");\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,rs);\n        &#125;\n    &#125;\n&#125;\n\n\n查询，executeQuary(sql);\n\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class TestSelect &#123;\n    public static void main(String[] args) &#123;\n        Connection conn = null;\n        Statement st = null;\n        ResultSet rs = null;\n        try &#123;\n            conn = JdbcUtils.getConnection();\n            st = conn.createStatement();\n\n            //SQL语句\n            String sql = \"select * from users where id=1\";\n\n            rs = st.executeQuery(sql);\n            while(rs.next())&#123;\n                System.out.println(rs.getString(\"NAME\"));\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,rs);\n        &#125;\n    &#125;\n&#125;\n\n\n\n\n\n\n\n\n\n\n SQL注入\nSQL存在漏洞，会被攻击，导致数据泄露。本质是SQL语句会被拼接or，从而欺骗服务器\npackage cn.equsky.demo02;\n\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class SQLInject &#123;\n    public static void main(String[] args) &#123;\n        //login(\"dtq\",\"123456\");\n\n        //SQL注入\n        login(\"'or'1=1\",\"'or'1=1\");\n\n    &#125;\n\n    //登录业务\n    public static void login(String username, String password)&#123;\n        Connection conn = null;\n        Statement st = null;\n        ResultSet rs = null;\n        try &#123;\n            conn = JdbcUtils.getConnection();\n            st = conn.createStatement();\n\n            //SQL语句\n            String sql = \"select * from users where `NAME`='\"+username+\"'and `PASSWORD`= '\"+password+\"'\";\n            rs = st.executeQuery(sql);\n            while(rs.next())&#123;\n                System.out.println(rs.getString(\"NAME\"));\n                System.out.println(rs.getString(\"PASSWORD\"));\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,rs);\n        &#125;\n    &#125;\n&#125;\n\n10.5、PreparedStatement对象PreparedStatement可以防止SQL注入，效率更好。\n增加\npackage cn.equsky.demo03;\n\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport java.sql.*;\nimport java.util.Date;\n\npublic class TestInsert &#123;\n    public static void main(String[] args) &#123;\n        Connection conn = null;\n        PreparedStatement st = null;\n        try &#123;\n            conn = JdbcUtils.getConnection();   //获取数据库连接\n\n            //区别\n            //使用问号？ 占位符，代替参数\n            String sql = \"insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`)values(?,?,?,?,?)\";   //问号？ 占位符！\n            st = conn.prepareStatement(sql);  //需要一个预编译SQL语句，暂时不执行\n\n            //手动赋值\n            st.setInt(1,4);\n            st.setString(2,\"DuTianQi\");\n            st.setString(3,\"123456\");\n            st.setString(4,\"781357011@qq.com\");\n            //注意点：\n            //sql.Date  数据库中的Date类型\n            //util.Date  util中的Date类型  new Date().getTime()  获得时间戳\n            //setDate();  封装的是sql.Date类型的参数\n            st.setDate(5, new java.sql.Date(new Date().getTime()));\n\n            //执行\n            int i = st.executeUpdate();\n            if(i>0)&#123;\n                System.out.println(\"插入成功！\");\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,null);\n        &#125;\n    &#125;\n&#125;\n\n删除\npackage cn.equsky.demo03;\n\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport java.sql.*;\nimport java.util.Date;\n\npublic class TestDelete &#123;\n    public static void main(String[] args) &#123;\n        Connection conn = null;\n        PreparedStatement st = null;\n        try &#123;\n            conn = JdbcUtils.getConnection();   //获取数据库连接\n\n            //区别\n            //使用问号？ 占位符，代替参数\n            String sql = \"delete from users where id=?\";   //问号？ 占位符！\n            st = conn.prepareStatement(sql);  //需要一个预编译SQL语句，暂时不执行\n\n            //手动赋值\n            st.setInt(1,4);\n\n            //执行\n            int i = st.executeUpdate();\n            if(i>0)&#123;\n                System.out.println(\"删除成功！\");\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,null);\n        &#125;\n    &#125;\n&#125;\n\n更新\npackage cn.equsky.demo03;\n\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\npublic class TestUpdate &#123;\n    public static void main(String[] args) &#123;\n        Connection conn = null;\n        PreparedStatement st = null;\n\n        try &#123;\n            conn = JdbcUtils.getConnection();\n            String sql = \"update users set `name`=? where id=?\";\n            st = conn.prepareStatement(sql);\n\n            st.setString(1,\"dutianqi\");\n            st.setInt(2,1);\n\n            int i = st.executeUpdate();\n            if(i>0)&#123;\n                System.out.println(\"更新成功！\");\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,null);\n        &#125;\n    &#125;\n&#125;\n\n\n\n查询\npackage cn.equsky.demo03;\n\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport javax.xml.transform.Result;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class TestSelect &#123;\n    public static void main(String[] args) &#123;\n        Connection conn = null;\n        PreparedStatement st = null;\n        ResultSet rs = null;\n\n        try &#123;\n            conn = JdbcUtils.getConnection();\n            String sql = \"select  * from users where id=?\";\n            st = conn.prepareStatement(sql);\n\n            st.setInt(1,1);  //传递参数\n\n            //执行\n            rs = st.executeQuery();\n            if(rs.next())&#123;\n                System.out.println(rs.getString(\"NAME\"));\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,rs);\n        &#125;\n    &#125;\n&#125;\n\n防止SQL注入\npackage cn.equsky.demo03;\n\nimport cn.equsky.demo02.utils.JdbcUtils;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class SQLInject &#123;\n    public static void main(String[] args) &#123;\n        login(\"lisi\",\"123456\");\n    &#125;\n\n    public static void login(String username, String password)&#123;\n        Connection conn = null;\n        PreparedStatement st = null;\n        ResultSet rs = null;\n\n        try &#123;\n            conn = JdbcUtils.getConnection();\n            String sql = \"select * from users where `NAME`=? and `PASSWORD`=?\";  //MyBatis\n            st = conn.prepareStatement(sql);\n\n            //PreparedStatement 防止SQL注入的本质：把传递进来的参数当作字符\n            //假设其中存在转义字符，比如 ``,会被直接转义！\n\n            st.setString(1,username);\n            st.setString(2,password);\n\n            rs = st.executeQuery();\n\n            while(rs.next())&#123;\n                System.out.println(rs.getString(\"NAME\"));\n                System.out.println(rs.getString(\"PASSWORD\"));\n                System.out.println(\"==========\");\n            &#125;\n\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            JdbcUtils.release(conn,st,rs);\n        &#125;\n\n\n    &#125;\n&#125;\n\n10.6、 事务要么都成功，要么都失败\n\n\n\n\n\n\n\n\n\nACID原则\n原子性：要么全部完成，要么都不完成\n一致性：总数不变\n 持久性：一旦提交不可逆。持续化到数据库。\n隔离性产生的问题：\n脏读：一个事务读取了另一个没有提交的事务。\n不可重复读：在同一个事务内，重复读取表中的数据。\n虚度（幻读）：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致。\n\n\n\n\n\n\n\n\n\n代码实现\n1、开启事务\n//关闭数据库的自动提交，会自动开启事务\nconn.setAutoCommit(false);\n\n2、一组业务执行完毕，提交事务\n3、可以在catch语句中显示定义事务回滚，默认情况下，失败就会回滚\n10.7、数据库连接池数据库连接–执行完毕–释放\n连接–释放：十分浪费系统资源\n池化技术：准备一些预先准备好的资源，需要的时候就连接预先准备好的。\n最小连接数：10\n最大连接数：15  业务最高承载上限\n等待超时：100ms\n编写连接池：实现一个接口，DataSource\n\n\n\n\n\n\n\n\n\n开源数据源实现(拿来即用)\nDBCP\nC3P0\nDruid：阿里巴巴\n使用了这些数据库连接池之后，我们在项目开发中就不用编写连接数据库的代码！\n\n\n\n\n\n\n\n\n\nDBCP\n需要用到的jar包\ncommons-dbcp-1.4.jar\ncommons-pool-1.6.jar\n\n\n\n\n\n\n\n\n\nC3P0\n需要用到的jar包\nc3p0-0.9.5.5.jar\nmchange-commons-java-0.2.19.jar\n\n\n\n\n\n\n\n\n\n结论\n无论使用什么数据源，本质还是一样的，    DataSource接口不会变，方法就不会变。\n","slug":"MySQL","date":"2022-01-17T10:56:41.751Z","categories_index":"数据库","tags_index":"数据库,MySQL","author_index":"天琦"},{"id":"c8b591938b42885c6ab3d1307076232f","title":"Java中printf的用法总结","content":"printf的格式控制的完整格式：\n%  -  0  m.n  l或h  格式字符 \n\n下面对组成格式说明的各项加以说明： \n①%：表示格式说明的起始符号，不可缺少。 \n\n②-：有-表示左对齐输出，如省略表示右对齐输出。\n\n③0：有0表示指定空位填0,如省略表示指定空位不填。\n\n④m.n：m指域宽，即对应的输出项在输出设备上所占的字符数。N指精度。用于说明输出的实型数的小数位数。为指定n时，隐含的精度为n=6位。 \n\n⑤l或h:l对整型指long型，对实型指double型。h用于将整型的格式字符修正为short型。 \n\n\n格式字符格式字符用以指定输出项的数据类型和输出格式。 \n①d格式：用来输出十进制整数。有以下几种用法：  %d：按整型数据的实际长度输出。  %md：m为指定的输出字段的宽度。如果数据的位数小于m，则左端补以空格，若大于m，则按实际位数输出。  %ld：输出长整型数据。 \n②o格式：以无符号八进制形式输出整数。对长整型可以用”%lo”格式输出。同样也可以指定字段宽度用“%mo”格式输出。 \n③x格式：以无符号十六进制形式输出整数。对长整型可以用”%lx”格式输出。同样也可以指定字段宽度用”%mx”格式输出。 \n④u格式：以无符号十进制形式输出整数。对长整型可以用”%lu”格式输出。同样也可以指定字段宽度用“%mu”格式输出。 //不可使用  //在实践中没有运行出来。\n⑤c格式：输出一个字符。 \n⑥s格式：用来输出一个串。有几中用法  %s：例如:printf(“%s”, “CHINA”)输出”CHINA”字符串（不包括双引号）。  %ms：输出的字符串占m列，如字符串本身长度大于m，则突破获m的限制,将字符串全部输出。若串长小于m，则左补空格。  %-ms：如果串长小于m，则在m列范围内，字符串向左靠，右补空格。  %m.ns：输出占m列，但只取字符串中左端n个字符。这n个字符输出在m列的右侧，左补空格。  %-m.ns：其中m、n含义同上，n个字符输出在m列范围的左侧，右补空格。如果n&gt;m，则自动取n值，即保证n个字符正常输出。 \n⑦f格式：用来输出实数（包括单、双精度），以小数形式输出。有以下几种用法：  %f：不指定宽度，整数部分全部输出并输出6位小数。  %m.nf：输出共占m列，其中有n位小数，如数值宽度小于m左端补空格。  %-m.nf：输出共占n列，其中有n位小数，如数值宽度小于m右端补空格。 \n⑧e格式：以指数形式输出实数。可用以下形式：//在实践中没有运行出来。  %e：数字部分（又称尾数）输出6位小数，指数部分占5位或4位。  %m.ne和%-m.ne：m、n和”-”字符含义与前相同。此处n指数据的数字部分的小数位数，m表示整个输出数据所占的宽度。 \n⑨g格式：自动选f格式或e格式中较短的一种输出，且不输出无意义的零。 //在实践中没有运行出来。 \n\n关于printf函数的进一步说明：如果想输出字符”%”,则应该在“格式控制”字符串中用连续两个%表示，如:printf(“%f%%”, 1.0/3);输出0.333333%。 \n\n对于单精度数，使用%f格式符输出时，仅前7位是有效数字，小数6位．对于双精度数，使用%lf格式符输出时，前16位是有效数字，小数6位． \n\n对于m.n的格式还可以用如下方法表示（例） \nchar ch[20];\nprintf(“%*.*s\\n”,m,n,ch); \n前边的*定义的是总的宽度，后边的定义的是输出的个数。分别对应外面的参数m和n 。我想这种方法的好处是可以在语句之外对参数m和n赋值，从而控制输出格式。 \n\n","slug":"Java中printf的用法总结","date":"2022-01-17T10:56:41.749Z","categories_index":"java","tags_index":"Java,printf","author_index":"天琦"},{"id":"663b9fbae5507fcba43e46e7e9b1ce0c","title":"JavaWeb-Tomcat","content":"JavaWeb-Tomcat下载链接\n\nTomcat官网\n\nTomcat目录层次结构\nbin: 存放启动和关闭Tomcat的脚本文件\n\nconf: 存放Tomcat服务器的配置文件\n\nlib: 存放Tomcat服务器的支撑jar包\n\nlogs: 存放Tomcat的日志文件\n\ntemp: 存放Tomcat运行时产生的临时文件\n\nwebapps: web应用所在的目录，即供外访问的web资源的存放目录\n\nwork: Tomcat的工作目录\n\n\n环境的配置\n下载后最好解压到C盘或者D盘的根目录下。\n\n配置环境变量\n\n新建变量名：CATALINA_HOME，变量值：D:\\apache-tomcat-8.5.20(Tomcat的安装路径)\n\n打开PATH，添加路径：;%CATALINA_HOME%\\bin\n\n\n\n启动Tomcat：在Tomcat目录下的bin目录下（如E:\\TOMCAT\\apache-tomcat-8.5.20\\bin）双击startup.bat,开启服务。最后，当指令执行完毕，我们可以打开浏览器，输入http://localhost:8080/,则会出现以下页面：\n\n关闭Tomcat\n\n在bin目录下双击shutdown.bat即可关闭Tomcat。\n\n\n\n","slug":"JavaWeb-Tomcat","date":"2022-01-17T10:56:41.743Z","categories_index":"JavaWeb","tags_index":"JavaWeb,Tomcat","author_index":"天琦"},{"id":"97fa08a641b620fbc43f3d20dc2a7120","title":"JavaWeb-HTML","content":"JavaWeb-HTML这篇文章主要对HTML标签进行介绍和归纳。\n基本概念\nHTML 是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。\nCSS 样式是表现。比如，标题字体、颜色变化，或为标题加入背景图片、边框等，所有这些用来改变内容外观的东西称之为表现。\nJavaScript 是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单，或鼠标滑过表格的背景颜色改变，还有焦点新闻（新闻图片）的轮换。有动画的，有交互的一般都是用JavaScript来实现的。\n\n常用标签标签的用处以及标签在浏览器中的默认样式\n\n强调语气：&#60;em&#62;是斜体，&#60;strong&#62;是加粗。\n\n引用：&#60;q&#62;短文本引用，&#60;blockquote&#62;长文本引用。\n\n换行&#60;br /&#62;\n\n水平横线&#60;hr /&#62;\n\n空格 &amp;nbsp；\n\n表格&#60;table&#62;\n\n&#60;tbody&#62;加上后表格内容全部下载完才会显示\n行&#60;tr&#62;\n列&#60;td&#62;\n表格表头&#60;th&#62;\n标题&#60;caption&#62;\n\n\n超链&#60;a&#62;\n\n例如：&#60;a href=”目标网址” title=”鼠标滑过显示的文本”&#62;链接显示的文本&#60;/a&#62;\n新标签打开：target=”_blank”\n\n\n图片&#60;img&#62;，图像可以是GIF、PNG、JPEG格式的图像文件\n\n例如：&#60;img src=”图片地址” alt=”下载失败时的替换文本” title = “提示文本”&#62;\n\n\n表单&#60;form&#62;\n\n\n\n\n\n\n\n\n\ninput type=text–是文本输入框 value设置默认显示内容\n\n\n\n\n\n\n\n\n\ninput type=password–是密码输入框 value设置默认显示内容\n\n\n\n\n\n\n\n\n\ninput type=radio–是单选框 name属性可以对其进行分组 checked=”checked”表示默认选中\n\n\n\n\n\n\n\n\n\ninput type=checkbox–是复选框 checked=”checked”表示默认选中\n\n\n\n\n\n\n\n\n\ninput type=reset–是重置按钮 value属性修改按钮上的文本\n\n\n\n\n\n\n\n\n\ninput type=submit–是提交按钮 value属性修改按钮上的文本\n\n\n\n\n\n\n\n\n\ninput type=button–是按钮 value属性修改按钮上的文本\n\n\n\n\n\n\n\n\n\ninput type=file–是文件上传域\n\n\n\n\n\n\n\n\n\ninput type=hidden–是隐藏域 当我们要发送某些信息，而这些信息，不需要用户参与，就可以使用隐藏域（提交的时候同时发送给服务器）。\n\n\n\n\n\n\n\n\n\nselect标签\n\n\n\n\n\n\n\n\n\noption标签\n\n\n\n\n\n\n\n\n\ntextarea表示多行文本输入框（起始标签和结束标签中的内容是默认设置）\n\n\n\n\n\n\n\n\n\nrows 属性设置可以显示几行的高度\n\n\n\n\n\n\n\n\n\ncols 属性设置每行可以显示几个字符宽度\n\n文本域&#60;textarea&#62;\n\n例如：&#60;textarea rows=”行数” cols=”列数”&#62;文本&#60;/textarea&#62;\ncols 多行输入域的列数；rows 多行输入域的行数。这两个属性可用 CSS 样式的 width 和 height 来代替：col 用 width、row 用 height 来代替\n\n\n输入框&#60;input type=”text/password” name=”名称” value=”文本” /&#62;\n\n当type=”text”时，输入框为文本输入框\n当type=”password”时，输入框为密码输入框\n\n\n单/复选框&#60;input type=”radio/checkbox” value=”值” name=”名称” checked=”checked”/&#62;\n\n当type=”radio”时，控件为单选框，同一组单选框的name命名要一致\n当type=”checkbox”时，控件为复选框\n\n\n提交按钮&#60;input type=”submit” value=”提交”&#62;\n\n重置按钮&#60;input type=”reset” value=”重置”&#62;\n\n下拉列表框&#60;select&#62;&#60;option value=”看书”&#62;看书&#60;/option&#62;&#60;/select&#62;\n\nvalue&#60;option value=”提交值”&#62;选项&#60;/option&#62;\n\n选中selected=”selected”\n\n多选multiple=”multiple”\n\n\n\n标签&#60;label for=”控件id名称”&#62;，标签的for属性中的值应当与控件的id属性值一定要相同。\n\n\n","slug":"JavaWeb-HTML","date":"2022-01-17T10:56:41.737Z","categories_index":"JavaWeb","tags_index":"JavaWeb,HTML","author_index":"天琦"},{"id":"062c7fd2e9be766961af5669ad4a0a06","title":"C#-委托详解","content":"C#委托详解\n2020年10月29日，这部分学了挺长时间，感觉听懂了，还是要多练。\n视频教程、笔记内容来源：刘铁猛_C#入门详解_委托详解\n\n什么是委托\n委托(delegate)是函数指针的“升级版”\n\n事例：C/C++中的函数指针\n\n\n一切皆地址\n\n变量(数据)是以某个地址为起点的一段内存中所存储的值\n函数(算法)是以某个地址为起点的一段内存中所存储的一组机器语言指令\n\n\n直接调用与间接调用\n\n直接调用：通过函数名来调用函数，CPU通过函数名直接获得函数所在地址并开始执行–&gt;返回\n间接调用：通过函数指针来调用函数，CPU通过读取函数指针存储的值获得函数所在地址并开始执行–&gt;返回\n\n\nJava中没有与委托相对应的功能实体\n\nC#由Java发展而来，但是C#通过委托这种数据类型保留了与C/C++函数指针相对应的功能\n\n\n委托的简单使用\n\nAction委托\nnamespace DelegateExample1\n&#123;\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            Calculator calculator &#x3D; new Calculator();\n            Action action &#x3D; new Action(calculator.Report);\n            calculator.Report();&#x2F;&#x2F;直接调用\n            action.Invoke();&#x2F;&#x2F;（间接调用）Action委托的两种调用方式\n            action();\n            Console.ReadKey();\n        &#125;\n    &#125;\n    class Calculator\n    &#123;\n        public void Report()\n        &#123;\n            Console.WriteLine(&quot;I have three methods&quot;);\n        &#125;\n\n        public int Add(int a , int b)\n        &#123;\n            int result &#x3D; a + b;\n            return result;\n        &#125;\n        public int Sub(int a, int b)\n        &#123;\n            int result &#x3D; a - b;\n            return result;\n        &#125;\n    &#125;\n&#125;\nFunc委托\n\nFunc&lt;…&gt; &lt;&gt;中放的是目标方法的参数类型\n\n如：Func&lt;int,int,int&gt;、Func&lt;int,int,int,int&gt;;最后一个int是返回值类型\n\n    namespace DelegateExample1\n&#123;\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            Calculator calculator &#x3D; new Calculator();\n\n            Func&lt;int,int,int&gt; func1&#x3D; new Func&lt;int, int, int&gt;(calculator.Add);&#x2F;&#x2F;func1 委托\n            Func&lt;int, int, int&gt; func2 &#x3D; new Func&lt;int, int, int&gt;(calculator.Sub);&#x2F;&#x2F;func2 委托\n\n            int x &#x3D; 100;\n            int y &#x3D; 200;\n            int z &#x3D; 0;\n\n            z &#x3D; func1(x, y);\n            Console.WriteLine(z);\n            z &#x3D; func2(x, y);\n            Console.WriteLine(z);\n            Console.ReadKey();\n        &#125;\n    &#125;\n    class Calculator\n    &#123;\n        public int Add(int a , int b)\n        &#123;\n            int result &#x3D; a + b;\n            return result;\n        &#125;\n        public int Sub(int a, int b)\n        &#123;\n            int result &#x3D; a - b;\n            return result;\n        &#125;\n    &#125;\n&#125;\n\n\n\n委托是函数指针的“升级版”，可以按照某些约束指向目标方法，帮助我们对这些方法间接调用。\n\n\n\n\n委托的声明(自定义委托)\n委托是一种类（class），类是数据类型所以委托也是一种数据类型。\n\n声明方式与一般的类不同，主要是为了照顾可读性和C/C++传统。\nnamespace DelegateExample1\n&#123;\n    public delegate double Calc(double x, double y);\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            Calculator calculator &#x3D; new Calculator();\n            Calc calc1 &#x3D; new Calc(calculator.Add);\n            Calc calc2 &#x3D; new Calc(calculator.Sub);\n            Calc calc3 &#x3D; new Calc(calculator.Mul);\n            Calc calc4 &#x3D; new Calc(calculator.Div);\n\n            double a &#x3D; 100;\n            double b &#x3D; 200;\n            double c &#x3D; 0;\n            &#x2F;&#x2F;通过委托间接调用四个方法\n            c &#x3D; calc1.Invoke(a,b);\n            Console.WriteLine(c);\n            c &#x3D; calc2.Invoke(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc3.Invoke(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc4.Invoke(a, b);\n            Console.WriteLine(c);\n            &#x2F;&#x2F;仿照C&#x2F;C++函数指针方式调用，不用Invoke，结果是一样的\n            c &#x3D; calc1(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc2(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc3(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc4(a, b);\n            Console.WriteLine(c);\n            Console.ReadKey();\n        &#125;\n    &#125;\n    class Calculator\n    &#123;\n        public double Add(double a , double b)\n        &#123;\n            return a+b;\n        &#125;\n        public double Sub(double a, double b)\n        &#123;\n            return a - b;\n        &#125;\n        public double Mul(double a, double b)\n        &#123;\n            return a * b;\n        &#125;\n        public double Div(double a, double b)\n        &#123;\n            return a &#x2F; b;\n        &#125;\n    &#125;\n&#125;\n\n注意声明委托的位置\n\n避免写错地方结果声明成嵌套类型。\n委托是一种类，与class平级。\n\n\n委托与所封装的方法必须“类型兼容”。\n\n\n返回值的数据类型一致。\n参数列表在个数和数据类型上一致（参数名不需要一样）。\n\n\n\n\n\n委托的一般使用\n实例：把方法当作参数传给另一个方法(你写了一个方法，这个方法有一个委托类型的参数，委托封装了一个方法，那么我们在方法体里使用传进来的委托，间接地去调用委托封装的那个方法，这样就形成了一种动态调用方法的代码结构)\n\n模板方法，“借用”指定的外部方法来产生结果(指的是：你写了一个方法，然后通过传进来的委托参数，借用指定的外部方法来产生一个结果，这就相当于在你写的方法当中有一个填空题，这个填空题的空白处，就用传进来的委托类型的参数进行填补。也就是通过传进来的委托类型的参数间接的调用指定的外部方法，这个方法一般具有返回值，当你拿到这个返回值之后，再继续执行你所写的方法后面的逻辑)\n\n相当于填空题\n常位于代码中部\n委托有返回值\n\n\n回调方法(callback)，调用指定的外部方法\n\n相当于流水线\n常位于代码末尾\n委托无返回值\n\nnamespace DelegateExample1\n&#123;\n    public delegate double Calc(double x, double y);\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            ProductFactory productFactory &#x3D; new ProductFactory();&#x2F;&#x2F;new一个工厂类的实例。就有了一个工厂可以生产披萨饼和玩具车\n            WrapFactory wrapFactory &#x3D; new WrapFactory();&#x2F;&#x2F;new一个包装工厂的实例。就有了一个包装工厂可以对产品进行包装\n\n            &#x2F;&#x2F;模板方法\n            Func&lt;Product&gt; func1 &#x3D; new Func&lt;Product&gt;(productFactory.MakePizza);&#x2F;&#x2F;声明一个委托，没有参数，返回值类型为Product。这个委托封装生产披萨饼的方法\n            Func&lt;Product&gt; func2 &#x3D; new Func&lt;Product&gt;(productFactory.MakeToyCar);\n\n            Logger logger &#x3D; new Logger(); &#x2F;&#x2F;声明logger类的实例\n            Action&lt;Product&gt; log &#x3D; new Action&lt;Product&gt;(logger.Log);\n\n            &#x2F;&#x2F;调用模板方法\n            Box box1 &#x3D; wrapFactory.WrapProduct(func1,log); &#x2F;&#x2F;包装产品。包装工厂.包装产品。返回值类型为Box，用一个Box类型的box1变量接收返回值。\n            Box box2 &#x3D; wrapFactory.WrapProduct(func2,log);\n\n            &#x2F;&#x2F;打印生产好的产品\n            Console.WriteLine(box1.Product.Name);\n            Console.WriteLine(box2.Product.Name);\n            Console.ReadKey();\n        &#125;\n    &#125;\n\n    class Logger&#x2F;&#x2F;记录程序的工作状态；把log方法以回调方法的形式传进模板方法里\n    &#123;\n        public void Log(Product product)\n        &#123;\n            Console.WriteLine(&quot;Product&#39;&#123;0&#125;&#39;created at&#123;1&#125;.Price is &#123;2&#125;&quot;,\n            product.Name,DateTime.UtcNow,product.Price);&#x2F;&#x2F;UtcNow,不带时区的时间\n        &#125;\n    &#125;\n\n    class Product&#x2F;&#x2F;产品类，产品名字\n    &#123;\n        public string Name &#123; get; set; &#125;\n        public double Price &#123; get; set; &#125;\n    &#125;\n    class Box&#x2F;&#x2F;包装箱，有一个属性说明箱子里包装的产品\n    &#123;\n        public Product Product &#123; get; set; &#125;\n    &#125;\n    class WrapFactory&#x2F;&#x2F;包装工厂吗，负责把产品包上箱子\n    &#123;\n        public Box WrapProduct(Func&lt;Product&gt; getProduct,Action&lt;Product&gt; logCallback)&#x2F;&#x2F;模板方法，接收一个委托类型的参数，func委托，封装的方法能返回一个product类型的对象。对于没有返回值的方法，用Action委托，接收的类型参数为Product，定义一个委托类型的参数logCallback\n        &#123;\n            Box box &#x3D; new Box();&#x2F;&#x2F;有一个箱子\n            Product product &#x3D; getProduct.Invoke();&#x2F;&#x2F;调用完getProduct.Invoke()会得到一个Product类型的对象，赋给product\n            if(product.Price&gt;&#x3D;50)&#x2F;&#x2F;如果产品价格大于50元就触发log\n            &#123;\n                logCallback(product);\n            &#125;\n            box.Product &#x3D; product;&#x2F;&#x2F;把产品装进箱子里\n            return box;&#x2F;&#x2F;返回这个箱子\n        &#125;\n    &#125;\n    class ProductFactory&#x2F;&#x2F;生产产品的工厂\n    &#123;\n        public Product MakePizza()&#x2F;&#x2F;产品：披萨饼\n        &#123;\n            Product product &#x3D; new Product();\n            product.Name &#x3D; &quot;Pizza&quot;;\n            product.Price &#x3D; 12;\n            return product;\n        &#125;\n        public Product MakeToyCar()&#x2F;&#x2F;产品：玩具车\n        &#123;\n            Product product &#x3D; new Product();\n            product.Name &#x3D; &quot;Toy Car&quot;;\n            product.Price &#x3D; 100;\n            return product;\n        &#125;\n    &#125;\n&#125;\n注意：难精通+易使用+功能强大的东西，一旦被滥用则后果非常严重\n\n缺点1：这是一种方法级别的紧耦合，现实工作中要慎之又慎。\n缺点2：使可读性下降、debug的难度增加。\n缺点3：把委托回调、异步调用和多线程纠缠在一起，会让代码变得难以阅读和维护。\n缺点4：委托使用不当有可能造成内存泄漏和程序性能下降。\n\n\n\n\n\n委托的高级使用\n多播(multicast)委托\n\nnamespace MulticastDelegateExample\n&#123;\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            &#x2F;&#x2F;使用委托调用DoHomework()\n            &#x2F;&#x2F;首先创建几个学生的实例stu1、stu2、stu3\n            Student stu1 &#x3D; new Student() &#123; ID &#x3D; 1, PenColor &#x3D; ConsoleColor.Yellow &#125;;\n            Student stu2 &#x3D; new Student() &#123; ID &#x3D; 2, PenColor &#x3D; ConsoleColor.Green &#125;;\n            Student stu3 &#x3D; new Student() &#123; ID &#x3D; 3, PenColor &#x3D; ConsoleColor.Red &#125;;\n            &#x2F;&#x2F;然后创建几个委托\n            Action action1 &#x3D; new Action(stu1.DoHomework);\n            Action action2 &#x3D; new Action(stu2.DoHomework);\n            Action action3 &#x3D; new Action(stu3.DoHomework);\n            &#x2F;&#x2F;调用这几个委托，与之前讲的委托相同；单播委托\n            &#x2F;&#x2F;            action1.Invoke();\n            &#x2F;&#x2F;            action2.Invoke();\n            &#x2F;&#x2F;            action3.Invoke();\n            &#x2F;&#x2F;多播委托；用一个委托封装多个方法。执行顺序按封装的顺序\n            action1 +&#x3D; action2;&#x2F;&#x2F;相当于把action2合并到action1里面\n            action1 +&#x3D; action3;&#x2F;&#x2F;action1里面就封装了三个方法\n            action1.Invoke();\n\n        &#125;\n    &#125;\n\n    class Student\n    &#123;\n        public int ID &#123; get; set; &#125;\n        public ConsoleColor PenColor &#123; get; set; &#125;\n\n        public void DoHomework()\n        &#123;\n            for (int i &#x3D; 0; i &lt; 5; i++)\n            &#123;\n                Console.ForegroundColor &#x3D; this.PenColor;\n                Console.WriteLine(&quot;Student &#123;0&#125; doing homework &#123;1&#125; hour(s).&quot;, this.ID, i);\n                Thread.Sleep(1000);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n\n隐式异步调用\n同步与异步的简介\n中英文的语言差异\n同步：你做完了我（在你的基础上）接着做\n异步：咱们两个同时做（相当于汉语中的“同步进行”）\n\n\n同步调用与异步调用的对比\n每一个运行的程序是一个进程（process）\n每个进程可以有一个或者多个线程（thread）\n同步调用是在同一线程内\n异步调用的底层机理是多线程\n串行==同步==单线程；并行==异步==多线程\n\n\n隐式多线程 v.s. 显式多线程\n直接同步调用：使用方法名\n间接同步调用：使用单播/多播委托的Invoke方法\n隐式异步调用：使用委托的BeginInvoke\n显式异步调用：使用Thread或Task\n\n\n\n\n应该适时地使用接口（interface）取代一些对委托的使用\nJava完全地使用接口取代了委托的功能，即Java没有与C#中委托相对应的功能实体。\n\n\n\nnamespace MulticastDelegateExample\n&#123;\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            &#x2F;&#x2F;使用委托调用DoHomework()\n            &#x2F;&#x2F;首先创建几个学生的实例stu1、stu2、stu3\n            Student stu1 &#x3D; new Student() &#123; ID &#x3D; 1, PenColor &#x3D; ConsoleColor.Yellow &#125;;\n            Student stu2 &#x3D; new Student() &#123; ID &#x3D; 2, PenColor &#x3D; ConsoleColor.Green &#125;;\n            Student stu3 &#x3D; new Student() &#123; ID &#x3D; 3, PenColor &#x3D; ConsoleColor.Red &#125;;\n\n            &#x2F;&#x2F;直接同步调用\n            stu1.DoHomework();\n            stu2.DoHomework();\n            stu3.DoHomework();\n&#x2F;&#x2F; 多播委托也是同步调用\n            &#x2F;&#x2F;间接同步调用\n        &#x2F;&#x2F;    Action action1 &#x3D; new Action(stu1.DoHomework);\n        &#x2F;&#x2F;    Action action2 &#x3D; new Action(stu2.DoHomework);\n        &#x2F;&#x2F;    Action action3 &#x3D; new Action(stu3.DoHomework);\n\n        &#x2F;&#x2F;    action1.Invoke();\n        &#x2F;&#x2F;    action2.Invoke();\n        &#x2F;&#x2F;    action3.Invoke();\n            &#x2F;&#x2F;使用委托进行隐式异步调用(最重要-beginInvoke())\n            &#x2F;&#x2F;Action action1 &#x3D; new Action(stu1.DoHomework);\n            &#x2F;&#x2F;Action action2 &#x3D; new Action(stu2.DoHomework);\n            &#x2F;&#x2F;Action action3 &#x3D; new Action(stu3.DoHomework);\n            &#x2F;&#x2F;BeginInvoke()会自动生成一个分支线程，然后在分支线程里调用它封装的方法。\n            &#x2F;&#x2F;action1.BeginInvoke(null,null);&#x2F;&#x2F;参数是方法用完之后执行的后续操作(回调方法)，null指不进行其他操作。\n            &#x2F;&#x2F;action2.BeginInvoke(null, null);\n            &#x2F;&#x2F;action3.BeginInvoke(null, null);\n\n            &#x2F;&#x2F;用Thread进行显式异步调用(动手声明多线程)\n            &#x2F;&#x2F;创建三个线程thread1、thread2、thread3\n            &#x2F;&#x2F;Thread thread1 &#x3D; new Thread(stu1.DoHomework);\n            &#x2F;&#x2F;Thread thread2 &#x3D; new Thread(stu2.DoHomework);\n            &#x2F;&#x2F;Thread thread3 &#x3D; new Thread(stu3.DoHomework);\n            &#x2F;&#x2F;启动这三个线程\n            &#x2F;&#x2F;thread1.Start();\n            &#x2F;&#x2F;thread2.Start();\n            &#x2F;&#x2F;thread3.Start();\n\n            &#x2F;&#x2F;用Task进行显式异步调用(多线程)\n            &#x2F;&#x2F;Task task1 &#x3D; new Task(new Action(stu1.DoHomework));\n            &#x2F;&#x2F;Task task2 &#x3D; new Task(new Action(stu2.DoHomework));\n            &#x2F;&#x2F;Task task3 &#x3D; new Task(new Action(stu3.DoHomework));\n\n            &#x2F;&#x2F;task1.Start();\n            &#x2F;&#x2F;task2.Start();\n            &#x2F;&#x2F;task3.Start();\n\n            for(int i &#x3D; 0; i &lt;10; i++)\n            &#123;\n                Console.ForegroundColor &#x3D; ConsoleColor.Cyan;\n                Console.WriteLine(&quot;Main thread &#123;0&#125;&quot;,i);\n                Thread.Sleep(1000);\n            &#125;\n        &#125;\n    &#125;\n\n    class Student\n    &#123;\n        public int ID &#123; get; set; &#125;\n        public ConsoleColor PenColor &#123; get; set; &#125;\n\n        public void DoHomework()\n        &#123;\n            for (int i &#x3D; 0; i &lt; 5; i++)\n            &#123;\n                Console.ForegroundColor &#x3D; this.PenColor;\n                Console.WriteLine(&quot;Student &#123;0&#125; doing homework &#123;1&#125; hour(s).&quot;, this.ID, i);\n                Thread.Sleep(1000);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n","slug":"Csharp-委托详解","date":"2022-01-17T10:56:41.732Z","categories_index":"C#","tags_index":"C#","author_index":"天琦"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-01-17T10:55:37.225Z","categories_index":"","tags_index":"","author_index":"天琦"}]