{"title":"汇编语言_程序","uid":"7bf39dc8b36d692ca5cc6dcb2f7992e5","slug":"汇编语言-程序","date":"2022-01-17T10:56:41.876Z","updated":"2020-10-25T15:07:50.242Z","comments":true,"path":"api/articles/汇编语言-程序.json","keywords":null,"cover":null,"content":"<h1 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h1><h2 id=\"一个源程序从写出到执行的过程\"><a href=\"#一个源程序从写出到执行的过程\" class=\"headerlink\" title=\"一个源程序从写出到执行的过程\"></a>一个源程序从写出到执行的过程</h2><ul>\n<li>编写</li>\n<li>编译连接<ul>\n<li>使用汇编语言编译程序（MASM.EXE）对源程序文件中的源程序进行编译，产生目标文件(.obj)</li>\n<li>再用连接程序（LINK.EXE）对目标文件进行连接，生成可在操作系统中直接运行的可执行文件(.exe)。</li>\n</ul>\n</li>\n<li>执行（可执行文件）<ul>\n<li>程序（从原程序中的汇编指令翻译过来的机器码）和数据（源程序中定义的数据）。</li>\n<li>相关的描述信息（如：程序有多大、要占多少内存空间等）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"源程序\"><a href=\"#源程序\" class=\"headerlink\" title=\"源程序\"></a>源程序</h2><ul>\n<li>汇编指令</li>\n<li>伪指令<ul>\n<li>没有对应的机器码的指令，最终不被CPU所执行</li>\n<li>伪指令由编译器来执行的指令，编译器根据伪指令来进行相关的编译工作。</li>\n<li>segment和ends是一对成对使用的伪指令，这是在写可被编译器编译的汇编程序时，必须要用到的一对伪指令。</li>\n<li>segment和ends的功能是定义一个段，segment说明一个段的开始，ends说明一个段的结束。</li>\n<li>一个段必须有一个名称来标识，使用格式为：<ul>\n<li>段名 segment</li>\n<li>段名 ends</li>\n</ul>\n</li>\n<li>一个汇编程序由多个段组成，这些段被用来存放代码、数据或当作栈空间来使用。</li>\n<li>一个有意义的汇编程序中至少要有一个段，这个段用来存放代码。</li>\n</ul>\n</li>\n<li>end是一个汇编程序的结束标记，编译器在编译汇编程序的过程中，如果碰倒了伪指令end，就结束对源程序的编译。<ul>\n<li>程序写完必须要写end</li>\n</ul>\n</li>\n<li>end是结束，ends是段的结束（end_segment）</li>\n<li>assume：含义为“假设”<ul>\n<li>假设某一段寄存器和程序中的某一个用segment…ends定义的段相关联。</li>\n<li>通过assume说明这种关联，在需要的情况下，编译程序可以将段寄存器和某一个具体的段相联系。</li>\n<li>语句：assume CS:codesg –&gt; 假设CS（代码段）名称为codesg（code_segment）</li>\n</ul>\n</li>\n<li>源程序中的程序<ul>\n<li>汇编源程序：<ul>\n<li>伪指令（编译器处理）</li>\n<li>汇编指令（编译为机器码）</li>\n</ul>\n</li>\n<li>注意：<ul>\n<li>我们可以将源程序文件中的所有内容称为源程序，将源程序中最终由计算机执行处理的指令或数据，称为程序。</li>\n<li>程序最先以汇编指令的形式存在源程序中，经编译、连接后转变为机器码。存储在可执行文件中。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>标号<ul>\n<li>一个标号只带了一个地址。</li>\n<li>codesg：放在segment的前面，作为一个段的名称，这个段的名称最终将被编译、连接程序处理为一个段的段地址。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编译和连接\"><a href=\"#编译和连接\" class=\"headerlink\" title=\"编译和连接\"></a>编译和连接</h2><ul>\n<li>连接的作用：<ul>\n<li>当源程序很大时，可以将它分为多个源程序文件来编译，每个源程序编译成为目标文件后，再用连接程序将它们连接到一起，生成一个可执行文件。</li>\n<li>程序中调用了某个库文件中的子程序，需要将这个库文件和该程序生成的目标文件连接到一起，生成一个可执行文件；</li>\n<li>一个源程序编译后，得到了存有机器码的目标文件，目标文件中的有些内容还不能直接用来生成可执行文件，连接程序将这些内容处理为最终的可执行信息。所以，在只有一个源程序文件，而又不需要调用某个库中的子程序的情况下，也必须用连接程序对目标文件进行处理，生成可执行文件。</li>\n<li>对于连接的过程，可执行文件是我们要得到的最终结果。</li>\n</ul>\n</li>\n<li>学习汇编的目的是通过汇编语言进行编程而深入地理解计算机底层的基本工作机理，达到可以随心所欲地控制计算机的目的。</li>\n<li>编辑器（edit）、编译器（masm）、连接器（link）、调试工具（debug）等所有工具，而这些工具都是在操作系统之上运行的程序，所以我们的学习过程必须建立在操作系统的环境中进行。</li>\n</ul>\n<h2 id=\"可执行文件中的程序装入内存并运行的原理\"><a href=\"#可执行文件中的程序装入内存并运行的原理\" class=\"headerlink\" title=\"可执行文件中的程序装入内存并运行的原理\"></a>可执行文件中的程序装入内存并运行的原理</h2><ul>\n<li>汇编程序从写出到执行的过程：<ul>\n<li>编程(edit)–&gt;1.asm–&gt;编译(masm)–&gt;1.obj–&gt;连接(link)–&gt;1.exe–&gt;加载(command)–&gt;内存中的程序–&gt;运行(CPU)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"程序执行过程的跟踪\"><a href=\"#程序执行过程的跟踪\" class=\"headerlink\" title=\"程序执行过程的跟踪\"></a>程序执行过程的跟踪</h2><ul>\n<li>Debug</li>\n<li>Debug可以将程序加载入内存，设置CS:IP指向程序的入口，但Debug并不放弃对CPU的控制，这样，我们就可以使用Debug的相关命令来单步执行程序，查看每条指令的执行结果。</li>\n<li>-r 可以查看各个寄存器的设置情况.</li>\n<li>-u 可以查看其他指令。</li>\n<li>-t 单步执行程序中的每一条指令，并观察每条指令的执行结果。</li>\n<li>到了int 21，我们要用-p命令执行：<ul>\n<li>int 21执行后，显示“Program terminated normally”，返回到debug中。表示程序正常结束。</li>\n</ul>\n</li>\n<li>Debug将程序从可执行文件加载入内存后，CX中存放的是和程序的长度。</li>\n<li>EXE文件中的程序的加载过程<ul>\n<li>总结<ul>\n<li>程序加载后，DS中存放着程序所在内存区的段地址，这个内存区的偏移地址为0，则程序所在的内存区的地址为：DS:0;</li>\n<li>这个内存区的前256个字节中存放的是PSP，DOS用来和程序进行通信。</li>\n<li>从256个字节处向后的空间存放的是程序。</li>\n<li>所以，我们从DS中可以得到PSP的段地址SA，PSP的偏移地址为0，则物理地址为SA×16+0</li>\n<li>因为PSP占256（100H）个字节，所以程序的物理地址是：<ul>\n<li>SA×16+0+256=SA×16+16×16=（SA+16）×16+0</li>\n<li>可用段地址和偏移地址表示为:SA+10:0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","text":"程序一个源程序从写出到执行的过程 编写 编译连接 使用汇编语言编译程序（MASM.EXE）对源程序文件中的源程序进行编译，产生目标文件(.obj) 再用连接程序（LINK.EXE）对目标文件进行连接，生成可在操作系统中直接运行的可执行文件(.exe)。 执行（可执行文件） 程序（...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/categories/汇编语言.json"}],"tags":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/tags/汇编语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E6%BA%90%E7%A8%8B%E5%BA%8F%E4%BB%8E%E5%86%99%E5%87%BA%E5%88%B0%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">一个源程序从写出到执行的过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">源程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">编译和连接</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%A3%85%E5%85%A5%E5%86%85%E5%AD%98%E5%B9%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">可执行文件中的程序装入内存并运行的原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E7%9A%84%E8%B7%9F%E8%B8%AA\"><span class=\"toc-text\">程序执行过程的跟踪</span></a></li></ol></li></ol>","author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"空中交通管理","uid":"57e1324765d5f8241090ef5d7b0d2caa","slug":"空中交通管理","date":"2022-01-17T10:56:41.882Z","updated":"2020-08-16T00:01:58.940Z","comments":true,"path":"api/articles/空中交通管理.json","keywords":null,"cover":null,"text":"进度计划 第一周 第一章-绪论 第二周 第二章-管理机构及职能 第三周 第三章-航空器和飞行高度层 第四周 第四章-机场、机场的组织与管理 第五周 第五章-空域、空域的概述和分类、管理、使用 第六周 第六章空中交通服务通信、航空固定通信设施 第七周 春季校运会放假 第八周 第六章...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"航空管理","slug":"航空管理","count":1,"path":"api/tags/航空管理.json"}],"author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"汇编语言_寄存器（内存访问）","uid":"c343f83bed72a2ec56171e72980851e4","slug":"汇编语言-寄存器（内存访问）","date":"2022-01-17T10:56:41.871Z","updated":"2020-10-22T11:25:32.189Z","comments":true,"path":"api/articles/汇编语言-寄存器（内存访问）.json","keywords":null,"cover":null,"text":"第3章 寄存器（内存访问）3.1 内存中字的存储 任何两个地址连续的内存单元，N号单元和N+1号单元，可以将他们堪称两个内存单元，也可以看成一个地址为N的字单元中的高位字节单元和地位字节单元。 高高低低原则：高位存放在高地址，低位存放在低地址。 3.2 DS和[address] ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/categories/汇编语言.json"}],"tags":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/tags/汇编语言.json"}],"author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}