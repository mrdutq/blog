{"title":"汇编语言_寄存器（CPU工作原理）","uid":"f400084cdc57c1ce1c5f51d765d1c6cd","slug":"汇编语言-寄存器（CPU工作原理）","date":"2022-01-17T10:56:41.865Z","updated":"2020-10-21T07:55:54.579Z","comments":true,"path":"api/articles/汇编语言-寄存器（CPU工作原理）.json","keywords":null,"cover":null,"content":"<h1 id=\"第2章-寄存器（CPU工作原理）\"><a href=\"#第2章-寄存器（CPU工作原理）\" class=\"headerlink\" title=\"第2章 寄存器（CPU工作原理）\"></a>第2章 寄存器（CPU工作原理）</h1><ul>\n<li>CPU概述<ul>\n<li>一个典型的CPU由运算器、控制器、寄存器等器件组成，这些器件靠内部总线相连。</li>\n<li>区别：<ul>\n<li>内部总线实现CPU内部各个器件之间的联系。</li>\n<li>外部总线实现CPU和主板上其他器件的联系。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>寄存器概述<ul>\n<li>8086CPU有14个寄存器<ul>\n<li>AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-1-通用寄存器\"><a href=\"#2-1-通用寄存器\" class=\"headerlink\" title=\"2.1 通用寄存器\"></a>2.1 通用寄存器</h2><ul>\n<li>8086CPU所有的寄存器都是16位的，可以存放两个字节。</li>\n<li>AX、BX、CX、DX通常用来存放一般性数据被称为通用寄存器。<ul>\n<li>一个16位寄存器可以存储一个16位的数据</li>\n<li>一个16位寄存器所能存储的数据的最大值为2^16-1.</li>\n</ul>\n</li>\n<li>8086上一代CPU中的寄存器都是8位的。</li>\n<li>为了保证兼容性，这四个寄存器都可以分为两个独立的8位寄存器使用。<ul>\n<li>AX可以分为AH和AL(AH高8位8<del>15位、AL低8位0</del>7位)</li>\n<li>BX可以分为BH和BL</li>\n<li>CX可以分为CH和CL</li>\n<li>DX可以分为DH和DL</li>\n</ul>\n</li>\n<li>一个8位寄存器所能存储的数据的最大值为2^8-1.</li>\n</ul>\n<h2 id=\"2-2-字在寄存器中的存储✳\"><a href=\"#2-2-字在寄存器中的存储✳\" class=\"headerlink\" title=\"2.2 字在寄存器中的存储✳\"></a>2.2 字在寄存器中的存储✳</h2><ul>\n<li>一个字（word）可以存在一个16位寄存器中，这个字的高位字节和低位字节自然就存在这个寄存器的高8位寄存器和低8位寄存器中。</li>\n</ul>\n<h2 id=\"2-3-几条汇编指令\"><a href=\"#2-3-几条汇编指令\" class=\"headerlink\" title=\"2.3 几条汇编指令\"></a>2.3 几条汇编指令</h2><ul>\n<li>汇编指令不区分大小写。<ul>\n<li>mov ax,18 将18送入AX</li>\n<li>mov ah,78 将78送入AH</li>\n<li>add ax,8 将寄存器AX中的数值加上8</li>\n<li>mov ax,bx 将寄存器BX中的数据送入寄存器AX</li>\n<li>add ax,bx 将AX,BX 中的内容相加，结果存在AX中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-4-物理地址\"><a href=\"#2-4-物理地址\" class=\"headerlink\" title=\"2.4 物理地址\"></a>2.4 物理地址</h2><ul>\n<li>CPU访问内存单元时要给出内存单元的地址。所有的内存单元构成的存储空间是一个一维的线性空间。</li>\n<li>我们称这个唯一的地址成为物理地址。</li>\n</ul>\n<h2 id=\"2-5-16位结构的CPU\"><a href=\"#2-5-16位结构的CPU\" class=\"headerlink\" title=\"2.5 16位结构的CPU\"></a>2.5 16位结构的CPU</h2><ul>\n<li>16位结构描述了一个CPU具有以下几个方面的特征<ul>\n<li>1、运算器一次最多可以处理16位的数据。</li>\n<li>2、寄存器的最大宽度位16位。</li>\n<li>3、寄存器和运算器之间的通路是16位的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-6-8086CPU给出物理地址的方法\"><a href=\"#2-6-8086CPU给出物理地址的方法\" class=\"headerlink\" title=\"2.6 8086CPU给出物理地址的方法\"></a>2.6 8086CPU给出物理地址的方法</h2><ul>\n<li>8086有20位地址总线，可传送20位地址，寻址能力为1MB（2^20B）。</li>\n<li>8086内部为16为结构，它只能传送16位的地址，表现出的寻址能力却只有64kB(2^16B)</li>\n<li>8086CPU读写内存时，发生了这么些事：<ul>\n<li>1、CPU中相关部件提供两个16位的地址，一个称为段地址，另一个称为偏移地址；</li>\n<li>2、段地址和偏移地址通过内部总线进入一个称为地址加法器的部件；</li>\n<li>3、地址加法器将两个16位地址合并成一个20位的地址；</li>\n<li>4、……</li>\n</ul>\n</li>\n<li>地址加法器合成物理地址的方法：段地址×16+偏移地址=物理地址<ul>\n<li>“段地址×16”–&gt;数据左移一位（十六进制位）–&gt;数据左移4位（二进制位）<ul>\n<li>一个数据的二进制形式左移1位，相当于该数据乘以2；</li>\n<li>一个数据的二进制形式左移N位，相当于该数据乘以2的N次方；</li>\n<li>一个数据的十六进制形式左移1位，相当于该数据乘以16；</li>\n<li>一个数据的十进制形式左移1位，相当于该数据乘以10；</li>\n<li>一个数据的X进制形式左移1位，相当于该数据乘以X；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-7-“段地址×16-偏移地址-物理地址”的本质含义✳\"><a href=\"#2-7-“段地址×16-偏移地址-物理地址”的本质含义✳\" class=\"headerlink\" title=\"2.7 “段地址×16+偏移地址=物理地址”的本质含义✳\"></a>2.7 “段地址×16+偏移地址=物理地址”的本质含义✳</h2><h2 id=\"2-8-段的概念\"><a href=\"#2-8-段的概念\" class=\"headerlink\" title=\"2.8 段的概念\"></a>2.8 段的概念</h2><ul>\n<li>内存并没有分段，段的划分来自于CPU，由于8086CPU用“段地址×16+偏移地址=物理地址”的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存。</li>\n<li>在编程时可以根据需要，将若干地址连续的内存单元看作一个段，用段地址×16定位段的起始地址（基础地址），用偏移地址定位段中的内存单元。</li>\n<li>偏移地址为16位，16位地址的寻址能力位64K，所以一个段的长度最大为64K。</li>\n</ul>\n<h2 id=\"内存单元地址小结\"><a href=\"#内存单元地址小结\" class=\"headerlink\" title=\"内存单元地址小结\"></a>内存单元地址小结</h2><ul>\n<li>CPU访问内存单元时，必须向内存单元提供内存单元的物理地址。</li>\n<li>8086CPU在内部用段地址和偏移地址移位相加的方法形成最终的物理地址。</li>\n<li>CPU可以用不同的段地址和偏移地址形成同一个物理地址。</li>\n<li>给定一个段地址，偏移地址16位，变化范围为0~FFFFH，仅用偏移地址来寻址最多可寻64K个内存单元。</li>\n<li>在8086PC机中，存储单元的地址用两个元素来描述。即段地址和偏移地址。</li>\n<li>“数据在21F60H内存单元中。”对于8086PC机有两种描述：<ul>\n<li>(a)数据存在内存2000:1F60单元中；</li>\n<li>(b)数据存在内存的2000段中的1F60H单元                                         中。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-9-段寄存器\"><a href=\"#2-9-段寄存器\" class=\"headerlink\" title=\"2.9 段寄存器\"></a>2.9 段寄存器</h2><ul>\n<li>段寄存器就是提供段地址的。<ul>\n<li>8086CPU有4个段寄存器：CS、DS、SS、ES</li>\n</ul>\n</li>\n<li>当8086CPU要访问内存时，由这四个段寄存器提供内存单元的段地址。</li>\n</ul>\n<h2 id=\"2-10-CS和IP\"><a href=\"#2-10-CS和IP\" class=\"headerlink\" title=\"2.10 CS和IP\"></a>2.10 CS和IP</h2><ul>\n<li>CS和IP是8086CPU中最关键的寄存器，它们指示了CPU当前要读取指令的地址。<ul>\n<li>CS为代码段寄存器</li>\n<li>IP为指令指针寄存器</li>\n</ul>\n</li>\n<li>8086PC工作过程的简要概述<ul>\n<li>(1)从CS：IP指向内存单元读取指令，读取的指令进入指令缓冲器；</li>\n<li>(2)IP=IP+所读取指令的长度，从而指向下一条指令；</li>\n<li>(3 )执行指令。转到步骤(1)，重复这个过程。</li>\n<li>在8086CPU加电启动或复位后（即CPU刚开始工作时）CS和IP被设置为CS=FFFFH，IP=0000H<ul>\n<li>即在8086PC机刚启动时，CPU从内存FFFF0H单元中读取指令执行。</li>\n<li>FFFF0H单元中的指令时8086PC机开机后执行的第一条指令。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在任何时候，CPU将CS、IP中的内容当作指令的段地址和偏移地址，用它们合成指令的物理地址，到内存中读取指令码，执行。</li>\n<li>如果说，内存中的一段信息曾被CPU执行过的话，那么，它所在的内存单元必然被CS:IP指向过。</li>\n</ul>\n<h2 id=\"2-11-修改CS、IP的指令\"><a href=\"#2-11-修改CS、IP的指令\" class=\"headerlink\" title=\"2.11 修改CS、IP的指令\"></a>2.11 修改CS、IP的指令</h2><ul>\n<li>在CPU中，程序员能够用指令读写的部件只有寄存器，程序员可以通过改变寄存器中的内容实现对CPU的控制。</li>\n<li>CPU从何处执行指令是由CS、IP中的内容决定的，程序员可以通过改变CS、IP中的内容来控制CPU执行目标指令。</li>\n<li>同时修改CS、IP的内容：<ul>\n<li>jmp 段地址:偏移地址<ul>\n<li>jmp 2AE3:3</li>\n<li>jmp 3:0B46</li>\n</ul>\n</li>\n<li>功能：用指令给出的段地址修改CS，偏移地址修改IP。</li>\n</ul>\n</li>\n<li>仅修改IP的内容:<ul>\n<li>jmp 某一合法寄存器<ul>\n<li>jmp ax</li>\n<li>jmp bx</li>\n<li>功能：用寄存器中的值修改IP。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-12-代码段\"><a href=\"#2-12-代码段\" class=\"headerlink\" title=\"2.12 代码段\"></a>2.12 代码段</h2><ul>\n<li>对于8086PC机，在编程时可以根据需要将一组内存单元定义为一个段。</li>\n<li>可以将长度为N（N&lt;=64KB）的一组代码，存在一组地址连续、起始地址为16的倍数的内存单元中，这段代码是用来存放代码的，就定义了一个代码段。</li>\n<li>CPU只认被CS:IP指向的内存单元中的内容为指令。</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>1、段地址在8086CPU的寄存器中存放。当8086CPU要访问内存时，由段寄存器提供内存单元的段地址。8086CPU有四个段寄存器，其中CS用来存放指令的段地址。</li>\n<li>2、CS存放指令的段地址，IP存放指令的偏移地址。<ul>\n<li>8086机中，任意时刻，CPU将CS:IP指向的内容当作指令执行。</li>\n</ul>\n</li>\n<li>3、8086CPU的工作过程<ul>\n<li>(1)从CS:IP指向内存单元读取指令，读取的指令进入指令缓冲器。</li>\n<li>(2)IP指向下一条指令；</li>\n<li>(3)执行指令。（转到步骤(1)，重复这个过程）</li>\n</ul>\n</li>\n<li>4、8086CPU提供转移指令修改CS、IP的内容。</li>\n</ul>\n","text":"第2章 寄存器（CPU工作原理） CPU概述 一个典型的CPU由运算器、控制器、寄存器等器件组成，这些器件靠内部总线相连。 区别： 内部总线实现CPU内部各个器件之间的联系。 外部总线实现CPU和主板上其他器件的联系。 寄存器概述 8086CPU有14个寄存器 AX、BX、CX、...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/categories/汇编语言.json"}],"tags":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/tags/汇编语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC2%E7%AB%A0-%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%88CPU%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%89\"><span class=\"toc-text\">第2章 寄存器（CPU工作原理）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">2.1 通用寄存器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%AD%97%E5%9C%A8%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E2%9C%B3\"><span class=\"toc-text\">2.2 字在寄存器中的存储✳</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-%E5%87%A0%E6%9D%A1%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">2.3 几条汇编指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">2.4 物理地址</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-16%E4%BD%8D%E7%BB%93%E6%9E%84%E7%9A%84CPU\"><span class=\"toc-text\">2.5 16位结构的CPU</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-8086CPU%E7%BB%99%E5%87%BA%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.6 8086CPU给出物理地址的方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-%E2%80%9C%E6%AE%B5%E5%9C%B0%E5%9D%80%C3%9716-%E5%81%8F%E7%A7%BB%E5%9C%B0%E5%9D%80-%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80%E2%80%9D%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%90%AB%E4%B9%89%E2%9C%B3\"><span class=\"toc-text\">2.7 “段地址×16+偏移地址&#x3D;物理地址”的本质含义✳</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8-%E6%AE%B5%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2.8 段的概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E5%8D%95%E5%85%83%E5%9C%B0%E5%9D%80%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">内存单元地址小结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-9-%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">2.9 段寄存器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-10-CS%E5%92%8CIP\"><span class=\"toc-text\">2.10 CS和IP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-11-%E4%BF%AE%E6%94%B9CS%E3%80%81IP%E7%9A%84%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">2.11 修改CS、IP的指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-12-%E4%BB%A3%E7%A0%81%E6%AE%B5\"><span class=\"toc-text\">2.12 代码段</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol>","author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"汇编语言_寄存器（内存访问）","uid":"c343f83bed72a2ec56171e72980851e4","slug":"汇编语言-寄存器（内存访问）","date":"2022-01-17T10:56:41.871Z","updated":"2020-10-22T11:25:32.189Z","comments":true,"path":"api/articles/汇编语言-寄存器（内存访问）.json","keywords":null,"cover":null,"text":"第3章 寄存器（内存访问）3.1 内存中字的存储 任何两个地址连续的内存单元，N号单元和N+1号单元，可以将他们堪称两个内存单元，也可以看成一个地址为N的字单元中的高位字节单元和地位字节单元。 高高低低原则：高位存放在高地址，低位存放在低地址。 3.2 DS和[address] ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/categories/汇编语言.json"}],"tags":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/tags/汇编语言.json"}],"author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"汇编语言_基础知识","uid":"34e6d10f1f52aab5198806db1d7c9e9a","slug":"汇编语言-基础知识","date":"2022-01-17T10:56:41.860Z","updated":"2020-10-20T13:36:19.252Z","comments":true,"path":"api/articles/汇编语言-基础知识.json","keywords":null,"cover":null,"text":"第1章 基础知识1.1 机器语言 机器语言是机器指令的集合。 机器指令展开来讲就是一台机器可以正确执行的命令。 1.2 汇编语言的产生 汇编语言的主体是汇编指令。 汇编指令和机器指令的差别在于指令的表示方法上。 汇编指令是机器指令便于记忆的书写格式。 汇编指令是机器指令的助记符。...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/categories/汇编语言.json"}],"tags":[{"name":"汇编语言","slug":"汇编语言","count":4,"path":"api/tags/汇编语言.json"}],"author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}