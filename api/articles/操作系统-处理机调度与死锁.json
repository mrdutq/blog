{"title":"操作系统-处理机调度与死锁","uid":"1d2ed8984af443f473a28e444517b102","slug":"操作系统-处理机调度与死锁","date":"2022-01-17T10:56:41.772Z","updated":"2021-01-18T10:01:31.479Z","comments":true,"path":"api/articles/操作系统-处理机调度与死锁.json","keywords":null,"cover":[],"content":"<h1 id=\"第三章-处理机调度与死锁\"><a href=\"#第三章-处理机调度与死锁\" class=\"headerlink\" title=\"第三章:处理机调度与死锁\"></a>第三章:处理机调度与死锁</h1><h2 id=\"处理机调度算法的目标\"><a href=\"#处理机调度算法的目标\" class=\"headerlink\" title=\"处理机调度算法的目标\"></a>处理机调度算法的目标</h2><h3 id=\"处理机调度算法的共同目标\"><a href=\"#处理机调度算法的共同目标\" class=\"headerlink\" title=\"处理机调度算法的共同目标\"></a>处理机调度算法的共同目标</h3><ul>\n<li>资源利用率:CPU的利用率=CPU有效工作时间/(CPU有效工作时间+CPU空闲等待时间)</li>\n<li>公平性</li>\n<li>平衡性</li>\n<li>策略强制执行</li>\n</ul>\n<h3 id=\"批处理系统的目标\"><a href=\"#批处理系统的目标\" class=\"headerlink\" title=\"批处理系统的目标\"></a>批处理系统的目标</h3><ul>\n<li>平均周转时间短</li>\n<li>系统吞吐量高</li>\n<li>处理机利用率高</li>\n</ul>\n<h3 id=\"分时系统的目标\"><a href=\"#分时系统的目标\" class=\"headerlink\" title=\"分时系统的目标\"></a>分时系统的目标</h3><ul>\n<li>响应时间快</li>\n<li>均衡性</li>\n</ul>\n<h3 id=\"实时系统目标\"><a href=\"#实时系统目标\" class=\"headerlink\" title=\"实时系统目标\"></a>实时系统目标</h3><ul>\n<li>截止时间的保证</li>\n<li>可预测性</li>\n</ul>\n<h3 id=\"处理机调度的层次\"><a href=\"#处理机调度的层次\" class=\"headerlink\" title=\"处理机调度的层次\"></a>处理机调度的层次</h3><ul>\n<li>高级调度（作业调度）<ul>\n<li>分时系统无需作业调度，因为需要交互</li>\n<li>批处理系统需要作业调度</li>\n</ul>\n</li>\n<li>中级调度（和挂起有关）</li>\n<li>低级调度（进程调度）<ul>\n<li>进程调度是最基本的调度，任何操作系统都有进程调度。</li>\n<li>低级调度的三个基本机制<ul>\n<li>排队器</li>\n<li>分派器</li>\n<li>上下文切换</li>\n</ul>\n</li>\n<li>进程调度方式<ul>\n<li>非抢占方式</li>\n<li>抢占方式<ul>\n<li>优先权原则</li>\n<li>短进程优先原则</li>\n<li>时间片原则</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>进程调度的任务<ul>\n<li>保存处理机的现场信息</li>\n<li>按某种算法选取进程</li>\n<li>把处理器分配给进程</li>\n</ul>\n</li>\n<li>进程调度的算法<ul>\n<li>优先级调度算法<ul>\n<li>优先级调度算法的类型<ul>\n<li>非抢占式优先级调度算法<ul>\n<li>等当前进程执行完以后，再执行另一个优先权最高的进程</li>\n<li>这种调度算法主要用于批处理系统中；也可用于某些对实时性要求不严的实时系统中。 </li>\n</ul>\n</li>\n<li>抢占式优先级调度算法<ul>\n<li>不等当前进程结束，直接抢处理机</li>\n<li>常用于要求比较严格的实时系统中， 以及对性能要求较高的批处理和分时系统中。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优先级的类型<ul>\n<li>静态优先级<ul>\n<li>优先权是在创建进程时确定的，且在进程的整个运行期间保持不变。一般地，优先权是利用某一范围内的一个整数来表示的，例如，0<del>7或0</del>255中的某一整数， 又把该整数称为优先数。</li>\n<li>可以参考BIOS系统中设置boot的优先级</li>\n</ul>\n</li>\n<li>动态优先级<ul>\n<li>在创建进程时所赋予的优先权，是可以随进程的推进或随其等待时间的增加而改变的，以便获得更好的调度性能。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>轮转调度算法<ul>\n<li>基本原理:在轮转(RR)法中，系统根据FCFS策略，将所有的就绪进程排成一个就绪队列，并可设置每隔一定时间间隔(如30ms)即产生一次中断，激活系统中的进程调度程序，完成一次调度，将CPU分配给队首进程，令其执行</li>\n<li>进程切换时机<ul>\n<li>时间片未用完，进程完成</li>\n<li>时间片到，进程未完成</li>\n</ul>\n</li>\n<li>时间片大小的确定<ul>\n<li>太小利于短作业，增加系统切换开销</li>\n<li>太长就退化为FCFS算法</li>\n<li>一般选择: q略大于一次交互所需要的时间，使大多数进程在一个时间片内完成</li>\n</ul>\n</li>\n<li>一般来说，平均周转时间将比SJF长，但是有较好的响应时间</li>\n</ul>\n</li>\n<li>多队列调度算法</li>\n<li>多级反馈队列调度算法<ul>\n<li>调度机制<ul>\n<li>设置多个就绪队列</li>\n<li>每个队列都采用FCFS算法</li>\n<li>按照队列优先级调度，在第n队列中采取按时间片轮转的方式运行</li>\n</ul>\n</li>\n<li>调度算法的性能<ul>\n<li>对于终端型用户，由于作业小，感觉满意</li>\n<li>对于短批处理作业用户，周转时间也较小</li>\n<li>长批处理作业用户，也能够得到执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>基于公平原则的调度算法<ul>\n<li>保证调度算法</li>\n<li>公平分享调度算法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"作业与作业调度\"><a href=\"#作业与作业调度\" class=\"headerlink\" title=\"作业与作业调度\"></a>作业与作业调度</h2><h3 id=\"作业\"><a href=\"#作业\" class=\"headerlink\" title=\"作业\"></a>作业</h3><ul>\n<li>作业不仅包含程序和数据，还配有一份作业说明书，系统根据说明书对程序的运行进行控制。批处理系统是以作业为单位从外存掉入内存的。</li>\n</ul>\n<h3 id=\"作业控制块JCB\"><a href=\"#作业控制块JCB\" class=\"headerlink\" title=\"作业控制块JCB\"></a>作业控制块JCB</h3><ul>\n<li>为每个作业设置一个JCB，保存了对作业管理调度的全部信息。是作业存在的标志。</li>\n</ul>\n<h3 id=\"作业步\"><a href=\"#作业步\" class=\"headerlink\" title=\"作业步\"></a>作业步</h3><ul>\n<li>作业步，每个作业都必须经过若干相对独立，有相互关联的顺序步骤才能得到结果。每一个步骤就是一个作业步。</li>\n</ul>\n<h3 id=\"作业运行的三个阶段\"><a href=\"#作业运行的三个阶段\" class=\"headerlink\" title=\"作业运行的三个阶段\"></a>作业运行的三个阶段</h3><ul>\n<li>收容阶段</li>\n<li>运行阶段</li>\n<li>完成阶段</li>\n</ul>\n<h3 id=\"作业运行的三个状态\"><a href=\"#作业运行的三个状态\" class=\"headerlink\" title=\"作业运行的三个状态\"></a>作业运行的三个状态</h3><ul>\n<li>后备状态</li>\n<li>运行状态</li>\n<li>完成状态</li>\n</ul>\n<h3 id=\"作业调度的主要任务\"><a href=\"#作业调度的主要任务\" class=\"headerlink\" title=\"作业调度的主要任务\"></a>作业调度的主要任务</h3><ul>\n<li>接纳多少个作业</li>\n<li>接纳哪些作业</li>\n</ul>\n<h3 id=\"先来先服务-first–come-first–served，FCFS-调度算法\"><a href=\"#先来先服务-first–come-first–served，FCFS-调度算法\" class=\"headerlink\" title=\"先来先服务(first–come first–served，FCFS)调度算法\"></a>先来先服务(first–come first–served，FCFS)调度算法</h3><ul>\n<li>比较有利于长作业，而不利于短作业。</li>\n<li>有利于CPU繁忙的作业，而不利于I/O繁忙的作业。</li>\n</ul>\n<h3 id=\"短作业优先-short-job-first，SJF-的调度算法\"><a href=\"#短作业优先-short-job-first，SJF-的调度算法\" class=\"headerlink\" title=\"短作业优先(short job first，SJF)的调度算法\"></a>短作业优先(short job first，SJF)的调度算法</h3><ul>\n<li>优点<ul>\n<li>比FCFS改善平均周转时间和平均带权周转时间，缩短作业的等待时间；</li>\n<li>提高系统的吞吐量；</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>必须预知作业的运行时间</li>\n<li>对长作业非常不利，长作业的周转时间会明显地增长</li>\n<li>在采用SJF算法时，人–机无法实现交互</li>\n<li>该调度算法完全未考虑作业的紧迫程度，故不能保证紧迫性作业能得到及时处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优先级调度算法-priority–scheduling-algorithm，PSA\"><a href=\"#优先级调度算法-priority–scheduling-algorithm，PSA\" class=\"headerlink\" title=\"优先级调度算法(priority–scheduling algorithm，PSA)\"></a>优先级调度算法(priority–scheduling algorithm，PSA)</h3><h3 id=\"高响应比优先调度算法-Highest-Response-Ratio-Next-HRRN\"><a href=\"#高响应比优先调度算法-Highest-Response-Ratio-Next-HRRN\" class=\"headerlink\" title=\"高响应比优先调度算法(Highest Response Ratio Next,HRRN)\"></a>高响应比优先调度算法(Highest Response Ratio Next,HRRN)</h3><ul>\n<li>原理<ul>\n<li>在每次选择作业投入运行时，先计算此时后备作业队列中每个作业的响应比RP然后选择其值最大的作业投入运行</li>\n<li>优先权=(等待时间+要求服务时间)/要求服务时间=响应时间/要求服务时间=1+等待时间/要求服务时间</li>\n</ul>\n</li>\n<li>特点<ul>\n<li>如果作业的等待时间相同，则要求服务的时间愈短，其优先权愈高，因而类似于SJF算法，有利于短作业</li>\n<li>当要求服务的时间相同时，作业的优先权又决定于其等待时间，因而该算法又类似于FCFS算法</li>\n<li>对于长时间的优先级，可以为随等待时间的增加而提高，当等待时间足够长时，也可获得处理机</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实时调度-HRT和SRT任务\"><a href=\"#实时调度-HRT和SRT任务\" class=\"headerlink\" title=\"实时调度(HRT和SRT任务)\"></a>实时调度(HRT和SRT任务)</h2><h3 id=\"实现实时调度的基本条件\"><a href=\"#实现实时调度的基本条件\" class=\"headerlink\" title=\"实现实时调度的基本条件\"></a>实现实时调度的基本条件</h3><ul>\n<li>提供必要信息<ul>\n<li>就绪时间</li>\n<li>开始截止时间和完成截止时间</li>\n<li>处理时间</li>\n<li>资源要求</li>\n<li>优先级</li>\n</ul>\n</li>\n<li>系统处理能力强<ul>\n<li>∑(Ci/Pi)≤1</li>\n<li>N个处理机:∑(Ci/Pi)≤N</li>\n</ul>\n</li>\n<li>采用抢占式调度机制</li>\n<li>具有快速切换机制<ul>\n<li>对中断的快速响应能力</li>\n<li>快速的任务分派能力</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实时调度算法的分类\"><a href=\"#实时调度算法的分类\" class=\"headerlink\" title=\"实时调度算法的分类\"></a>实时调度算法的分类</h3><ul>\n<li>非抢占式调度算法<ul>\n<li>非抢占式轮转调度算法</li>\n<li>非抢占式优先调度算法</li>\n</ul>\n</li>\n<li>抢占式调度算法<ul>\n<li>基于时钟中断的抢占式优先级调度算法</li>\n<li>立即抢占的优先级调度算法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"最早截止时间优先EDF-Earliest-Deadline-First-算法\"><a href=\"#最早截止时间优先EDF-Earliest-Deadline-First-算法\" class=\"headerlink\" title=\"最早截止时间优先EDF(Earliest Deadline First)算法\"></a>最早截止时间优先EDF(Earliest Deadline First)算法</h3><ul>\n<li>根据任务的开始截至时间来确定任务的优先级<ul>\n<li>截至时间越早，优先级越高</li>\n</ul>\n</li>\n<li>非抢占式调度方式用于非周期实时任务</li>\n<li>抢占式调度方式用于周期实时任务</li>\n</ul>\n<h3 id=\"最低松弛度优先LLF-Least-Laxity-First-算法\"><a href=\"#最低松弛度优先LLF-Least-Laxity-First-算法\" class=\"headerlink\" title=\"最低松弛度优先LLF(Least Laxity First)算法\"></a>最低松弛度优先LLF(Least Laxity First)算法</h3><ul>\n<li>类似EDF</li>\n<li>算法根据任务紧急(或松弛)的程度，来确定任务的优先级。任务的紧急程度愈高，为该任务所赋予的优先级就愈高， 以使之优先执行。</li>\n<li>松弛度例子<ul>\n<li>例如，一个任务在200ms时必须完成，而它本身所需的运行时间就有100ms，因此，调度程序必须在100 ms之前调度执行，该任务的紧急程度(松弛程度)为100 ms</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优先级倒置-Priority-inversion-problem\"><a href=\"#优先级倒置-Priority-inversion-problem\" class=\"headerlink\" title=\"优先级倒置(Priority inversion problem)\"></a>优先级倒置(Priority inversion problem)</h3><ul>\n<li>优先级倒置的形成<ul>\n<li>高优先级进程被低优先级进程延迟或阻塞。</li>\n</ul>\n</li>\n<li>优先级倒置的解决方法<ul>\n<li>简单的:假如进程P3在进入临界区后P3所占用的处理机就不允许被抢占</li>\n<li>实用的:建立在动态优先级继承基础上的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"死锁概述\"><a href=\"#死锁概述\" class=\"headerlink\" title=\"死锁概述\"></a>死锁概述</h2><h3 id=\"资源问题\"><a href=\"#资源问题\" class=\"headerlink\" title=\"资源问题\"></a>资源问题</h3><ul>\n<li>可重用性资源<ul>\n<li>计算机外设</li>\n</ul>\n</li>\n<li>消耗性资源<ul>\n<li>数据，消息</li>\n</ul>\n</li>\n<li>可抢占性资源<ul>\n<li> 不引起死锁</li>\n<li>CPU，内存 </li>\n</ul>\n</li>\n<li>不可抢占性资源<ul>\n<li>光驱，打印机</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"计算机系统中的死锁\"><a href=\"#计算机系统中的死锁\" class=\"headerlink\" title=\"计算机系统中的死锁\"></a>计算机系统中的死锁</h3><ul>\n<li>竞争不可抢占性资源引起死锁</li>\n<li>竞争可消耗资源引起死锁</li>\n<li>进程推进顺序不当引起死锁</li>\n</ul>\n<h3 id=\"死锁的定义，必要条件和处理方法\"><a href=\"#死锁的定义，必要条件和处理方法\" class=\"headerlink\" title=\"死锁的定义，必要条件和处理方法\"></a>死锁的定义，必要条件和处理方法</h3><ul>\n<li>定义:如果一组进程中的每一个进程都在等待仅由该进程中的其他进程才能引发的事件，那么该组进程是死锁的</li>\n<li>产生死锁的必要条件<ul>\n<li>互斥条件</li>\n<li>请求和保存条件</li>\n<li>不可抢占条件</li>\n<li>循环等待条件<ul>\n<li>如果每个资源只有一个实例，则环路等待条件是死锁存在的充分必要条件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>处理死锁的方法<ul>\n<li>预防死锁<ul>\n<li>静态方法，在进程执行前采取的措施，通过设置某些限制条件，去破坏产生死锁的四个条件之一，防止发生死锁。</li>\n<li>预防死锁的策略<ul>\n<li>破坏”请求和保存”条件<ul>\n<li>第一种协议<ul>\n<li>所有进程在开始运行之前，必须一次性地申请其在整个运行过程中所需的全部资源</li>\n<li>优点:简单，易行，安全</li>\n<li>缺点<ul>\n<li>资源被严重浪费，严重地恶化了资源的利用率</li>\n<li>使进程经常会发生饥饿现象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第二种协议<ul>\n<li>它允许一个进程只获得运行初期所需的资源后，便开始运行。进程运行过程中再逐步释放已分配给自己的，且已用毕的全部资源，然后再请求新的所需资源</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>破坏”不可抢占”条件<ul>\n<li>当一个已经保存了某些不可被抢占资源的进程，提出新的资源请求而不能得到满足时，它必须释放已经保持的所有资源，待以后需要时再重新申请</li>\n</ul>\n</li>\n<li>破坏”循环等待”条件<ul>\n<li>对系统所以资源类型进行线性排序，并赋予不同的序号</li>\n<li>例如令输入机的序号为1，打印机序号为2，磁盘机序号为3等。所有进程对资源的请求必须严格按资源序号递增的次序提出。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>避免死锁<ul>\n<li>动态的方法，在进程执行过程中采取的措施，不需事先采取限制措施破坏产生死锁的必要条件，而是在进程申请资源时用某种方法去防止系统进入不安全状态，从而避免发生死锁。如银行家算法</li>\n<li>避免死锁的策略<ul>\n<li>系统安全状态<ul>\n<li>安全状态<ul>\n<li>某时刻，对于并发执行的n个进程，若系统能够按照某种顺序如&lt;p1,p2…pn&gt;来为每个进程分配所需资源，直至最大需求，从而使每个进程都可顺利完成，则认为该时刻系统处于安全状态，这样的序列为安全序列</li>\n</ul>\n</li>\n<li>安全状态之例</li>\n<li>由安全状态向不安全状态的转换</li>\n</ul>\n</li>\n<li>利用银行家算法避免死锁<ul>\n<li>含义:每一个新进程在进入系统时，它必须申明在运行过程中，可能需要每种资源类型的最大单元数目，其数目不应超过系统所拥有的资源总量。当进程请求一组资源时，系统必须首先确定是否有足够的资源分配给该进程。若有，再进一步计算在将这些资源分配给进程后，是否会使系统处于不安全状态。如果不会，才将资源分配给它，否则让进程等待</li>\n<li>银行家算法中的数据结构<ul>\n<li>可用资源向量 Available[m]：m为系统中资源种类数，Available[j]=k表示系统中第j类资源数为k个。</li>\n<li>最大需求矩阵 Max[n,m]：n为系统中进程数，Max[i,j]=k表示进程i对j类资源的最大需求数为中k。</li>\n<li>分配矩阵 Allocation[n，m]:它定义了系统中每一类资源当前已分配给每一进程资源数，   Allocation[i,j] = k表示进程i已分得j类资源的数目为k个。</li>\n<li>需求矩阵 Need[n,m]：它表示每个进程尚需的各类资源数，Need[i,j]=k 表示进程i   还需要j类资源k个。Need[i,j]=Max[i,j] - Allocation[i,j]</li>\n</ul>\n</li>\n<li>银行家算法</li>\n<li>安全性算法</li>\n<li>银行家算法之例</li>\n<li>解题<ul>\n<li>矩阵</li>\n<li>列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>检测死锁<ul>\n<li>死锁的检测与解除<ul>\n<li>死锁的检测<ul>\n<li>资源分配图<ul>\n<li>简化步骤<ul>\n<li>选择一个没有阻塞的进程p</li>\n<li>将p移走，包括它的所有请求边和分配边</li>\n<li>重复步骤1，2，直至不能继续下去</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>死锁定理<ul>\n<li>若一系列简化以后不能使所有的进程节点都成为孤立节点</li>\n</ul>\n</li>\n<li>检测时机<ul>\n<li> 当进程等待时检测死锁 （其缺点是系统的开销大）</li>\n<li> 定时检测</li>\n<li> 系统资源利用率下降时检测死锁</li>\n</ul>\n</li>\n<li>死锁检测中的数据结构</li>\n</ul>\n</li>\n<li>死锁的解除<ul>\n<li>抢占资源</li>\n<li>终止(或撤销)进程</li>\n<li>终止进程的方法<ul>\n<li>终止所有死锁进程</li>\n<li>逐个终止进程<ul>\n<li>代价最小<ul>\n<li>进程的优先级的大小</li>\n<li>进程已执行了多少时间，还需时间</li>\n<li>进程在运行中已经使用资源的多少，还需多少资源</li>\n<li>进程的性质是交互式还是批处理的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>付出代价最小的死锁解除算法<ul>\n<li>是使用一个有效的挂起和解除机构来挂起一些死锁的进程</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>解除死锁</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/mrdutq/cdn/images/os/ch3.png\" alt=\"OS—CH3\"></p>\n","text":"第三章:处理机调度与死锁处理机调度算法的目标处理机调度算法的共同目标 资源利用率:CPU的利用率=CPU有效工作时间/(CPU有效工作时间+CPU空闲等待时间) 公平性 平衡性 策略强制执行 批处理系统的目标 平均周转时间短 系统吞吐量高 处理机利用率高 分时系统的目标 响应时间...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/tags/操作系统.json"},{"name":"处理机调度与死锁","slug":"处理机调度与死锁","count":1,"path":"api/tags/处理机调度与死锁.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">第三章:处理机调度与死锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">处理机调度算法的目标</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E5%85%B1%E5%90%8C%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">处理机调度算法的共同目标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">批处理系统的目标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%97%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">分时系统的目标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">实时系统目标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E7%9A%84%E5%B1%82%E6%AC%A1\"><span class=\"toc-text\">处理机调度的层次</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E4%B8%9A%E4%B8%8E%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">作业与作业调度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E4%B8%9A\"><span class=\"toc-text\">作业</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E4%B8%9A%E6%8E%A7%E5%88%B6%E5%9D%97JCB\"><span class=\"toc-text\">作业控制块JCB</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E4%B8%9A%E6%AD%A5\"><span class=\"toc-text\">作业步</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E4%B8%9A%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">作业运行的三个阶段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E4%B8%9A%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%89%E4%B8%AA%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">作业运行的三个状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%9A%84%E4%B8%BB%E8%A6%81%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">作业调度的主要任务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1-first%E2%80%93come-first%E2%80%93served%EF%BC%8CFCFS-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">先来先服务(first–come first–served，FCFS)调度算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%AD%E4%BD%9C%E4%B8%9A%E4%BC%98%E5%85%88-short-job-first%EF%BC%8CSJF-%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">短作业优先(short job first，SJF)的调度算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%85%88%E7%BA%A7%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95-priority%E2%80%93scheduling-algorithm%EF%BC%8CPSA\"><span class=\"toc-text\">优先级调度算法(priority–scheduling algorithm，PSA)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E5%93%8D%E5%BA%94%E6%AF%94%E4%BC%98%E5%85%88%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95-Highest-Response-Ratio-Next-HRRN\"><span class=\"toc-text\">高响应比优先调度算法(Highest Response Ratio Next,HRRN)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%97%B6%E8%B0%83%E5%BA%A6-HRT%E5%92%8CSRT%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">实时调度(HRT和SRT任务)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E8%B0%83%E5%BA%A6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">实现实时调度的基本条件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%97%B6%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">实时调度算法的分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E6%97%A9%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4%E4%BC%98%E5%85%88EDF-Earliest-Deadline-First-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">最早截止时间优先EDF(Earliest Deadline First)算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E4%BD%8E%E6%9D%BE%E5%BC%9B%E5%BA%A6%E4%BC%98%E5%85%88LLF-Least-Laxity-First-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">最低松弛度优先LLF(Least Laxity First)算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%85%88%E7%BA%A7%E5%80%92%E7%BD%AE-Priority-inversion-problem\"><span class=\"toc-text\">优先级倒置(Priority inversion problem)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%BB%E9%94%81%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">死锁概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">资源问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">计算机系统中的死锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%BB%E9%94%81%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%8C%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">死锁的定义，必要条件和处理方法</span></a></li></ol></li></ol></li></ol>","author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"操作系统-存储器管理","uid":"61ce46b388aa93845c5e0ae4f1edb2c3","slug":"操作系统-存储器管理","date":"2022-01-17T10:56:41.778Z","updated":"2021-01-18T10:01:23.891Z","comments":true,"path":"api/articles/操作系统-存储器管理.json","keywords":null,"cover":[],"text":"第四章:存储器管理存储器的层次结构多层结构的存储系统 存储器的多层结构 CPU寄存器 主存 辅存 可执行存储器 寄存器和主存的总称 访问速度快，进程可以在很少的时钟周期内用一条load或store指令完成存取。 主存储器与寄存器高速缓存和磁盘缓存程序的装入和链接步骤 编译 源程序...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/tags/操作系统.json"},{"name":"存储器管理","slug":"存储器管理","count":1,"path":"api/tags/存储器管理.json"}],"author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"学习网站推荐","uid":"5d8159d6c4d39f32f65e93170e5d526a","slug":"学习网站","date":"2022-01-17T10:56:41.766Z","updated":"2020-09-27T03:46:07.243Z","comments":true,"path":"api/articles/学习网站.json","keywords":null,"cover":null,"text":"今天在B站翻到了UP主“三太子敖丙”在六月发布的大学四年自学走来，这些私藏的实用工具/学习网站我贡献出来了，感觉分享的网站对在大学期间自学挺有用的，所以写下来，记录一下。 B站 众所周知，B站是个学习网站 中国大学MOOC IMOOC 极客时间 极客学院 网易云课堂 百度 知乎 ...","link":"","photos":[],"count_time":{"symbolsCount":247,"symbolsTime":"1 mins."},"categories":[{"name":"分享","slug":"分享","count":2,"path":"api/categories/分享.json"}],"tags":[{"name":"学习网站","slug":"学习网站","count":1,"path":"api/tags/学习网站.json"}],"author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}