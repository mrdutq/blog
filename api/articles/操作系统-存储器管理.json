{"title":"操作系统-存储器管理","uid":"61ce46b388aa93845c5e0ae4f1edb2c3","slug":"操作系统-存储器管理","date":"2022-01-17T10:56:41.778Z","updated":"2021-01-18T10:01:23.891Z","comments":true,"path":"api/articles/操作系统-存储器管理.json","keywords":null,"cover":[],"content":"<h1 id=\"第四章-存储器管理\"><a href=\"#第四章-存储器管理\" class=\"headerlink\" title=\"第四章:存储器管理\"></a>第四章:存储器管理</h1><h2 id=\"存储器的层次结构\"><a href=\"#存储器的层次结构\" class=\"headerlink\" title=\"存储器的层次结构\"></a>存储器的层次结构</h2><h3 id=\"多层结构的存储系统\"><a href=\"#多层结构的存储系统\" class=\"headerlink\" title=\"多层结构的存储系统\"></a>多层结构的存储系统</h3><ul>\n<li>存储器的多层结构<ul>\n<li>CPU寄存器</li>\n<li>主存</li>\n<li>辅存</li>\n</ul>\n</li>\n<li>可执行存储器<ul>\n<li>寄存器和主存的总称</li>\n<li>访问速度快，进程可以在很少的时钟周期内用一条load或store指令完成存取。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"主存储器与寄存器\"><a href=\"#主存储器与寄存器\" class=\"headerlink\" title=\"主存储器与寄存器\"></a>主存储器与寄存器</h3><h3 id=\"高速缓存和磁盘缓存\"><a href=\"#高速缓存和磁盘缓存\" class=\"headerlink\" title=\"高速缓存和磁盘缓存\"></a>高速缓存和磁盘缓存</h3><h2 id=\"程序的装入和链接\"><a href=\"#程序的装入和链接\" class=\"headerlink\" title=\"程序的装入和链接\"></a>程序的装入和链接</h2><h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li>编译<ul>\n<li>源程序 -&gt;目标模块（Object modules）——–Compiler<ul>\n<li>由编译程序对用户源程序进行编译，形成若干个目标模块</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>链接<ul>\n<li>一组目标模块 -&gt;装入模块 （Load Module）———-Linker<ul>\n<li>由链接程序将编译后形成的一组目标模板以及它们所需要的库函数链接在一起，形成一个完整的装入模块</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>装入<ul>\n<li>装入模块 -&gt;内存  ——–Loader<ul>\n<li>由装入程序将装入模块装入内存</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"程序的装入\"><a href=\"#程序的装入\" class=\"headerlink\" title=\"程序的装入\"></a>程序的装入</h3><ul>\n<li>绝对装入方式<ul>\n<li>在编译时，如果知道程序将驻留在内存中指定的位置。编译程序将产生绝对地址的目标代码。</li>\n</ul>\n</li>\n<li>可重定位装入方式<ul>\n<li>在可执行文件中，列出各个需要重定位的地址单元和相对地址值。当用户程序被装入内存时，一次性实现逻辑地址到物理地址的转换，以后不再转换(一般在装入内存时由软件完成)。</li>\n<li>优点：不需硬件支持，可以装入有限多道程序。</li>\n<li>缺点：一个程序通常需要占用连续的内存空间，程序装入内存后不能移动。不易实现共享。</li>\n</ul>\n</li>\n<li>动态运行时的装入方式<ul>\n<li>动态运行时的装入程序在把装入模块装入内存后，并不立即把装入模块中的逻辑地址转换为物理地址，而是把这种地址转换推迟到程序真正要执行时才进行</li>\n<li>优点：<ul>\n<li>OS可以将一个程序分散存放于不连续的内存空间，可以移动程序，有利用实现共享。</li>\n<li>能够支持程序执行中产生的地址引用，如指针变量（而不仅是生成可执行文件时的地址引用）。</li>\n</ul>\n</li>\n<li>缺点：需要硬件支持，OS实现较复杂。</li>\n<li>它是虚拟存储的基础。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"程序的链接\"><a href=\"#程序的链接\" class=\"headerlink\" title=\"程序的链接\"></a>程序的链接</h3><ul>\n<li>静态链接方式(lib)</li>\n<li>装入时动态链接</li>\n<li>运行时动态链接(dll)</li>\n</ul>\n<h2 id=\"连续分配存储管理方式\"><a href=\"#连续分配存储管理方式\" class=\"headerlink\" title=\"连续分配存储管理方式\"></a>连续分配存储管理方式</h2><h3 id=\"连续分配\"><a href=\"#连续分配\" class=\"headerlink\" title=\"连续分配\"></a>连续分配</h3><ul>\n<li>单一连续分配(DOS)</li>\n<li>固定分区分配(浪费很多空间)</li>\n<li>动态分区分配</li>\n</ul>\n<h3 id=\"地址映射和存储保护措施\"><a href=\"#地址映射和存储保护措施\" class=\"headerlink\" title=\"地址映射和存储保护措施\"></a>地址映射和存储保护措施</h3><ul>\n<li>基址寄存器：程序的最小物理地址</li>\n<li>界限寄存器：程序的逻辑地址范围</li>\n<li>物理地址 = 逻辑地址 + 基址</li>\n</ul>\n<h3 id=\"内碎片：占用分区之内未被利用的空间\"><a href=\"#内碎片：占用分区之内未被利用的空间\" class=\"headerlink\" title=\"内碎片：占用分区之内未被利用的空间\"></a>内碎片：占用分区之内未被利用的空间</h3><h3 id=\"外碎片：占用分区之间难以利用的空闲分区（通常是小空闲分区）\"><a href=\"#外碎片：占用分区之间难以利用的空闲分区（通常是小空闲分区）\" class=\"headerlink\" title=\"外碎片：占用分区之间难以利用的空闲分区（通常是小空闲分区）\"></a>外碎片：占用分区之间难以利用的空闲分区（通常是小空闲分区）</h3><h3 id=\"把内存划分为若干个固定大小的连续分区。固定式分区又称为静态分区。\"><a href=\"#把内存划分为若干个固定大小的连续分区。固定式分区又称为静态分区。\" class=\"headerlink\" title=\"把内存划分为若干个固定大小的连续分区。固定式分区又称为静态分区。\"></a>把内存划分为若干个固定大小的连续分区。固定式分区又称为静态分区。</h3><ul>\n<li>分区大小相等：只适合于多个相同程序的并发执行（处理多个类型相同的对象）。</li>\n<li>分区大小不等：多个小分区、适量的中等分区、少量的大分区。根据程序的大小，分配当前空闲的、适当大小的分区。</li>\n<li>优点：无外碎片、易实现、开销小。</li>\n<li>缺点：<ul>\n<li>存在内碎片，造成浪费</li>\n<li>分区总数固定，限制了并发执行的程序数目。</li>\n<li>通用Os很少采用，部分控制系统中采用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动态创建分区：指在作业装入内存时，从可用的内存中划出一块连续的区域分配给它，且分区大小正好等于该作业的大小。可变式分区中分区的大小和分区的个数都是可变的，而且是根据作业的大小和多少动态地划分。\"><a href=\"#动态创建分区：指在作业装入内存时，从可用的内存中划出一块连续的区域分配给它，且分区大小正好等于该作业的大小。可变式分区中分区的大小和分区的个数都是可变的，而且是根据作业的大小和多少动态地划分。\" class=\"headerlink\" title=\"动态创建分区：指在作业装入内存时，从可用的内存中划出一块连续的区域分配给它，且分区大小正好等于该作业的大小。可变式分区中分区的大小和分区的个数都是可变的，而且是根据作业的大小和多少动态地划分。\"></a>动态创建分区：指在作业装入内存时，从可用的内存中划出一块连续的区域分配给它，且分区大小正好等于该作业的大小。可变式分区中分区的大小和分区的个数都是可变的，而且是根据作业的大小和多少动态地划分。</h3><ul>\n<li>基于顺序搜索的动态分区分配算法<ul>\n<li>首次适应算法（first fit,FF）<ul>\n<li>顺序找，找到一个满足的就分配，但是可能存在浪费</li>\n<li>这种方法目的在于减少查找时间。</li>\n<li>空闲分区表（空闲区链）中的空闲分区要按地址由低到高进行排序</li>\n</ul>\n</li>\n<li>循环首次适应算法（next fit，NF）<ul>\n<li>相对上面那种，不是顺序，类似哈希算法中左右交叉排序</li>\n<li>空闲分区分布得更均匀，查找开销小</li>\n<li>从上次找到的空闲区的下一个空闲区开始查找，直到找到第一个能满足要求的的空闲区为止，并从中划出一块与请求大小相等的内存空间分配给作业。</li>\n</ul>\n</li>\n<li>最佳适应算法（best fit，BF）<ul>\n<li>找到最合适的，但是大区域的访问次数减少</li>\n<li>这种方法能使外碎片尽量小。</li>\n<li>空闲分区表（空闲区链）中的空闲分区要按大小从小到大进行排序，自表头开始查找到第一个满足要求的自由分区分配。</li>\n</ul>\n</li>\n<li>最坏适应算法（worst fit，WF）<ul>\n<li>相对于最好而言，找最大的区域下手，导致最大的区域可能很少，也造成许多碎片</li>\n<li>空闲分区按大小由大到小排序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>基于索引搜索的动态分区分配算法<ul>\n<li>快速适应算法（quick fit）</li>\n<li>伙伴系统（buddy system）</li>\n<li>哈希算法</li>\n</ul>\n</li>\n<li>动态可重定位分区分配<ul>\n<li>紧凑</li>\n<li>动态重定位<ul>\n<li>动态运行时装入，地址转化在指令执行时进行，需获得硬件地址变换机制的支持</li>\n<li>内存地址=相对地址+起始地址</li>\n</ul>\n</li>\n<li>动态重定位分区分配算法<ul>\n<li>1、在某个分区被释放后立即进行紧凑，系统总是只有一个连续的分区而无碎片，此法很花费机时。</li>\n<li>2、当“请求分配模块”找不到足够大的自由分区分给用户时再进行紧凑，这样紧缩的次数比上种方法少得多，但管理复杂。采用此法的动态重定位分区分配算法框图如下：</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优点：没有内碎片。</li>\n<li>缺点：外碎片。</li>\n</ul>\n<h2 id=\"对换（了解）\"><a href=\"#对换（了解）\" class=\"headerlink\" title=\"对换（了解）\"></a>对换（了解）</h2><h3 id=\"系统把所有的作业放在外存，每次只调用一个作业进入内存运行，当时间片用完时，将它调至外存后备队列上等待，在从后备队列调入另一个作业进入内存运行。\"><a href=\"#系统把所有的作业放在外存，每次只调用一个作业进入内存运行，当时间片用完时，将它调至外存后备队列上等待，在从后备队列调入另一个作业进入内存运行。\" class=\"headerlink\" title=\"系统把所有的作业放在外存，每次只调用一个作业进入内存运行，当时间片用完时，将它调至外存后备队列上等待，在从后备队列调入另一个作业进入内存运行。\"></a>系统把所有的作业放在外存，每次只调用一个作业进入内存运行，当时间片用完时，将它调至外存后备队列上等待，在从后备队列调入另一个作业进入内存运行。</h3><h2 id=\"基本分页存储管理方式\"><a href=\"#基本分页存储管理方式\" class=\"headerlink\" title=\"基本分页存储管理方式\"></a>基本分页存储管理方式</h2><h3 id=\"分页存储管理的基本方式\"><a href=\"#分页存储管理的基本方式\" class=\"headerlink\" title=\"分页存储管理的基本方式\"></a>分页存储管理的基本方式</h3><ul>\n<li>页面<ul>\n<li>将一个进程的逻辑地址空间分成若干个大小相等的片</li>\n</ul>\n</li>\n<li>页框（frame）<ul>\n<li>内存空间分成与页面相同大小的存储块</li>\n</ul>\n</li>\n<li>由于进程的最后一页经常装不满一块而形成了不可利用的碎片，称之为“页内碎片”</li>\n<li>地址结构<ul>\n<li>页号P+位移量W(0-31)</li>\n</ul>\n</li>\n<li>页表<ul>\n<li>在分页系统中，允许将进程的各个页离散地存储在内存在内存的任一物理块中，为保证进程仍然能够正确地运行，即能在内存中找到每一个页面所对应的物理块，系统又为每个进程建立了一张页面映像表，简称页表</li>\n<li>页表的作用是实现从页面号到物理块号的地址映射</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"地址变换机构\"><a href=\"#地址变换机构\" class=\"headerlink\" title=\"地址变换机构\"></a>地址变换机构</h3><ul>\n<li>基本的地址变换机构<ul>\n<li>要访问两次内存</li>\n<li>页表大都驻留在内存中</li>\n<li>为了实现地址变换功能，在系统中设置页表寄存器（PTR），用来存放页表的始址和页表的长度。</li>\n<li>在进程未执行时，每个进程对应的页表的始址和长度存放在进程的PCB中，当该进程被调度时，就将它们装入页表寄存器。</li>\n</ul>\n</li>\n<li>具有快表的地址变换机构<ul>\n<li>提高了效率，此处会有计算题</li>\n<li>如果页表存放在内存中，则每次访问内存时，都要先访问内存中的页表，然后根据所形成的物理地址再访问内存。这样CPU存一个数据必须访问两次内存，从而使计算机的处理速度降低了1/2。</li>\n<li>为了提高地址变换的速度，在地址变换机构中增设了一个具有并行查询功能的特殊的高速缓冲存储器，称为“联想存储器”或“快表”，用以存放当前访问的那些页表项。</li>\n<li>地址变换过程为：<ul>\n<li>1、CPU给出有效地址</li>\n<li>2、地址变换机构自动地将页号送入高速缓存，确定所需要的页是否在快表中。</li>\n<li>3、若是，则直接读出该页所对应的物理块号，送入物理地址寄存器；</li>\n<li>4、若快表中未找到对应的页表项，则需再访问内存中的页表</li>\n<li>5、找到后，把从页表中读出的页表项存入快表中的一个寄存器单元中，以取代一个旧的页表项。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"两级和多级页表\"><a href=\"#两级和多级页表\" class=\"headerlink\" title=\"两级和多级页表\"></a>两级和多级页表</h3><ul>\n<li>主要是有的时候页表太多了，要化简</li>\n<li>格式：外层页号P1+外层页内地址P2+页内地址d</li>\n<li>基本方法：将页表进行分页，每个页面的大小与内存物理块的大小相同，并为它们进行编号，可以离散地将各个页面分别存放在不同的物理块中。</li>\n</ul>\n<h3 id=\"反置页表\"><a href=\"#反置页表\" class=\"headerlink\" title=\"反置页表\"></a>反置页表</h3><ul>\n<li>反置页表为每一个物理块（页框）设置一个页表项，并按物理块排序，其内容则是页号和其所属进程的标识。</li>\n</ul>\n<h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ul>\n<li>没有外碎片，每个内碎片不超过页大小。</li>\n<li>一个程序不必连续存放。</li>\n<li>便于改变程序占用空间的大小。即随着程序运行而动态生成的数据增多，地址空间可相应增长。</li>\n</ul>\n<h3 id=\"缺点：程序全部装入内存。\"><a href=\"#缺点：程序全部装入内存。\" class=\"headerlink\" title=\"缺点：程序全部装入内存。\"></a>缺点：程序全部装入内存。</h3><h2 id=\"分段存储管理方式\"><a href=\"#分段存储管理方式\" class=\"headerlink\" title=\"分段存储管理方式\"></a>分段存储管理方式</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><ul>\n<li>方便编程</li>\n<li>信息共享</li>\n<li>动态增长</li>\n<li>动态链接</li>\n</ul>\n<h3 id=\"在分段存储管理方式中，作业的地址空间被划分为若干个段，每个段是一组完整的逻辑信息，每个段都有自己的名字，都是从零开始编址的一段连续的地址空间，各段长度是不等的。\"><a href=\"#在分段存储管理方式中，作业的地址空间被划分为若干个段，每个段是一组完整的逻辑信息，每个段都有自己的名字，都是从零开始编址的一段连续的地址空间，各段长度是不等的。\" class=\"headerlink\" title=\"在分段存储管理方式中，作业的地址空间被划分为若干个段，每个段是一组完整的逻辑信息，每个段都有自己的名字，都是从零开始编址的一段连续的地址空间，各段长度是不等的。\"></a>在分段存储管理方式中，作业的地址空间被划分为若干个段，每个段是一组完整的逻辑信息，每个段都有自己的名字，都是从零开始编址的一段连续的地址空间，各段长度是不等的。</h3><h3 id=\"内存空间被动态的划分为若干个长度不相同的区域，称为物理段，每个物理段由起始地址和长度确定\"><a href=\"#内存空间被动态的划分为若干个长度不相同的区域，称为物理段，每个物理段由起始地址和长度确定\" class=\"headerlink\" title=\"内存空间被动态的划分为若干个长度不相同的区域，称为物理段，每个物理段由起始地址和长度确定\"></a>内存空间被动态的划分为若干个长度不相同的区域，称为物理段，每个物理段由起始地址和长度确定</h3><h3 id=\"分段系统的基本原理\"><a href=\"#分段系统的基本原理\" class=\"headerlink\" title=\"分段系统的基本原理\"></a>分段系统的基本原理</h3><ul>\n<li>分段<ul>\n<li>格式：段号+段内地址</li>\n</ul>\n</li>\n<li>段表<ul>\n<li>段表实现了从逻辑段到物理内存区的映射。</li>\n</ul>\n</li>\n<li>地址变换机构</li>\n</ul>\n<h3 id=\"和分页的区别\"><a href=\"#和分页的区别\" class=\"headerlink\" title=\"和分页的区别\"></a>和分页的区别</h3><ul>\n<li>页是信息的物理单位</li>\n<li>页的大小固定且由系统固定</li>\n<li>分页的用户程序地址空间是一维的</li>\n<li>通常段比页大，因而段表比页表短，可以缩短查找时间，提高访问速度。</li>\n<li>分页是系统管理的需要，分段是用户应用的需要。一条指令或一个操作数可能会跨越两个页的分界处，而不会跨越两个段的分界处。</li>\n</ul>\n<h3 id=\"信息共享\"><a href=\"#信息共享\" class=\"headerlink\" title=\"信息共享\"></a>信息共享</h3><ul>\n<li>这是分段最重要的优点</li>\n</ul>\n<h3 id=\"段页式存储管理方式\"><a href=\"#段页式存储管理方式\" class=\"headerlink\" title=\"段页式存储管理方式\"></a>段页式存储管理方式</h3><ul>\n<li>基本原理<ul>\n<li>格式：段号（S）+段内页号（P）+页内地址（W）</li>\n</ul>\n</li>\n<li>地址变换过程<ul>\n<li>需要三次访问过程</li>\n</ul>\n</li>\n<li>在段页式系统中，为了获得一条指令或数据，需三次访问内存：第一次访问内存中的段表，从中取得页表始址；第二次访问内存中的页表，从中取出该页所在的物理块号，并将该块号与页内地址一起形成指令或数据的物理地址；第三次访问才是真正根据所得的物理地址取出指令或数据。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/mrdutq/cdn/images/os/ch4.png\" alt=\"OS—CH4\"></p>\n","text":"第四章:存储器管理存储器的层次结构多层结构的存储系统 存储器的多层结构 CPU寄存器 主存 辅存 可执行存储器 寄存器和主存的总称 访问速度快，进程可以在很少的时钟周期内用一条load或store指令完成存取。 主存储器与寄存器高速缓存和磁盘缓存程序的装入和链接步骤 编译 源程序...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/tags/操作系统.json"},{"name":"存储器管理","slug":"存储器管理","count":1,"path":"api/tags/存储器管理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">第四章:存储器管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">存储器的层次结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%B1%82%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">多层结构的存储系统</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8%E4%B8%8E%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">主存储器与寄存器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E5%92%8C%E7%A3%81%E7%9B%98%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">高速缓存和磁盘缓存</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A3%85%E5%85%A5%E5%92%8C%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">程序的装入和链接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A3%85%E5%85%A5\"><span class=\"toc-text\">程序的装入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">程序的链接</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">连续分配存储管理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D\"><span class=\"toc-text\">连续分配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E5%92%8C%E5%AD%98%E5%82%A8%E4%BF%9D%E6%8A%A4%E6%8E%AA%E6%96%BD\"><span class=\"toc-text\">地址映射和存储保护措施</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%A2%8E%E7%89%87%EF%BC%9A%E5%8D%A0%E7%94%A8%E5%88%86%E5%8C%BA%E4%B9%8B%E5%86%85%E6%9C%AA%E8%A2%AB%E5%88%A9%E7%94%A8%E7%9A%84%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">内碎片：占用分区之内未被利用的空间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%96%E7%A2%8E%E7%89%87%EF%BC%9A%E5%8D%A0%E7%94%A8%E5%88%86%E5%8C%BA%E4%B9%8B%E9%97%B4%E9%9A%BE%E4%BB%A5%E5%88%A9%E7%94%A8%E7%9A%84%E7%A9%BA%E9%97%B2%E5%88%86%E5%8C%BA%EF%BC%88%E9%80%9A%E5%B8%B8%E6%98%AF%E5%B0%8F%E7%A9%BA%E9%97%B2%E5%88%86%E5%8C%BA%EF%BC%89\"><span class=\"toc-text\">外碎片：占用分区之间难以利用的空闲分区（通常是小空闲分区）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%8A%E5%86%85%E5%AD%98%E5%88%92%E5%88%86%E4%B8%BA%E8%8B%A5%E5%B9%B2%E4%B8%AA%E5%9B%BA%E5%AE%9A%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%BF%9E%E7%BB%AD%E5%88%86%E5%8C%BA%E3%80%82%E5%9B%BA%E5%AE%9A%E5%BC%8F%E5%88%86%E5%8C%BA%E5%8F%88%E7%A7%B0%E4%B8%BA%E9%9D%99%E6%80%81%E5%88%86%E5%8C%BA%E3%80%82\"><span class=\"toc-text\">把内存划分为若干个固定大小的连续分区。固定式分区又称为静态分区。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%88%86%E5%8C%BA%EF%BC%9A%E6%8C%87%E5%9C%A8%E4%BD%9C%E4%B8%9A%E8%A3%85%E5%85%A5%E5%86%85%E5%AD%98%E6%97%B6%EF%BC%8C%E4%BB%8E%E5%8F%AF%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E4%B8%AD%E5%88%92%E5%87%BA%E4%B8%80%E5%9D%97%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%8C%BA%E5%9F%9F%E5%88%86%E9%85%8D%E7%BB%99%E5%AE%83%EF%BC%8C%E4%B8%94%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F%E6%AD%A3%E5%A5%BD%E7%AD%89%E4%BA%8E%E8%AF%A5%E4%BD%9C%E4%B8%9A%E7%9A%84%E5%A4%A7%E5%B0%8F%E3%80%82%E5%8F%AF%E5%8F%98%E5%BC%8F%E5%88%86%E5%8C%BA%E4%B8%AD%E5%88%86%E5%8C%BA%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%92%8C%E5%88%86%E5%8C%BA%E7%9A%84%E4%B8%AA%E6%95%B0%E9%83%BD%E6%98%AF%E5%8F%AF%E5%8F%98%E7%9A%84%EF%BC%8C%E8%80%8C%E4%B8%94%E6%98%AF%E6%A0%B9%E6%8D%AE%E4%BD%9C%E4%B8%9A%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%92%8C%E5%A4%9A%E5%B0%91%E5%8A%A8%E6%80%81%E5%9C%B0%E5%88%92%E5%88%86%E3%80%82\"><span class=\"toc-text\">动态创建分区：指在作业装入内存时，从可用的内存中划出一块连续的区域分配给它，且分区大小正好等于该作业的大小。可变式分区中分区的大小和分区的个数都是可变的，而且是根据作业的大小和多少动态地划分。</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%8D%A2%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89\"><span class=\"toc-text\">对换（了解）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E6%8A%8A%E6%89%80%E6%9C%89%E7%9A%84%E4%BD%9C%E4%B8%9A%E6%94%BE%E5%9C%A8%E5%A4%96%E5%AD%98%EF%BC%8C%E6%AF%8F%E6%AC%A1%E5%8F%AA%E8%B0%83%E7%94%A8%E4%B8%80%E4%B8%AA%E4%BD%9C%E4%B8%9A%E8%BF%9B%E5%85%A5%E5%86%85%E5%AD%98%E8%BF%90%E8%A1%8C%EF%BC%8C%E5%BD%93%E6%97%B6%E9%97%B4%E7%89%87%E7%94%A8%E5%AE%8C%E6%97%B6%EF%BC%8C%E5%B0%86%E5%AE%83%E8%B0%83%E8%87%B3%E5%A4%96%E5%AD%98%E5%90%8E%E5%A4%87%E9%98%9F%E5%88%97%E4%B8%8A%E7%AD%89%E5%BE%85%EF%BC%8C%E5%9C%A8%E4%BB%8E%E5%90%8E%E5%A4%87%E9%98%9F%E5%88%97%E8%B0%83%E5%85%A5%E5%8F%A6%E4%B8%80%E4%B8%AA%E4%BD%9C%E4%B8%9A%E8%BF%9B%E5%85%A5%E5%86%85%E5%AD%98%E8%BF%90%E8%A1%8C%E3%80%82\"><span class=\"toc-text\">系统把所有的作业放在外存，每次只调用一个作业进入内存运行，当时间片用完时，将它调至外存后备队列上等待，在从后备队列调入另一个作业进入内存运行。</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%88%86%E9%A1%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">基本分页存储管理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">分页存储管理的基本方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E6%9C%BA%E6%9E%84\"><span class=\"toc-text\">地址变换机构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E7%BA%A7%E5%92%8C%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8\"><span class=\"toc-text\">两级和多级页表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E7%BD%AE%E9%A1%B5%E8%A1%A8\"><span class=\"toc-text\">反置页表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">优点：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%85%A8%E9%83%A8%E8%A3%85%E5%85%A5%E5%86%85%E5%AD%98%E3%80%82\"><span class=\"toc-text\">缺点：程序全部装入内存。</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%AE%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">分段存储管理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%88%86%E6%AE%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%AD%EF%BC%8C%E4%BD%9C%E4%B8%9A%E7%9A%84%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E8%A2%AB%E5%88%92%E5%88%86%E4%B8%BA%E8%8B%A5%E5%B9%B2%E4%B8%AA%E6%AE%B5%EF%BC%8C%E6%AF%8F%E4%B8%AA%E6%AE%B5%E6%98%AF%E4%B8%80%E7%BB%84%E5%AE%8C%E6%95%B4%E7%9A%84%E9%80%BB%E8%BE%91%E4%BF%A1%E6%81%AF%EF%BC%8C%E6%AF%8F%E4%B8%AA%E6%AE%B5%E9%83%BD%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E5%90%8D%E5%AD%97%EF%BC%8C%E9%83%BD%E6%98%AF%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E5%9D%80%E7%9A%84%E4%B8%80%E6%AE%B5%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%EF%BC%8C%E5%90%84%E6%AE%B5%E9%95%BF%E5%BA%A6%E6%98%AF%E4%B8%8D%E7%AD%89%E7%9A%84%E3%80%82\"><span class=\"toc-text\">在分段存储管理方式中，作业的地址空间被划分为若干个段，每个段是一组完整的逻辑信息，每个段都有自己的名字，都是从零开始编址的一段连续的地址空间，各段长度是不等的。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%A2%AB%E5%8A%A8%E6%80%81%E7%9A%84%E5%88%92%E5%88%86%E4%B8%BA%E8%8B%A5%E5%B9%B2%E4%B8%AA%E9%95%BF%E5%BA%A6%E4%B8%8D%E7%9B%B8%E5%90%8C%E7%9A%84%E5%8C%BA%E5%9F%9F%EF%BC%8C%E7%A7%B0%E4%B8%BA%E7%89%A9%E7%90%86%E6%AE%B5%EF%BC%8C%E6%AF%8F%E4%B8%AA%E7%89%A9%E7%90%86%E6%AE%B5%E7%94%B1%E8%B5%B7%E5%A7%8B%E5%9C%B0%E5%9D%80%E5%92%8C%E9%95%BF%E5%BA%A6%E7%A1%AE%E5%AE%9A\"><span class=\"toc-text\">内存空间被动态的划分为若干个长度不相同的区域，称为物理段，每个物理段由起始地址和长度确定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%AE%B5%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">分段系统的基本原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%92%8C%E5%88%86%E9%A1%B5%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">和分页的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%A1%E6%81%AF%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">信息共享</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">段页式存储管理方式</span></a></li></ol></li></ol></li></ol>","author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"操作系统-引论","uid":"39a1d68c8b246f2bec009a9ddf2e0be4","slug":"操作系统-引论","date":"2022-01-17T10:56:41.784Z","updated":"2020-10-05T12:46:21.914Z","comments":true,"path":"api/articles/操作系统-引论.json","keywords":null,"cover":[],"text":"一.操作系统引论1.操作系统的目标和功能目标 方便性 有效性 提高系统资源利用率 提高系统吞吐量 可扩充性 开放性 作用 OS作为用户与计算机硬件系统之间的接口 命令方式 系统调用方式 图标–窗口方式 OS实现了对计算机资源的抽象 2.操作系统的发展过程未配置操作系统的计算机系统...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/tags/操作系统.json"},{"name":"引论","slug":"引论","count":1,"path":"api/tags/引论.json"}],"author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"操作系统-处理机调度与死锁","uid":"1d2ed8984af443f473a28e444517b102","slug":"操作系统-处理机调度与死锁","date":"2022-01-17T10:56:41.772Z","updated":"2021-01-18T10:01:31.479Z","comments":true,"path":"api/articles/操作系统-处理机调度与死锁.json","keywords":null,"cover":[],"text":"第三章:处理机调度与死锁处理机调度算法的目标处理机调度算法的共同目标 资源利用率:CPU的利用率=CPU有效工作时间/(CPU有效工作时间+CPU空闲等待时间) 公平性 平衡性 策略强制执行 批处理系统的目标 平均周转时间短 系统吞吐量高 处理机利用率高 分时系统的目标 响应时间...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":7,"path":"api/tags/操作系统.json"},{"name":"处理机调度与死锁","slug":"处理机调度与死锁","count":1,"path":"api/tags/处理机调度与死锁.json"}],"author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}