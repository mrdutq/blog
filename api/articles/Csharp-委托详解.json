{"title":"C#-委托详解","uid":"062c7fd2e9be766961af5669ad4a0a06","slug":"Csharp-委托详解","date":"2022-01-17T10:56:41.732Z","updated":"2020-10-29T15:32:29.166Z","comments":true,"path":"api/articles/Csharp-委托详解.json","keywords":null,"cover":[],"content":"<h1 id=\"C-委托详解\"><a href=\"#C-委托详解\" class=\"headerlink\" title=\"C#委托详解\"></a>C#委托详解</h1><ul>\n<li>2020年10月29日，这部分学了挺长时间，感觉听懂了，还是要多练。</li>\n<li>视频教程、笔记内容来源：<a href=\"https://www.bilibili.com/video/BV13b411b7Ht?t=220&p=19\">刘铁猛_C#入门详解_委托详解</a></li>\n</ul>\n<h2 id=\"什么是委托\"><a href=\"#什么是委托\" class=\"headerlink\" title=\"什么是委托\"></a>什么是委托</h2><ul>\n<li><p>委托(delegate)是函数指针的“升级版”</p>\n<ul>\n<li>事例：C/C++中的函数指针</li>\n</ul>\n</li>\n<li><p>一切皆地址</p>\n<ul>\n<li>变量(数据)是以某个地址为起点的一段内存中所存储的值</li>\n<li>函数(算法)是以某个地址为起点的一段内存中所存储的一组机器语言指令</li>\n</ul>\n</li>\n<li><p>直接调用与间接调用</p>\n<ul>\n<li>直接调用：通过函数名来调用函数，CPU通过函数名直接获得函数所在地址并开始执行–&gt;返回</li>\n<li>间接调用：通过函数指针来调用函数，CPU通过读取函数指针存储的值获得函数所在地址并开始执行–&gt;返回</li>\n</ul>\n</li>\n<li><p>Java中没有与委托相对应的功能实体</p>\n<ul>\n<li>C#由Java发展而来，但是C#通过委托这种数据类型保留了与C/C++函数指针相对应的功能</li>\n</ul>\n</li>\n<li><p>委托的简单使用</p>\n<ul>\n<li><p>Action委托</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">namespace DelegateExample1\n&#123;\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            Calculator calculator &#x3D; new Calculator();\n            Action action &#x3D; new Action(calculator.Report);\n            calculator.Report();&#x2F;&#x2F;直接调用\n            action.Invoke();&#x2F;&#x2F;（间接调用）Action委托的两种调用方式\n            action();\n            Console.ReadKey();\n        &#125;\n    &#125;\n    class Calculator\n    &#123;\n        public void Report()\n        &#123;\n            Console.WriteLine(&quot;I have three methods&quot;);\n        &#125;\n\n        public int Add(int a , int b)\n        &#123;\n            int result &#x3D; a + b;\n            return result;\n        &#125;\n        public int Sub(int a, int b)\n        &#123;\n            int result &#x3D; a - b;\n            return result;\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>Func委托</p>\n<ul>\n<li><p>Func&lt;…&gt; &lt;&gt;中放的是目标方法的参数类型</p>\n<ul>\n<li>如：Func&lt;int,int,int&gt;、Func&lt;int,int,int,int&gt;;最后一个int是返回值类型</li>\n</ul>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">    namespace DelegateExample1\n&#123;\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            Calculator calculator &#x3D; new Calculator();\n\n            Func&lt;int,int,int&gt; func1&#x3D; new Func&lt;int, int, int&gt;(calculator.Add);&#x2F;&#x2F;func1 委托\n            Func&lt;int, int, int&gt; func2 &#x3D; new Func&lt;int, int, int&gt;(calculator.Sub);&#x2F;&#x2F;func2 委托\n\n            int x &#x3D; 100;\n            int y &#x3D; 200;\n            int z &#x3D; 0;\n\n            z &#x3D; func1(x, y);\n            Console.WriteLine(z);\n            z &#x3D; func2(x, y);\n            Console.WriteLine(z);\n            Console.ReadKey();\n        &#125;\n    &#125;\n    class Calculator\n    &#123;\n        public int Add(int a , int b)\n        &#123;\n            int result &#x3D; a + b;\n            return result;\n        &#125;\n        public int Sub(int a, int b)\n        &#123;\n            int result &#x3D; a - b;\n            return result;\n        &#125;\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>委托是函数指针的“升级版”，可以按照某些约束指向目标方法，帮助我们对这些方法间接调用。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"委托的声明-自定义委托\"><a href=\"#委托的声明-自定义委托\" class=\"headerlink\" title=\"委托的声明(自定义委托)\"></a>委托的声明(自定义委托)</h2><ul>\n<li><p>委托是一种类（class），类是数据类型所以委托也是一种数据类型。</p>\n</li>\n<li><p>声明方式与一般的类不同，主要是为了照顾可读性和C/C++传统。</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">namespace DelegateExample1\n&#123;\n    public delegate double Calc(double x, double y);\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            Calculator calculator &#x3D; new Calculator();\n            Calc calc1 &#x3D; new Calc(calculator.Add);\n            Calc calc2 &#x3D; new Calc(calculator.Sub);\n            Calc calc3 &#x3D; new Calc(calculator.Mul);\n            Calc calc4 &#x3D; new Calc(calculator.Div);\n\n            double a &#x3D; 100;\n            double b &#x3D; 200;\n            double c &#x3D; 0;\n            &#x2F;&#x2F;通过委托间接调用四个方法\n            c &#x3D; calc1.Invoke(a,b);\n            Console.WriteLine(c);\n            c &#x3D; calc2.Invoke(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc3.Invoke(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc4.Invoke(a, b);\n            Console.WriteLine(c);\n            &#x2F;&#x2F;仿照C&#x2F;C++函数指针方式调用，不用Invoke，结果是一样的\n            c &#x3D; calc1(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc2(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc3(a, b);\n            Console.WriteLine(c);\n            c &#x3D; calc4(a, b);\n            Console.WriteLine(c);\n            Console.ReadKey();\n        &#125;\n    &#125;\n    class Calculator\n    &#123;\n        public double Add(double a , double b)\n        &#123;\n            return a+b;\n        &#125;\n        public double Sub(double a, double b)\n        &#123;\n            return a - b;\n        &#125;\n        public double Mul(double a, double b)\n        &#123;\n            return a * b;\n        &#125;\n        public double Div(double a, double b)\n        &#123;\n            return a &#x2F; b;\n        &#125;\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>注意声明委托的位置</p>\n<ul>\n<li>避免写错地方结果声明成嵌套类型。</li>\n<li>委托是一种类，与class平级。</li>\n</ul>\n</li>\n<li><p>委托与所封装的方法必须“类型兼容”。</p>\n<ul>\n<li><img src=\"https://cdn.jsdelivr.net/gh/mrdutq/cdn/images/C#/%E5%A7%94%E6%89%98%E4%B8%8E%E6%89%80%E5%B0%81%E8%A3%85%E7%9A%84%E6%96%B9%E6%B3%95%E5%BF%85%E9%A1%BB%E2%80%9C%E7%B1%BB%E5%9E%8B%E5%85%BC%E5%AE%B9%E2%80%9D.jpg\" alt=\"委托与所封装的方法必须“类型兼容”\"><ul>\n<li>返回值的数据类型一致。</li>\n<li>参数列表在个数和数据类型上一致（参数名不需要一样）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"委托的一般使用\"><a href=\"#委托的一般使用\" class=\"headerlink\" title=\"委托的一般使用\"></a>委托的一般使用</h2><ul>\n<li><p>实例：把方法当作参数传给另一个方法(你写了一个方法，这个方法有一个委托类型的参数，委托封装了一个方法，那么我们在方法体里使用传进来的委托，间接地去调用委托封装的那个方法，这样就形成了一种动态调用方法的代码结构)</p>\n<ul>\n<li><p>模板方法，“借用”指定的外部方法来产生结果(指的是：你写了一个方法，然后通过传进来的委托参数，借用指定的外部方法来产生一个结果，这就相当于在你写的方法当中有一个填空题，这个填空题的空白处，就用传进来的委托类型的参数进行填补。也就是通过传进来的委托类型的参数间接的调用指定的外部方法，这个方法一般具有返回值，当你拿到这个返回值之后，再继续执行你所写的方法后面的逻辑)</p>\n<ul>\n<li>相当于填空题</li>\n<li>常位于代码中部</li>\n<li>委托有返回值</li>\n</ul>\n</li>\n<li><p>回调方法(callback)，调用指定的外部方法</p>\n<ul>\n<li>相当于流水线</li>\n<li>常位于代码末尾</li>\n<li>委托无返回值</li>\n</ul>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">namespace DelegateExample1\n&#123;\n    public delegate double Calc(double x, double y);\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            ProductFactory productFactory &#x3D; new ProductFactory();&#x2F;&#x2F;new一个工厂类的实例。就有了一个工厂可以生产披萨饼和玩具车\n            WrapFactory wrapFactory &#x3D; new WrapFactory();&#x2F;&#x2F;new一个包装工厂的实例。就有了一个包装工厂可以对产品进行包装\n\n            &#x2F;&#x2F;模板方法\n            Func&lt;Product&gt; func1 &#x3D; new Func&lt;Product&gt;(productFactory.MakePizza);&#x2F;&#x2F;声明一个委托，没有参数，返回值类型为Product。这个委托封装生产披萨饼的方法\n            Func&lt;Product&gt; func2 &#x3D; new Func&lt;Product&gt;(productFactory.MakeToyCar);\n\n            Logger logger &#x3D; new Logger(); &#x2F;&#x2F;声明logger类的实例\n            Action&lt;Product&gt; log &#x3D; new Action&lt;Product&gt;(logger.Log);\n\n            &#x2F;&#x2F;调用模板方法\n            Box box1 &#x3D; wrapFactory.WrapProduct(func1,log); &#x2F;&#x2F;包装产品。包装工厂.包装产品。返回值类型为Box，用一个Box类型的box1变量接收返回值。\n            Box box2 &#x3D; wrapFactory.WrapProduct(func2,log);\n\n            &#x2F;&#x2F;打印生产好的产品\n            Console.WriteLine(box1.Product.Name);\n            Console.WriteLine(box2.Product.Name);\n            Console.ReadKey();\n        &#125;\n    &#125;\n\n    class Logger&#x2F;&#x2F;记录程序的工作状态；把log方法以回调方法的形式传进模板方法里\n    &#123;\n        public void Log(Product product)\n        &#123;\n            Console.WriteLine(&quot;Product&#39;&#123;0&#125;&#39;created at&#123;1&#125;.Price is &#123;2&#125;&quot;,\n            product.Name,DateTime.UtcNow,product.Price);&#x2F;&#x2F;UtcNow,不带时区的时间\n        &#125;\n    &#125;\n\n    class Product&#x2F;&#x2F;产品类，产品名字\n    &#123;\n        public string Name &#123; get; set; &#125;\n        public double Price &#123; get; set; &#125;\n    &#125;\n    class Box&#x2F;&#x2F;包装箱，有一个属性说明箱子里包装的产品\n    &#123;\n        public Product Product &#123; get; set; &#125;\n    &#125;\n    class WrapFactory&#x2F;&#x2F;包装工厂吗，负责把产品包上箱子\n    &#123;\n        public Box WrapProduct(Func&lt;Product&gt; getProduct,Action&lt;Product&gt; logCallback)&#x2F;&#x2F;模板方法，接收一个委托类型的参数，func委托，封装的方法能返回一个product类型的对象。对于没有返回值的方法，用Action委托，接收的类型参数为Product，定义一个委托类型的参数logCallback\n        &#123;\n            Box box &#x3D; new Box();&#x2F;&#x2F;有一个箱子\n            Product product &#x3D; getProduct.Invoke();&#x2F;&#x2F;调用完getProduct.Invoke()会得到一个Product类型的对象，赋给product\n            if(product.Price&gt;&#x3D;50)&#x2F;&#x2F;如果产品价格大于50元就触发log\n            &#123;\n                logCallback(product);\n            &#125;\n            box.Product &#x3D; product;&#x2F;&#x2F;把产品装进箱子里\n            return box;&#x2F;&#x2F;返回这个箱子\n        &#125;\n    &#125;\n    class ProductFactory&#x2F;&#x2F;生产产品的工厂\n    &#123;\n        public Product MakePizza()&#x2F;&#x2F;产品：披萨饼\n        &#123;\n            Product product &#x3D; new Product();\n            product.Name &#x3D; &quot;Pizza&quot;;\n            product.Price &#x3D; 12;\n            return product;\n        &#125;\n        public Product MakeToyCar()&#x2F;&#x2F;产品：玩具车\n        &#123;\n            Product product &#x3D; new Product();\n            product.Name &#x3D; &quot;Toy Car&quot;;\n            product.Price &#x3D; 100;\n            return product;\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>注意：难精通+易使用+功能强大的东西，一旦被滥用则后果非常严重</p>\n<ul>\n<li>缺点1：这是一种方法级别的紧耦合，现实工作中要慎之又慎。</li>\n<li>缺点2：使可读性下降、debug的难度增加。</li>\n<li>缺点3：把委托回调、异步调用和多线程纠缠在一起，会让代码变得难以阅读和维护。</li>\n<li>缺点4：委托使用不当有可能造成内存泄漏和程序性能下降。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"委托的高级使用\"><a href=\"#委托的高级使用\" class=\"headerlink\" title=\"委托的高级使用\"></a>委托的高级使用</h2><ul>\n<li>多播(multicast)委托</li>\n</ul>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">namespace MulticastDelegateExample\n&#123;\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            &#x2F;&#x2F;使用委托调用DoHomework()\n            &#x2F;&#x2F;首先创建几个学生的实例stu1、stu2、stu3\n            Student stu1 &#x3D; new Student() &#123; ID &#x3D; 1, PenColor &#x3D; ConsoleColor.Yellow &#125;;\n            Student stu2 &#x3D; new Student() &#123; ID &#x3D; 2, PenColor &#x3D; ConsoleColor.Green &#125;;\n            Student stu3 &#x3D; new Student() &#123; ID &#x3D; 3, PenColor &#x3D; ConsoleColor.Red &#125;;\n            &#x2F;&#x2F;然后创建几个委托\n            Action action1 &#x3D; new Action(stu1.DoHomework);\n            Action action2 &#x3D; new Action(stu2.DoHomework);\n            Action action3 &#x3D; new Action(stu3.DoHomework);\n            &#x2F;&#x2F;调用这几个委托，与之前讲的委托相同；单播委托\n            &#x2F;&#x2F;            action1.Invoke();\n            &#x2F;&#x2F;            action2.Invoke();\n            &#x2F;&#x2F;            action3.Invoke();\n            &#x2F;&#x2F;多播委托；用一个委托封装多个方法。执行顺序按封装的顺序\n            action1 +&#x3D; action2;&#x2F;&#x2F;相当于把action2合并到action1里面\n            action1 +&#x3D; action3;&#x2F;&#x2F;action1里面就封装了三个方法\n            action1.Invoke();\n\n        &#125;\n    &#125;\n\n    class Student\n    &#123;\n        public int ID &#123; get; set; &#125;\n        public ConsoleColor PenColor &#123; get; set; &#125;\n\n        public void DoHomework()\n        &#123;\n            for (int i &#x3D; 0; i &lt; 5; i++)\n            &#123;\n                Console.ForegroundColor &#x3D; this.PenColor;\n                Console.WriteLine(&quot;Student &#123;0&#125; doing homework &#123;1&#125; hour(s).&quot;, this.ID, i);\n                Thread.Sleep(1000);\n            &#125;\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>隐式异步调用<ul>\n<li>同步与异步的简介<ul>\n<li>中英文的语言差异</li>\n<li>同步：你做完了我（在你的基础上）接着做</li>\n<li>异步：咱们两个同时做（相当于汉语中的“同步进行”）</li>\n</ul>\n</li>\n<li>同步调用与异步调用的对比<ul>\n<li>每一个运行的程序是一个进程（process）</li>\n<li>每个进程可以有一个或者多个线程（thread）</li>\n<li>同步调用是在同一线程内</li>\n<li>异步调用的底层机理是多线程</li>\n<li>串行==同步==单线程；并行==异步==多线程</li>\n</ul>\n</li>\n<li>隐式多线程 v.s. 显式多线程<ul>\n<li>直接同步调用：使用方法名</li>\n<li>间接同步调用：使用单播/多播委托的Invoke方法</li>\n<li>隐式异步调用：使用委托的BeginInvoke</li>\n<li>显式异步调用：使用Thread或Task</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>应该适时地使用接口（interface）取代一些对委托的使用<ul>\n<li>Java完全地使用接口取代了委托的功能，即Java没有与C#中委托相对应的功能实体。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">namespace MulticastDelegateExample\n&#123;\n    class Program\n    &#123;\n        static void Main(string[] args)\n        &#123;\n            &#x2F;&#x2F;使用委托调用DoHomework()\n            &#x2F;&#x2F;首先创建几个学生的实例stu1、stu2、stu3\n            Student stu1 &#x3D; new Student() &#123; ID &#x3D; 1, PenColor &#x3D; ConsoleColor.Yellow &#125;;\n            Student stu2 &#x3D; new Student() &#123; ID &#x3D; 2, PenColor &#x3D; ConsoleColor.Green &#125;;\n            Student stu3 &#x3D; new Student() &#123; ID &#x3D; 3, PenColor &#x3D; ConsoleColor.Red &#125;;\n\n            &#x2F;&#x2F;直接同步调用\n            stu1.DoHomework();\n            stu2.DoHomework();\n            stu3.DoHomework();\n&#x2F;&#x2F; 多播委托也是同步调用\n            &#x2F;&#x2F;间接同步调用\n        &#x2F;&#x2F;    Action action1 &#x3D; new Action(stu1.DoHomework);\n        &#x2F;&#x2F;    Action action2 &#x3D; new Action(stu2.DoHomework);\n        &#x2F;&#x2F;    Action action3 &#x3D; new Action(stu3.DoHomework);\n\n        &#x2F;&#x2F;    action1.Invoke();\n        &#x2F;&#x2F;    action2.Invoke();\n        &#x2F;&#x2F;    action3.Invoke();\n            &#x2F;&#x2F;使用委托进行隐式异步调用(最重要-beginInvoke())\n            &#x2F;&#x2F;Action action1 &#x3D; new Action(stu1.DoHomework);\n            &#x2F;&#x2F;Action action2 &#x3D; new Action(stu2.DoHomework);\n            &#x2F;&#x2F;Action action3 &#x3D; new Action(stu3.DoHomework);\n            &#x2F;&#x2F;BeginInvoke()会自动生成一个分支线程，然后在分支线程里调用它封装的方法。\n            &#x2F;&#x2F;action1.BeginInvoke(null,null);&#x2F;&#x2F;参数是方法用完之后执行的后续操作(回调方法)，null指不进行其他操作。\n            &#x2F;&#x2F;action2.BeginInvoke(null, null);\n            &#x2F;&#x2F;action3.BeginInvoke(null, null);\n\n            &#x2F;&#x2F;用Thread进行显式异步调用(动手声明多线程)\n            &#x2F;&#x2F;创建三个线程thread1、thread2、thread3\n            &#x2F;&#x2F;Thread thread1 &#x3D; new Thread(stu1.DoHomework);\n            &#x2F;&#x2F;Thread thread2 &#x3D; new Thread(stu2.DoHomework);\n            &#x2F;&#x2F;Thread thread3 &#x3D; new Thread(stu3.DoHomework);\n            &#x2F;&#x2F;启动这三个线程\n            &#x2F;&#x2F;thread1.Start();\n            &#x2F;&#x2F;thread2.Start();\n            &#x2F;&#x2F;thread3.Start();\n\n            &#x2F;&#x2F;用Task进行显式异步调用(多线程)\n            &#x2F;&#x2F;Task task1 &#x3D; new Task(new Action(stu1.DoHomework));\n            &#x2F;&#x2F;Task task2 &#x3D; new Task(new Action(stu2.DoHomework));\n            &#x2F;&#x2F;Task task3 &#x3D; new Task(new Action(stu3.DoHomework));\n\n            &#x2F;&#x2F;task1.Start();\n            &#x2F;&#x2F;task2.Start();\n            &#x2F;&#x2F;task3.Start();\n\n            for(int i &#x3D; 0; i &lt;10; i++)\n            &#123;\n                Console.ForegroundColor &#x3D; ConsoleColor.Cyan;\n                Console.WriteLine(&quot;Main thread &#123;0&#125;&quot;,i);\n                Thread.Sleep(1000);\n            &#125;\n        &#125;\n    &#125;\n\n    class Student\n    &#123;\n        public int ID &#123; get; set; &#125;\n        public ConsoleColor PenColor &#123; get; set; &#125;\n\n        public void DoHomework()\n        &#123;\n            for (int i &#x3D; 0; i &lt; 5; i++)\n            &#123;\n                Console.ForegroundColor &#x3D; this.PenColor;\n                Console.WriteLine(&quot;Student &#123;0&#125; doing homework &#123;1&#125; hour(s).&quot;, this.ID, i);\n                Thread.Sleep(1000);\n            &#125;\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"C#委托详解 2020年10月29日，这部分学了挺长时间，感觉听懂了，还是要多练。 视频教程、笔记内容来源：刘铁猛_C#入门详解_委托详解 什么是委托 委托(delegate)是函数指针的“升级版” 事例：C/C++中的函数指针 一切皆地址 变量(数据)是以某个地址为起点的一段内...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"C#","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"C#","slug":"C","count":1,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E5%A7%94%E6%89%98%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">C#委托详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%A7%94%E6%89%98\"><span class=\"toc-text\">什么是委托</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A7%94%E6%89%98%E7%9A%84%E5%A3%B0%E6%98%8E-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A7%94%E6%89%98\"><span class=\"toc-text\">委托的声明(自定义委托)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A7%94%E6%89%98%E7%9A%84%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">委托的一般使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A7%94%E6%89%98%E7%9A%84%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">委托的高级使用</span></a></li></ol></li></ol>","author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaWeb-HTML","uid":"97fa08a641b620fbc43f3d20dc2a7120","slug":"JavaWeb-HTML","date":"2022-01-17T10:56:41.737Z","updated":"2020-09-29T16:29:28.975Z","comments":true,"path":"api/articles/JavaWeb-HTML.json","keywords":null,"cover":null,"text":"JavaWeb-HTML这篇文章主要对HTML标签进行介绍和归纳。 基本概念 HTML 是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。 CSS 样式是表现。比如，标题字体、颜色变化，或为标题加入背景图片、边框等，所有这些用来改变内...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"JavaWeb","slug":"JavaWeb","count":2,"path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":2,"path":"api/tags/JavaWeb.json"},{"name":"HTML","slug":"HTML","count":1,"path":"api/tags/HTML.json"}],"author":{"name":"天琦","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"为天地立心，为生民立命，为往圣继绝学，为万世开太平！！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}